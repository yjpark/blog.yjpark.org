<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Living and Programming - YJ Park&#39;s Blog</title>
    <link>http://blog.yjpark.org/post/</link>
    <description>Recent content in Posts on Living and Programming - YJ Park&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>yjpark@gmail.com (YJ Park)</managingEditor>
    <webMaster>yjpark@gmail.com (YJ Park)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sat, 12 Apr 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.yjpark.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SILP: Simple Individual Line Preprocessor</title>
      <link>http://blog.yjpark.org/blog/2014/04/12/silp-simple-individual-line-preprocessor/</link>
      <pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2014/04/12/silp-simple-individual-line-preprocessor/</guid>
      <description>

&lt;h2 id=&#34;why-bother-with-a-preprocessor&#34;&gt;Why bother with a preprocessor?&lt;/h2&gt;

&lt;p&gt;I was quite busy working on our &lt;a href=&#34;http://emberconflict.com/&#34;&gt;RTS game on iPad&lt;/a&gt; for almost a year, we are quite close to our first public version now. It&amp;rsquo;s developed with Unity3d, using uLink as the network library. Created a quite nice data context system on Unity3d, so non-developers can update pure visual part of the system without developers&amp;rsquo; help, will write some entries on it later when got time.&lt;/p&gt;

&lt;p&gt;SILP is a very small side project come from the process working on it. It&amp;rsquo;s a simple language-agnostic preprocessor.&lt;/p&gt;

&lt;p&gt;There are many discussions about whether a programming language should include preprocessor, most people seems agree that preprocessor is too error-prune and sacrifice readability too badly, and there should be seldom cases that an alternative can&amp;rsquo;t be find to replace the preprocessor usage.&lt;/p&gt;

&lt;p&gt;I agree that in most cases we don&amp;rsquo;t need preprocessor though there are several cases that I would like to have a preprocessor in my tool set for cleaner codes or can remove some trivial typing. Here are 2 examples:&lt;/p&gt;

&lt;h3 id=&#34;common-import-statements&#34;&gt;Common Import Statements&lt;/h3&gt;

&lt;p&gt;In each project, most likely there will be some very common import statements that every source file want to include, e.g. logging and other utilities. In dynamic languages such as Python, it&amp;rsquo;s not hard to inject them into the global namespace in some bootstrap functions, though in Java or Go it&amp;rsquo;s not quite possible, each file has to have these lines.&lt;/p&gt;

&lt;p&gt;Since Go support and recommend import from a git url, this is a bit more annoying. Here is a quick example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;github.com/golang/glog&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s both longer to type, and harder to change in the future, what if we need to change something in the source codes of the library? We can fork the source repository, and working on it, though we have to go over every source file and change the url of the import. It&amp;rsquo;s not too hard with some tools like sed, though it&amp;rsquo;s a bit ugly and fragile to me since we have to replace in text level.&lt;/p&gt;

&lt;p&gt;Of course with just one import, it&amp;rsquo;s not a big problem, though in practice, it&amp;rsquo;s very easy to have several imports for every file, and quite some other imports grouped by file types (e.g. services that need db library, services that provide RPC calls&amp;hellip;)&lt;/p&gt;

&lt;h3 id=&#34;duplicate-codes&#34;&gt;Duplicate Codes&lt;/h3&gt;

&lt;p&gt;Some time, it&amp;rsquo;s not very easy to use usual way to remove duplicated codes, here is an example in Unity3d, it&amp;rsquo;s a piece of our codes to check whether a user is already online in the system.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private IEnumerator SaveArmyAsync(LobbyClient client, ArmyInfo armyInfo) {
    float startTime = Monitor.AddStartedEvent(LobbyMonitor.ARMY_SAVE_ARMY);

    string error = LobbyNetError.ACCOUNT_ONLINE_WITH_OTHER_DEVICE;
    IEnumerator checkOnline = client.CheckOnlinePlayer(_OnlinePlayerInfoBucket, () =&amp;gt; {
        error = null;
    });
    while (checkOnline.MoveNext()) yield return checkOnline.Current;

    if (error != null) {
        LobbyRPCUtils.SendNak(this, client, LobbyMonitor.ARMY_SAVE_ARMY, &amp;quot;RPC_SaveArmyFailed&amp;quot;, error);
        yield break;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The logic here may not be very clear without full context, basically what it did is to create a event and send to our &lt;a href=&#34;https://github.com/imvu-open/istatd&#34;&gt;istatd server&lt;/a&gt;, save the time into &lt;code&gt;startTime&lt;/code&gt;, calling &lt;code&gt;client.CheckOnlinePlayer()&lt;/code&gt; to check whether the user is logged in the system from other device, and calling &lt;code&gt;LobbyRPCUtils.SendNak()&lt;/code&gt; to send a RPC call to the client if the user is already online.&lt;/p&gt;

&lt;p&gt;The same structure is almost identical for all our server side RPC functions, only difference are the event id and RPC name, in this case &lt;code&gt;LobbyMonitor.ACCOUNT_LOGIN&lt;/code&gt; and &lt;code&gt;RPC_OnLoginFailed&lt;/code&gt;. As you can see, common functions are created to do most logic. But it&amp;rsquo;s not very easy to make the whole pattern into a shorter format, because we have to follow the coroutine style here.&lt;/p&gt;

&lt;p&gt;For example, line 3 ~ 7 are running &lt;code&gt;client.CheckOnlinePlayer()&lt;/code&gt; in the coroutine way, and line 9 ~ 12 are handling the error case. We can&amp;rsquo;t yield break in &lt;code&gt;client.CheckOnlinePlayer()&lt;/code&gt; since it will only break it&amp;rsquo;s own coroutine, instead of the outer one here.&lt;/p&gt;

&lt;p&gt;Passing callback function into &lt;code&gt;client.CheckOnlinePlayer()&lt;/code&gt; can solve the error handling, though still need the first trick, and the code will be less readable comparing with this way (using the callback style in many other places though).&lt;/p&gt;

&lt;p&gt;If we are using a language supporting preprocessor, then we can easily create a macro here to do the duplicated works, though not possible in C#, until I created the SILP project, Our only option was just copy-paste.&lt;/p&gt;

&lt;h2 id=&#34;so-what-is-silp&#34;&gt;So What is SILP?&lt;/h2&gt;

&lt;p&gt;After we have more RPC calls in the system sharing the similar code structure shown in last example, I decided to do something to improve it. Solve it in the language scope seems not a good option to me (only possible approach I figured possible was to wrap coroutine somehow and use some customized data structure to provide cleaner interface, both heavy and unnecessary), and I was thinking about finding a language-agnostic preprocessor for a while, so I spent some time to look for a existing project that I can use.&lt;/p&gt;

&lt;p&gt;After a quick research, was a bit disappointed with the result, most of the preprocessors either are heavily limited to one language or provide way too much power than I need (so it&amp;rsquo;s harder to learn and use). It&amp;rsquo;s very clear that all I need is just a simple text substitution tools, so I created SILP and spend a whole day on it, the result is quite satisfying.&lt;/p&gt;

&lt;h3 id=&#34;how-simple-silp-is&#34;&gt;How Simple SILP Is?&lt;/h3&gt;

&lt;p&gt;There is zero logic in the syntax, currently all supported feature is parameter substitution in the template, and unless super useful, no complex feature will be added in the future.&lt;/p&gt;

&lt;p&gt;SILP only handle individual line as well. All generated lines will be put back to the original file after the line with SILP syntax.&lt;/p&gt;

&lt;h3 id=&#34;when-should-use-silp&#34;&gt;When Should Use SILP?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Standard code block that&amp;rsquo;s hard to be eliminated by regular technique.&lt;/li&gt;
&lt;li&gt;Some small piece of logic that you don&amp;rsquo;t want to wrap in a function and the language doesn&amp;rsquo;t support inline functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;when-should-not-use-silp&#34;&gt;When Should NOT Use SILP?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you can remove duplicated code in language supported way.&lt;/li&gt;
&lt;li&gt;The logic is not standard, and using SILP make them harder to read.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;full-example-with-silp&#34;&gt;Full Example With SILP&lt;/h2&gt;

&lt;p&gt;After implementing SILP, here is how I can remove the duplicated codes in the previous online player checking logic, here is the &lt;code&gt;silp_cs.md&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# LOBBY_SERVER_RPC_CHECK_ONLINE_PLAYER(eventId, nakRPC) #
```C#
float startTime = Monitor.AddStartedEvent(${eventId});

string error = LobbyNetError.ACCOUNT_ONLINE_WITH_OTHER_DEVICE;
IEnumerator checkOnline = client.CheckOnlinePlayer(_OnlinePlayerInfoBucket, () =&amp;gt; {
    error = null;
});
while (checkOnline.MoveNext()) yield return checkOnline.Current;
if (error != null) {
    LobbyRPCUtils.SendNak(this, client, ${eventId}, ${nakRPC}, error);
    yield break;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The format is actually a valid &lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown&#34;&gt;github flavored markdown&lt;/a&gt;, only supported syntax is the h1 title (has to be like &lt;code&gt;# macro(param1, param2) #&lt;/code&gt;), and code block.&lt;/p&gt;

&lt;p&gt;Here is the rendered image with the above example by &lt;a href=&#34;http://markedapp.com/&#34;&gt;Marked&lt;/a&gt;, looks nice isn&amp;rsquo;t it? (note that you need to toggle the &lt;code&gt;convert fenced code block&lt;/code&gt; option)&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://blog.yjpark.org/img/silp/silp_example_marked.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;View By Marked&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Now all the RPC calls will be like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private IEnumerator SaveArmyAsync(LobbyClient client, ArmyInfo armyInfo) {
    //SILP: LOBBY_SERVER_RPC_CHECK_ONLINE_PLAYER(LobbyMonitor.ARMY_SAVE_ARMY, &amp;quot;RPC_SaveArmyFailed&amp;quot;)
    float startTime = Monitor.AddStartedEvent(LobbyMonitor.ARMY_SAVE_ARMY);                            //__SILP__
                                                                                                       //__SILP__
    string error = LobbyNetError.ACCOUNT_ONLINE_WITH_OTHER_DEVICE;                                     //__SILP__
    IEnumerator checkOnline = client.CheckOnlinePlayer(_OnlinePlayerInfoBucket, () =&amp;gt; {                //__SILP__
        error = null;                                                                                  //__SILP__
    });                                                                                                //__SILP__
    while (checkOnline.MoveNext()) yield return checkOnline.Current;                                   //__SILP__
    if (error != null) {                                                                               //__SILP__
        LobbyRPCUtils.SendNak(this, client, LobbyMonitor.ARMY_SAVE_ARMY, &amp;quot;RPC_SaveArmyFailed&amp;quot;, error); //__SILP__
        yield break;                                                                                   //__SILP__
    }                                                                                                  //__SILP__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All lines end with &lt;code&gt;//__SILP__&lt;/code&gt; are generated automatically, and can be regenerated with SILP, so if you want to adjust the logic in the future, should be very easy to do, and create a new RPC call is trivial as well, only need to write one line, and run SILP again (current manually, though it should be easy to make it automatically)&lt;/p&gt;

&lt;h2 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s Next&lt;/h2&gt;

&lt;p&gt;Here is the repository: &lt;a href=&#34;https://github.com/yjpark/silp&#34;&gt;https://github.com/yjpark/silp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also available through PyPi, you can install with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install silp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will first finish the documentation for what&amp;rsquo;s working now, maybe adding more languages to default setting (mainly just how to add the special comments).&lt;/p&gt;

&lt;p&gt;Maybe put the language configuration into the &lt;code&gt;silp_xx.md&lt;/code&gt; file as well, though it might be more complicate to use and error-prone, so not sure about how to do this yet.&lt;/p&gt;

&lt;p&gt;There are some interesting possibilities with editors here, e.g. set up code folding for SILP line and the generated line.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Save Day One Summary to Evernote</title>
      <link>http://blog.yjpark.org/blog/2014/01/21/save-day-one-summary-to-evernote/</link>
      <pubDate>Tue, 21 Jan 2014 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2014/01/21/save-day-one-summary-to-evernote/</guid>
      <description>

&lt;h2 id=&#34;why-not-just-use-evernote&#34;&gt;Why Not Just Use Evernote?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been using Evernote for several years, which is great, the best features to me are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multi devices synchronization&lt;/li&gt;
&lt;li&gt;High quality app on iOS/Android and OSX&lt;/li&gt;
&lt;li&gt;Very good search in notes (even in the photos)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though lately I found myself write less an less in Evernote, if I&amp;rsquo;m writing something long, then usually I will use MacVim, may copy the text back to Evernote. If I need to write a couple of line, the process to write in Evernote is like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch to Evernote&lt;/li&gt;
&lt;li&gt;Find the note for current day (each day I will have a new note.)&lt;/li&gt;
&lt;li&gt;Go to the end of the note&lt;/li&gt;
&lt;li&gt;Write something&lt;/li&gt;
&lt;li&gt;Switch back&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feels a bit heavy, also there is no information about when I did add the line into the note.&lt;/p&gt;

&lt;h2 id=&#34;day-one&#34;&gt;Day One&lt;/h2&gt;

&lt;p&gt;Since 2013 I started to use &lt;a href=&#34;http://dayoneapp.com/&#34;&gt;Day One&lt;/a&gt;, which is a very beautiful application(has OSX and iOS versions) for note taking. Here is the reasons that I like it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quick note adding widget in menubar, which can be triggered by a global shortcut&lt;/li&gt;
&lt;li&gt;Markdown format, rendered very nicely as well.&lt;/li&gt;
&lt;li&gt;Dropbox synchronization, iCloud supported as well.&lt;/li&gt;
&lt;li&gt;Every note has a timestamp.&lt;/li&gt;
&lt;li&gt;Calendar view for all the notes.&lt;/li&gt;
&lt;li&gt;Look and feels very nice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then the process to add a quick note will be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the global shortcut.&lt;/li&gt;
&lt;li&gt;Type, then Cmd-Enter to save it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s much more light-weigh comparing to the Evernote way.&lt;/p&gt;

&lt;h2 id=&#34;why-not-just-use-day-one&#34;&gt;Why Not Just Use Day One?&lt;/h2&gt;

&lt;p&gt;One major missed part in &lt;code&gt;Day One&lt;/code&gt; is the lack of Android support, also the search is not as good as evernote, another problem is that you can not see all the notes in one day at once, you have to mouse over each item to see the whole content, which is a bit annoying IMO.&lt;/p&gt;

&lt;h2 id=&#34;dayone-2-evernote&#34;&gt;Dayone 2 Evernote&lt;/h2&gt;

&lt;p&gt;So I wrote a very simple script to export &lt;code&gt;Day One&lt;/code&gt; entries as a summary note in Evernote.&lt;/p&gt;

&lt;p&gt;Timestamps will be added in front of each entry.&lt;/p&gt;

&lt;p&gt;The summary note will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[00:25]
One note written in Day One

[19:17]
Another note in Day One

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They will not be converted to HTML format, since I prefer to keep the plain text format in Evernote, and MarkDown notes looks very nice as plain text to me.&lt;/p&gt;

&lt;p&gt;Note that since I used the applescript to save the note, it only works on OSX. Also there is some tricks to keep track of the last saved date. Check the README in the repository for more informations.&lt;/p&gt;

&lt;p&gt;The code is: &lt;a href=&#34;https://github.com/yjpark/dayone2evernote&#34;&gt;https://github.com/yjpark/dayone2evernote&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Marmalade Tricks and Tips</title>
      <link>http://blog.yjpark.org/blog/2013/04/14/marmalade-tricks-and-tips/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2013/04/14/marmalade-tricks-and-tips/</guid>
      <description>

&lt;p&gt;During the days to develop our first game: &lt;a href=&#34;https://itunes.apple.com/us/app/day-day-birds/id608802879?mt=8&amp;amp;uo=4&#34;&gt;Day Day Birds&lt;/a&gt;, I went through the progress of learning to use Marmalade, generally it&amp;rsquo;s very easy to use, and save me lot of time, though there are some little things that I hoped that I know earlier.&lt;/p&gt;

&lt;h2 id=&#34;stack-size&#34;&gt;Stack Size&lt;/h2&gt;

&lt;p&gt;The game started to crash randomly before I noticed, it&amp;rsquo;s quite hard to debug, especially without the tools in Xcode or other IDEs provide. And it never crash in the simulator, so the debugging is quite awkward, a lot of guess, build, test-run going on.&lt;/p&gt;

&lt;p&gt;When it crashed on iOS device, some information were provided, though full stack trace is not availabe, and the place of crash is not consistent. After 2 or 3 days and nights figihting with this bug, finally found out the root cause, which is very surprising.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s caused by stack overflow, since Marmalade is designed to support many different mobile devices, many of them are with limited hardware, the stack size is 32k by default, since I&amp;rsquo;m having a LUA layer, and also allocated some string buffer in stack for convinience, it got overflowed, so caused the random crash.&lt;/p&gt;

&lt;p&gt;There is actually a &lt;a href=&#34;http://www.madewithmarmalade.com/devnet/forum/advice-anyone-experiencing-heap-corruption-3&#34;&gt;forum thread&lt;/a&gt; mentioned this.&lt;/p&gt;

&lt;p&gt;Since I only plan to support the modern devices (iPhone, iPad, maybe Android as well), gave it a much bigger setting fix the crash perfectly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   [s3e]
   SysStackSize=4000000
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;accelerate-framework&#34;&gt;Accelerate framework&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m using libBass for the audio playpack, for some reason it require Accelarate frame under iOS to compile. so I add &lt;code&gt;iphone-link-opts=&amp;quot;-weak_framework Accelerate&amp;quot;&lt;/code&gt; into the mkf file.&lt;/p&gt;

&lt;p&gt;For unknown reason, the Accelerate.framework stub in &lt;code&gt;/Developer/Marmalade/6.2/s3e/deploy/plugins/iphone/sys_libs/System/Library/Frameworks/Accelerate.frameworks/Accelerate&lt;/code&gt; is not working, might be the nested frameworks inside it.&lt;/p&gt;

&lt;p&gt;Not really understand how the stub frameworks work in Marmalade, seems a smart way to use the system&amp;rsquo;s SDK libraries, though a hacky solution make it compiled.&lt;/p&gt;

&lt;p&gt;Current fix is to copy the framework from &lt;code&gt;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/System/Library/Frameworks/Accelerate.framework&lt;/code&gt;. Not sure whether there is side effects.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp -r /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/System/Library/Frameworks/Accelerate.framework/* /Developer/Marmalade/6.2/s3e/deploy/plugins/iphone/sys_libs/System/Library/Frameworks/Accelerate.framework/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ios-device-crash-report&#34;&gt;iOS device crash report&lt;/h2&gt;

&lt;p&gt;This page explains how to read the crash report nicely, also don&amp;rsquo;t forget to save the mapping file of the version you submitted to app store, otherwise you will have no idea to debug when get crash logs from Apple.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://marmalade.zendesk.com/entries/22126117-how-to-map-iphone-crash-log-addresses-to-your-code&#34;&gt;How to map iPhone crash log addressed to your code&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;some-mkb-settings&#34;&gt;Some mkb settings&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;deployments
{
    name=&amp;quot;Slingshot&amp;quot;
    version=1.0

    [&amp;quot;Default&amp;quot;]
    iphone-provisioning-profile=&amp;quot;data/provisions/DayDayBirdsDev.mobileprovision&amp;quot;
    iphone-enable-4inch-retina=1
    iphone-no-splash=1
    iphone-prerendered-icon=1
    iphone-icon=&amp;quot;data/icon/Icon.png&amp;quot;
    iphone-icon-high-res=&amp;quot;data/icon/Icon@2x.png&amp;quot;
    iphone-icon-ipad=&amp;quot;data/icon/Icon-72.png&amp;quot;
    iphone-icon-ipad-high-res=&amp;quot;data/icon/Icon-72@2x.png&amp;quot;
    iphone-icon-ipad-search=&amp;quot;data/icon/Icon-Small-50.png&amp;quot;
    iphone-icon-ipad-search-high-res=&amp;quot;data/icon/Icon-Small-50@2x.png&amp;quot;
    iphone-icon-settings=&amp;quot;data/icon/Icon-Small.png&amp;quot;
    iphone-icon-settings-high-res=&amp;quot;data/icon/Icon-Small@2x.png&amp;quot;
    
    #Android
    android-icon=&amp;quot;data/android/icon/icon_48.png&amp;quot;
    android-icon-gallery=&amp;quot;data/android/icon/icon_170.png&amp;quot;
    android-icon-hdpi=&amp;quot;data/android/icon/icon_72.png&amp;quot;
    android-icon-ldpi=&amp;quot;data/android/icon/icon_36.png&amp;quot;
    android-icon-mdpi=&amp;quot;data/android/icon/icon_48.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;iphone-enable-4inch-retina=1&lt;/code&gt; enabled the iPhone 5 wide screen mode.&lt;/p&gt;

&lt;h2 id=&#34;some-app-icf-settings&#34;&gt;Some app.icf settings&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;DispFixRot=&amp;quot;Landscape&amp;quot;
IOSDispScaleFactor=200

{ID=IPHONE &amp;quot;iPad1,1&amp;quot;}
[s3e]
memSize = 30000000
SysStackSize=1000000
{ID=IPHONE &amp;quot;iPad2,1&amp;quot;,&amp;quot;iPad2,2&amp;quot;,&amp;quot;iPad2,3&amp;quot;,&amp;quot;iPad2,4&amp;quot;,&amp;quot;iPad2,5&amp;quot;,&amp;quot;iPad2,6&amp;quot;,&amp;quot;iPad2,7&amp;quot;}
[s3e]
memSize = 64000000
{ID=IPHONE &amp;quot;iPod1,1&amp;quot;,&amp;quot;iPod2,1&amp;quot;,&amp;quot;iPod3,1&amp;quot;,&amp;quot;iPod4,1&amp;quot;,&amp;quot;iPhone1,1&amp;quot;,&amp;quot;iPhone1,2&amp;quot;,&amp;quot;iPhone2,1&amp;quot;}
[s3e]
memSize = 34000000
SysStackSize=1000000
{ID=IPHONE &amp;quot;iPod5,1&amp;quot;,&amp;quot;iPhone3,1&amp;quot;,&amp;quot;iPhone3,2&amp;quot;,&amp;quot;iPhone4,1&amp;quot;,&amp;quot;iPhone4,2&amp;quot;}
[s3e]
memSize = 64000000
{OS=ANDROID}
[s3e]
memSize = 80000000
{OS=OSX}
[s3e]
memSize = 256000000
{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;DispFixRot=&amp;quot;Landscape&amp;quot;&lt;/code&gt; is to lock the screen rotation to be landscape only, I&amp;rsquo;ve met quite some problem with landscape, probably will write another post about it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IOSDispScaleFactor=200&lt;/code&gt; is used to activate the retina screen support, so the resolution of retina iPad will be 2048 x 1536,&lt;/p&gt;

&lt;p&gt;It took me quite some efforts to learn how to do the device-specific settings in app.icf, the syntax is quite complex, the marmalade documents actually cover this, though lacking good samples.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Initial Release of s3eBass - Marmalade extension for BASS audio engine</title>
      <link>http://blog.yjpark.org/blog/2012/11/06/initial-release-of-s3ebass-marmalade-extension-for-bass-audio-engine/</link>
      <pubDate>Tue, 06 Nov 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/11/06/initial-release-of-s3ebass-marmalade-extension-for-bass-audio-engine/</guid>
      <description>

&lt;p&gt;The audio and music are playing a very important role in games, for our future games, I want them to have good quality of audio and music, e.g. don&amp;rsquo;t use short loop of mp3 music, but something much longer and more dynamic without taking much space. My first thought is to use MIDI+soundfonts or some mod-based music, so I spent some time to try to see the possibility.&lt;/p&gt;

&lt;p&gt;There are quite some libraries to support xm playback, though I can&amp;rsquo;t find any Marmalade extensions on the web, in the forum someone mentioned that they made use of FMOD in their game, though there is no code shared, and FMOD is quite expansive.&lt;/p&gt;

&lt;p&gt;After some search, I decided to use &lt;a href=&#34;http://www.un4seen.com/bass.html&#34;&gt;BASS audio engine&lt;/a&gt;, which is quite powerful, with well designed API, not bad documentation and sample, and a reasonable price for small projects (the shareware license can cover product with small price).&lt;/p&gt;

&lt;p&gt;Now I&amp;rsquo;ve got a working extension(though the only test I did was to play a xm file on OSX, iOS and Android), think other people maybe interesting in the extension or how to create similar extensions, so I&amp;rsquo;m going to share the extension and some experiences I&amp;rsquo;ve learn from the process(not in this post).&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;quick-note-about-implementation&#34;&gt;Quick Note about Implementation&lt;/h2&gt;

&lt;p&gt;BASS itself support many platform, the platforms I need are: OSX, iOS, Android. It&amp;rsquo;s pure C, so it shouldn&amp;rsquo;t be too hard to make it work with Marmalade. Though it took me quite a while to get some basic idea about the Marmalade extension system.&lt;/p&gt;

&lt;p&gt;Most documentation from Marmalade about extensions seems focusing on writing platform specific codes in custom extension, in this case, it&amp;rsquo;s actually much more easier since BASS is already platform independent, all we need is to make it work with Marmalade&amp;rsquo;s build system.&lt;/p&gt;

&lt;p&gt;Will write more about how to wrap C libraries into Marmalade extension in other posts later.&lt;/p&gt;

&lt;h2 id=&#34;code-of-the-extension&#34;&gt;Code of the Extension&lt;/h2&gt;

&lt;p&gt;Since basically I have no idea about how to use BASS now, I just tried to use some codes from the BASS examples, it works pretty good, the xm files sounds quite good.&lt;/p&gt;

&lt;p&gt;Think I will write some wrapper layer around the C function calls to expose audio functionalities to C++, XML and Lua codes. Guess I will have much better idea about it in a couple of months after our first game get done.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve put the codes at &lt;a href=&#34;https://github.com/yjpark/s3eBass&#34;&gt;Github&lt;/a&gt;, feel free to clone it, and give it a try. see the github pages for more details about it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convert Cocos2D Font (BMFont) to Marmalade&#39;s GxFont</title>
      <link>http://blog.yjpark.org/blog/2012/11/05/convert-cocos2d-font-bmfont-to-marmalades-gxfont/</link>
      <pubDate>Mon, 05 Nov 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/11/05/convert-cocos2d-font-bmfont-to-marmalades-gxfont/</guid>
      <description>

&lt;p&gt;In 2D games, it&amp;rsquo;s typical to use image based font for UI elements, which can provide better graphic result, fast rendering, and usually smaller then true type fonts (especially if you want to support languages with big character set, e.g. Chinese).&lt;/p&gt;

&lt;p&gt;There are quite some tools to generate such font images, I&amp;rsquo;m using &lt;a href=&#34;http://www.bmglyph.com/&#34;&gt;bmGlyph&lt;/a&gt; as the font generator, it can publish the popular &amp;ldquo;Cocos2d / BMFont&amp;rdquo; format, though it&amp;rsquo;s not directly usable in Marmalade.&lt;/p&gt;

&lt;p&gt;Marmalade is using its own font format, and provide a font generator in the SDK, though it only support plain color, and when I feed it with some Chinese characators, they are not included in the generated files. I&amp;rsquo;m using the OS X version of the font builder, not sure about how the Windows version works.&lt;/p&gt;

&lt;p&gt;My first thought was to add function to use the BMFont generated, though it&amp;rsquo;s not an easy task, also I want to use IwGame&amp;rsquo;s label components, which are based on Marmalade&amp;rsquo;s GxFont and Truetype support.&lt;/p&gt;

&lt;p&gt;After reading &lt;a href=&#34;http://docs.madewithmarmalade.com/native/api_reference/iwgxfontapidocumentation/iwgxfontapioverview/iwgxfontfiles.html&#34;&gt;GxFont Reference&lt;/a&gt;, turns out it&amp;rsquo;s using a fairly simple format, so I decided to write a converter to create gxfont files.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;code-of-the-converter&#34;&gt;Code of the Converter&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve put the codes at &lt;a href=&#34;https://github.com/yjpark/marmalade-tools&#34;&gt;Github&lt;/a&gt;, feel free to clone it, and try to run it. see the github pages for more details about it.&lt;/p&gt;

&lt;p&gt;The converter support UTF-8 characters with no problem, the size of the tga files is a bit big comparing to the Cocos2d version, since more empty spaces are needed for GxFont format.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s kind of a straight-forward implementation, and probably there are ways to make it better, especially if the bmGlyph&amp;rsquo;s console support is out (in the coming feature list now), the whole process of extracting characters from data file, create Cocos2d font, convert to GxFont can be fully automatied.&lt;/p&gt;

&lt;p&gt;Just read the code if you&amp;rsquo;re interested in the implementation details. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Level Editor Based on IwGame - Introduction</title>
      <link>http://blog.yjpark.org/blog/2012/10/12/level-editor-based-on-iwgame-introduction/</link>
      <pubDate>Fri, 12 Oct 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/10/12/level-editor-based-on-iwgame-introduction/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s been more than a month since my post about the idea of &lt;a href=&#34;http://blog.yjpark.org/blog/2012/08/30/game-engine-based-on-marmalade-and-iwgame/&#34;&gt;game engine based on Marmalade and IwGame&lt;/a&gt;, after the post, spent many hours busy coding, now I&amp;rsquo;ve got the basic level editor up running, I think it&amp;rsquo;s pretty cool, so here are some details about it.&lt;/p&gt;

&lt;p&gt;Here is a screenshot of the level editor:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://blog.yjpark.org/img/pfgame/leveleditor-screenshot-1.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Level Editor Screen Shot 1&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;!-- more --&gt;

&lt;h2 id=&#34;updates-about-original-post&#34;&gt;Updates about Original Post&lt;/h2&gt;

&lt;p&gt;Before talking about the level editor, first I want to share some updates about Marmalade and IwGame in the last month.&lt;/p&gt;

&lt;p&gt;First, Marmalade 6.1 was released, it&amp;rsquo;s great for me, the 2 most useful feature for me are: Open GL ES 2.0 shader support in simulator, easy to debug shader now, and OSX deployment to send game/editor as running application to Graphic Artists.&lt;/p&gt;

&lt;p&gt;Second, DrMop commented in the original post, assure that IwGame is very actively developed and &lt;a href=&#34;http://www.drmop.com/index.php/2012/10/08/iwgame-0-4-coming-very-soon-iwgame-is-going-portable/&#34;&gt;version 0.40 is about to be released&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Quick test with Chinese characters in CIwGameActorText, it works out of box, just specify a truetype font, write the text in UTF-8, then it&amp;rsquo;s done. I guess there is no need for CIwGameString to support unicode, since it can pass the bytes to Marmalade correctly.&lt;/p&gt;

&lt;h2 id=&#34;current-features&#34;&gt;Current Features&lt;/h2&gt;

&lt;p&gt;Now back to the level editor, it support image objects with layer(display order), depth(for parallel perspective), users can add/remove/copy/group objects, and can change position/size/scale/angle/origin with mouse, zoom in/out and move the camera around. Also I&amp;rsquo;ve integrated a Box2D debug view, and you can edit simple shape in it too (boxes and circles).&lt;/p&gt;

&lt;p&gt;Actually it&amp;rsquo;s a bit easier than I thought to implement it, caused me about 5 weeks so far, worked quite hared during the time, but also had a basic animation editor and a game prototype at the same time, so the pure time on it was about 3 weeks.&lt;/p&gt;

&lt;p&gt;Our graphic artists have already used the editor to build a few nice scenes and they are getting more productively with it day by day, It&amp;rsquo;s just what I wished it to be: a tool to make developer and other roles to collaborative more effectively, think it&amp;rsquo;s at the right direction.&lt;/p&gt;

&lt;p&gt;Also it&amp;rsquo;s extremely useful for prototyping and debugging, the way I did it is to add a few tools around the objects, so when you&amp;rsquo;re running your game, you can switch to editor mode at any time (by tapping the tab key), then you can check the scene to see what&amp;rsquo;s going on, or adjust the objects right in the editor, then you can switch back to game mode. It feels like you can freeze time in game at any time, then make changes, then go back, very cool, and very useful.&lt;/p&gt;

&lt;p&gt;To make it clear, here is a screenshot of our game prototype:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://blog.yjpark.org/img/pfgame/leveleditor-screenshot-2.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Level Editor Screen Shot 2&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;After I switch to editor mode, and zoom out a bit, I can get the screen as the first screenshot, then I can adjust the level, and switch back to keep playing. Our graphic artist feels very happy with this in game editing ability, they can see their changes instantly, which make the whole process very efficiently.&lt;/p&gt;

&lt;p&gt;Another very useful feature is the Box2D shape editor and debug view, we can create boxes and circles right through the level editor, they will be effective instantly, so for a game based on Box2D, it&amp;rsquo;s very easy to create the levels by non-programmers.&lt;/p&gt;

&lt;p&gt;Here is the same game prototype with Box2D debug view enabled:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://blog.yjpark.org/img/pfgame/leveleditor-screenshot-3.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Level Editor Screen Shot 3&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;As you can see, we use boxes and circles to create a rather complicate level. Also it&amp;rsquo;s very helpful to debug the collisions between objects, e.g. when I was implementing the effect of arrows hitting targets.&lt;/p&gt;

&lt;h2 id=&#34;what-s-missing&#34;&gt;What&amp;rsquo;s Missing&lt;/h2&gt;

&lt;p&gt;As a basic level editor with advanced features (particle, animations&amp;hellip;), I think it&amp;rsquo;s quite complete and usable, we&amp;rsquo;ve got quite some prototype scenes with it till now, and the artists feel happy with it most of the time.&lt;/p&gt;

&lt;p&gt;The biggest missed feature is undo/redo, only deleting have a quick undo since it can cause big trouble when touch wrong key accidentally. To make it better, all version of saved files are kept on disk, so if you made big mistakes, then it&amp;rsquo;s recoverable by hand. It&amp;rsquo;s non trivial to implement a good undo/redo system, so probably this feature will only be added in a much later stage.&lt;/p&gt;

&lt;p&gt;Also there is on gui at all, all functions are done by keyboard shortcut and mouse movement, so there is a learning curve, and you&amp;rsquo;ll feel a bit awkward at first. Though this is the quickest way for implementation and also for actually using IMO, after a few days using it, both of our graphic artists can use it with no big problem, and they said that it&amp;rsquo;s a bit geeky feeling when using it. :)&lt;/p&gt;

&lt;p&gt;And manual works required to create a skeleton scene and import images to it, it&amp;rsquo;s not hard, just running some python scripts, but it&amp;rsquo;s still not so simple for non-programmers.&lt;/p&gt;

&lt;h2 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s Next&lt;/h2&gt;

&lt;p&gt;Guess I&amp;rsquo;ll keep improving it, fixing bugs first, now the focus is character animation editor, and the game prototype. After that, I&amp;rsquo;ll add particle feature to the level editor.&lt;/p&gt;

&lt;p&gt;I feel quite happy doing this kind of tool works, and actually it&amp;rsquo;s not hard to make it usable as a standalone project and let other people to use it. e.g. I can make a converter to generate cocos builder format, then it can be used in cocos2d projects. Or if I make my animation editor to export spriter&amp;rsquo;s xml syntax, it can be used in many other projects too.&lt;/p&gt;

&lt;p&gt;And at least for myself and our graphic artists, we think that our homebrew tools are much easier to use and feature complete (for just our needs) comparing to the tools we&amp;rsquo;ve tried. e.g. cocos builder, sprite helper, and spriter. Not saying that my editors are better products, just they are tailored by exactly our need and my design approach, and since it&amp;rsquo;s integrated in the exact game process, the workflow is much better comparing to a 3rd party tools. Also our level is pretty big(currently the demo scene is about 20000 pixel wide, and the engine/editor can support much bigger usage), I can&amp;rsquo;t find a proper tool to handle such big scene.&lt;/p&gt;

&lt;p&gt;Though making a generic tool will involve many not so interesting works, and it&amp;rsquo;s very hard to make it works for more people, and probably my tools are just too tailored to our need, so I think I will keep focusing on our games in the near future.&lt;/p&gt;

&lt;p&gt;But anyway, I already have some demo scene editor running as OS X application, will make it downloadable in next few days, after I wrote a very basic manual about it. like Jakub commented in the original post, even if I decided to keep it private, it can still help others a bit, and maybe by using it in a experimental way, people can get some ideas about improving their own tools.&lt;/p&gt;

&lt;p&gt;If you are interested to see more information about the editor, please leave comments, thanks.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll try to post more about technical details about some aspects of the editors, some hacks I used, and some mistakes I&amp;rsquo;ve overcomed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenGL ES 2.0 Shader in Marmalade</title>
      <link>http://blog.yjpark.org/blog/2012/10/02/opengl-es-2-dot-0-shader-in-marmalade/</link>
      <pubDate>Tue, 02 Oct 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/10/02/opengl-es-2-dot-0-shader-in-marmalade/</guid>
      <description>

&lt;p&gt;Marmalade provide good support for writing custom shaders in it, though it&amp;rsquo;s not easy to get all the information to start writing the first shader in my case, here is some information that I gathered during the process.&lt;/p&gt;

&lt;p&gt;I decided to only support Open GL 2.0 Shaders in our games, most current devices support it, and as a small team, supporting older devices is a bit hard since we don&amp;rsquo;t have testers for now, also the architect of 2.0 is simpler and cleaner.&lt;/p&gt;

&lt;p&gt;The sample shader&amp;rsquo;s function is to replace non-transparent part of the image to a given color, then the color can be changed programmingly (also by xml thanks to IwGame). Basically the images will be just working as masks, the actually color to be rendered are controlled by the shader.&lt;/p&gt;

&lt;p&gt;I will not cover the basics about Open GL Shaders, there are plenty of information on the web about that, also a PDF doc is included in Marmalade installation, it&amp;rsquo;s a good start point to me, you should read it first to get the concepts.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;marmalade-rendering-with-custom-shader&#34;&gt;Marmalade Rendering with Custom Shader&lt;/h2&gt;

&lt;p&gt;Marmalade support shader very well by the &lt;a href=&#34;http://docs.madewithmarmalade.com/native/api_reference/api/classCIwGxShaderTechnique.html&#34;&gt;CIwGxShaderTechnique&lt;/a&gt; class, to use it, you need to set it to material, here is the snnipet for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;    CIwMaterial* mat = IW_GX_ALLOC_MATERIAL();
    mat-&amp;gt;SetTexture(image-&amp;gt;getImage2D()-&amp;gt;GetMaterial()-&amp;gt;GetTexture());
    mat-&amp;gt;SetShaderTechnique(shader);
    IwGxSetMaterial(mat);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The shader here is a pointer to CIwGxShaderTechnique, and the image is a pointer to CIwGameImage (part of IwGame), if you are not using IwGame, you can use Iw2d, or IwGx directly.&lt;/p&gt;

&lt;p&gt;The following function can load a shader from a resource group.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;CIwGxShaderTechnique* getShader(const char* shaderName) {
    CIwGxShaderTechnique* shaderTemplate = (CIwGxShaderTechnique*)IwGetResManager()-&amp;gt;GetResNamed(shaderName, &amp;quot;CIwGxShaderTechnique&amp;quot;);
    
    if (shaderTemplate == NULL) {
        return false;
    }
    
    shader = new CIwGxShaderTechnique();
    IwSerialiseOpen(&amp;quot;shader-Duplicate.bin&amp;quot;, false);
    shaderTemplate-&amp;gt;Serialise();
    IwSerialiseClose();

    IwSerialiseOpen(&amp;quot;shader-Duplicate.bin&amp;quot;, true);
    shader-&amp;gt;Serialise();
    IwSerialiseClose();
    return shader;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: since I need multiple instance of the shader for diffrent images with differnt colors, here I use a quick solution with marmalade&amp;rsquo;s serialization, which is NOT thread safe due to the hard code file name.&lt;/p&gt;

&lt;p&gt;Load the resource group as this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;    IwGetResManager()-&amp;gt;LoadGroup(&amp;quot;effect/Shaders.group&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;files-used&#34;&gt;Files Used&lt;/h2&gt;

&lt;p&gt;You need to include the shader files in the asset section of the mkb/mkf file, like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;files
{
    [Data]
    (data)
    effect/Shaders.group
}

assets
{
    (data-ram/data-gles1)
    effect/Shaders.group.bin
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please refer to Marmalade&amp;rsquo;s documents if you are not familiar with the resource compiling process and mkb syntaxes.&lt;/p&gt;

&lt;p&gt;Here is data/effect/Shaders.group&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CIwResGroup
{
    name &amp;quot;PettyFun Environment Shaders&amp;quot;
    shared true

    &amp;quot;./PfMaskEffectShader.itx&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The content of data/effect/PfMaskEffectShader.itx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CIwGxShaderTechnique
{
    name &amp;quot;PfMaskEffectShader&amp;quot;

    param &amp;quot;p_Color&amp;quot; vec4 1 {0.0, 0.0, 1.0, 1.0}
    
    shader &amp;quot;vertex&amp;quot;
    {
        attribute highp vec4 inVert;
        attribute mediump vec2 inUV0;
        
        uniform highp mat4 inPMVMat;
        uniform mediump vec2 inUVOffset;
        uniform mediump vec2 inUVScale;
    
        varying mediump vec2 v_UV0;

        void main(void)
        {
            gl_Position = inPMVMat * inVert;
            
            v_UV0 = inUV0 * inUVScale + inUVOffset;
        }
    }
    shader &amp;quot;fragment&amp;quot;
    {
        uniform sampler2D inSampler0;
        varying mediump vec2 v_UV0;
        uniform mediump vec4 p_Color;

        void main(void)
        {
            mediump vec4 c = texture2D(inSampler0, v_UV0);
            if (c.a &amp;lt; 0.1) {
                gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
            } else {
                gl_FragColor = p_Color;
            }
        }
    } 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please read &lt;a href=&#34;http://docs.madewithmarmalade.com/native/api_reference/api/group__IwGxShaderTechnique.html&#34;&gt;IwGxShaderTechnique Reference&lt;/a&gt; for the list of the attributes that you can use. It took me quite a while to find this document since this is no links to this page on the class reference page. This is VERY useful for writing shaders in Marmalade.&lt;/p&gt;

&lt;h2 id=&#34;update-params-by-code-and-xml&#34;&gt;Update Params By Code and XML&lt;/h2&gt;

&lt;p&gt;the &lt;strong&gt;param&lt;/strong&gt; in the shader is for the parameters from your code, change it&amp;rsquo;s value like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void PfShaderEffect::SetShaderParam(const char *paramName, CIwGxShaderUniform::CIwGxShaderUniformType type, const void* value) {
    if (Shader == NULL) return;
    
    CIwGxShaderUniform* param = Shader-&amp;gt;GetParam(paramName);
    if( param ) {
        param-&amp;gt;Set(type, 0, value);
    } else {
        PfTrace(&amp;quot;Shader Param Not Exist: %s&amp;quot;, paramName);
    }
}

void PfShaderEffect::SetShaderParamAsInt(const char *paramName, int value) {
    SetShaderParam(paramName, CIwGxShaderUniform::INT, &amp;amp;value);
}


void PfShaderEffect::SetShaderParamAsFloat(const char *paramName, float value) {
    SetShaderParam(paramName, CIwGxShaderUniform::FLOAT, &amp;amp;value);
}

void PfShaderEffect::SetShaderParamAsColor(const char *paramName, CIwColour value) {
    float color[4];
    color[0] = 1.0f * value.r / 0xff;
    color[1] = 1.0f * value.g / 0xff;
    color[2] = 1.0f * value.b / 0xff;
    color[3] = 1.0f * value.a / 0xff;
    SetShaderParam(paramName, CIwGxShaderUniform::VEC4, color);
}

void PfShaderEffect::UpdateColorFromAnimation(CIwColour* color, CIwGameAnimInstance *animation) {
    CIwGameAnimFrameVec4* value = (CIwGameAnimFrameVec4*)animation-&amp;gt;getCurrentData();
    color-&amp;gt;r = value-&amp;gt;data.x;
    color-&amp;gt;g = value-&amp;gt;data.y;
    color-&amp;gt;b = value-&amp;gt;data.z;
    color-&amp;gt;a = value-&amp;gt;data.w;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since I&amp;rsquo;m using IwGame, it&amp;rsquo;s very easy to make the color controlled by the XOML animation, all I need to do is to override the UpdateFromAnimation method of CIwGameActor, and handle the color value from it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool PfMaskEffect::UpdateFromAnimation(CIwGameAnimInstance *animation) {
    if (PfShaderEffect::UpdateFromAnimation(animation))
        return true;
    
    bool delta = animation-&amp;gt;isDelta();
    
    unsigned int element_name = animation-&amp;gt;getTargetPropertyHash();
    
    if (element_name == PfHash(&amp;quot;Color&amp;quot;)) {
        UpdateColorFromAnimation(&amp;amp;Color, animation);
        SetShaderParamAsColor(&amp;quot;p_Color&amp;quot;, Color);
    } else {
        return false;
    }
        return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can generate smooth color switch animation by pure XML as normal IwGame Animation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;Template Name=&amp;quot;MaskColorTimelineTemplate&amp;quot;&amp;gt;
        &amp;lt;Animation Name=&amp;quot;MaskColorAnim$name$&amp;quot; Duration=&amp;quot;$duration$&amp;quot; Type=&amp;quot;vec4&amp;quot;&amp;gt;
            &amp;lt;Frame Value=&amp;quot;$startcolor$&amp;quot; Time=&amp;quot;0&amp;quot; /&amp;gt;
            &amp;lt;Frame Value=&amp;quot;$endcolor$&amp;quot; Time=&amp;quot;$duration$&amp;quot; /&amp;gt;
        &amp;lt;/Animation&amp;gt;
        &amp;lt;Timeline Name=&amp;quot;MaskColorTimeline$name$&amp;quot; AutoPlay=&amp;quot;true&amp;quot;&amp;gt;
            &amp;lt;Animation Anim=&amp;quot;MaskColorAnim$name$&amp;quot; Target=&amp;quot;Color&amp;quot; Repeat=&amp;quot;1&amp;quot; StartAtTime=&amp;quot;0&amp;quot;/&amp;gt;
        &amp;lt;/Timeline&amp;gt;
    &amp;lt;/Template&amp;gt;

    &amp;lt;Actor ...&amp;gt;
        &amp;lt;FromTemplate Template=&amp;quot;MaskColorTimelineTemplate&amp;quot; name=&amp;quot;ColorChange&amp;quot; duration=&amp;quot;2&amp;quot;
            startcolor=&amp;quot;180, 220, 251, 255&amp;quot; endcolor=&amp;quot;255, 0, 0, 255&amp;quot; /&amp;gt;
    &amp;lt;/Actor&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is very flexible and powerful, no need to recompile, just updating plain XML files.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Game Engine Based on Marmalade and IwGame</title>
      <link>http://blog.yjpark.org/blog/2012/08/30/game-engine-based-on-marmalade-and-iwgame/</link>
      <pubDate>Thu, 30 Aug 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/08/30/game-engine-based-on-marmalade-and-iwgame/</guid>
      <description>

&lt;p&gt;Since August 2012, 2 developers(including me) and 2 graphic designers come together and started a small game studio to work on some mobile casual games, as the tech lead, I need to choose a development way for our first batch of games.&lt;/p&gt;

&lt;p&gt;Our games will be mostly 2D games, might with some 3D charactors, though the scenes or levels will be 2D, I think that&amp;rsquo;s better for the team and the graphic quality of the games.&lt;/p&gt;

&lt;p&gt;After quite some readings and experiments, I finally have a clear idea about how we gonna build these games, We will create our small game engine, on top of Marmalade and IwGame.&lt;/p&gt;

&lt;h2 id=&#34;why-choose-marmalade&#34;&gt;Why choose Marmalade?&lt;/h2&gt;

&lt;p&gt;I did have quite some experience on cocos2d, though it&amp;rsquo;s been ruled out pretty quickly. I want our game to work on multiple platforms, since we don&amp;rsquo;t use much platform-specific features, we don&amp;rsquo;t get much with objective-c. Also personally I am not really a big fan of cocos2d, it&amp;rsquo;s kind of a simple framework with good quality, though missing some of the features I want with a solid framework, e.g. Tool or Markup for graphic scene editor, I&amp;rsquo;ve tried Cocos Builder and Level Helper very breifly, might be just me, but I don&amp;rsquo;t like neither one. A similar option is to go with cocos2d-x, which is cross platform, but because of similar reason, I didn&amp;rsquo;t dig into it deeply.&lt;/p&gt;

&lt;p&gt;The second option is Unity3d, I&amp;rsquo;ve used it for about 3 months before, It&amp;rsquo;s pretty good, easy to use, and have a hugh community with tons of good plugins. My biggest concern about it is the binary format of the prefebs, it&amp;rsquo;s a bit like the xib file in App development, hard to change and track, as a developer, I want a text based format. Also don&amp;rsquo;t really think the .Net virtual machine is the best way for our rather small games. My feeling is that it&amp;rsquo;s more like a tool for game designers and graphic designers, as developers, we gave up full control in exchange with a full-feature game development environment. And also it&amp;rsquo;s mostly 3D centric, 2D works are possible, but a bit awkard, since we don&amp;rsquo;t need the 3D power and I want more control with my codes, I did not take this path either.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;For good performance and graphic effects, I didn&amp;rsquo;t investigate the fast development tools, most of them are HTML based or LUA based, more like quick prototype tools for me.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve played with Airplay for a couple of days 2 years ago, technically it was very good, though with a rather steep learning curve, and lack of tutorials and blog post, so I didn&amp;rsquo;t really learn it as a hobby. Now it&amp;rsquo;s renamed to Marmalade, been updated pretty often, and having a much bigger user base and many successful games are based on it, like Draw Something or Cut The Rope. Since I will use the chosen platform for at least 1 or 2 years, I spend a week to really try to learn it this time.&lt;/p&gt;

&lt;p&gt;The first impression was kind of negative, the OSX support seems to be much weaker than the windows one, a bunch of small problems were met, which almost make me give it up. Now I&amp;rsquo;ve been using it for about 1 month, still got some problem, though I think I start to feel comfortable with it.&lt;/p&gt;

&lt;p&gt;There are still very few technical information about marmalade other than the official documents and forum, the only helpful tutorial I can find is the &lt;a href=&#34;http://www.drmop.com/index.php/marmalade-sdk-tutorials/&#34;&gt;DrMop tutorials&lt;/a&gt;. It&amp;rsquo;s very helpful to provide basic ideas for new Marmalade users.&lt;/p&gt;

&lt;p&gt;The API documents of Marmalade is actually quite good after you get the basic ideas about it. Also the examples included are good learning source.&lt;/p&gt;

&lt;p&gt;My current feeling about Marmalade is quite positive, it has nice features and solid quality, provide full control, has native bridge for potential platform-specific development.&lt;/p&gt;

&lt;p&gt;The things I wish to be better:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1st class OSX support, add the missing features of the simulator, fix the broken &amp;ldquo;mkb &amp;ndash;iphone&amp;rdquo; device building (only trid on 10.8 + Xcode 4.4, not sure about other environments). (Update: &amp;ndash;iphone is fixed in 6.1, simulator seems not updated)&lt;/li&gt;
&lt;li&gt;Release to osx ability, then I can create desktop tools such as customized level editor instead of let my graphic designers to use the simulator to run them. (Update: Added in 6.1)&lt;/li&gt;
&lt;li&gt;Float data types in IwGx, it&amp;rsquo;s said to be included in 6.1 release which should be out soon, much simpler and less error-prone, we&amp;rsquo;ll target on OpenGL ES 2.0 devices only (iOS devices first) to make our life easier since we can&amp;rsquo;t afford dedicated tester anyway. (Update: Float added in 6.1 and works great, though we probably will not change IwGame to use float)&lt;/li&gt;
&lt;li&gt;High level document besides API reference, and generally more documentations.&lt;/li&gt;
&lt;li&gt;Better community and 3rd party components, it&amp;rsquo;s quite unpopular in stackoverflow, very few blogs, and the github community projects are not very active and organized.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-is-iwgame-and-why-it-is-helpful&#34;&gt;What is IwGame, and Why it is Helpful&lt;/h2&gt;

&lt;p&gt;Marmalade is very low level, its design priciple is that people can make their engine working on it rather easily, but we don&amp;rsquo;t have any game engine yet, so either I need to write a 2D engine from scratch, or choose a C/C++ engine to work with. Cocos2d-X works on Marmalade, though I want something more powerful. Many 3D engine works on it too, but they are too complex to me, I probably will choose Unity3D if I want a 3D engine.&lt;/p&gt;

&lt;p&gt;According to the website, &lt;a href=&#34;http://www.drmop.com/index.php/iwgame-engine/&#34;&gt;IwGame&lt;/a&gt; is a &amp;ldquo;Free Open Source Cross Platform Mobile Game Engine for Smart Phones and Tablets&amp;rdquo;, it&amp;rsquo;s a quite ambitious project, already has a long feature list with many future features, though still in an rather early stage.&lt;/p&gt;

&lt;p&gt;The main reasons I chose it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open source, I can tweak the codes to suit my needs better, and even if its development stopped, we can still improve it by ourselves.&lt;/li&gt;
&lt;li&gt;XML file format, it&amp;rsquo;s very powerful, e.g. make simple animations easily without coding. Also it&amp;rsquo;s very easy to extend the system to add our own extensions. This is a hugh advantage to me.&lt;/li&gt;
&lt;li&gt;Complete 2D framework, including sprite, scene, particle, physics, UI&amp;hellip; No need to reimplement the basic things from the scratch, we can focus on more interesting stuffs.&lt;/li&gt;
&lt;li&gt;Support 2D and 3D rendering, since the rendering codes are based on IwGx now, even for 2D games, some part of 3D elements can be very useful, so I think this flexibility is very good.&lt;/li&gt;
&lt;li&gt;Good document and a full game source included, there are quite some typos in the included PDF document, though it provide most information I need to get started, plus reading the source code, It&amp;rsquo;s kind of easy to learn (though still much harder comparing to cocos2d family).&lt;/li&gt;
&lt;li&gt;Good code quality, easy to read and not hard to expand.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some worries about base our codes on it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s a big project, and seems most code and docs are written by DrMop in several monthes. He did very great so far, though he has too many works ahead him, I am not sure where this project will be after 1 year, what if it&amp;rsquo;s dead? also it&amp;rsquo;s been a while since the last update.&lt;/li&gt;
&lt;li&gt;On the other hand, if it&amp;rsquo;s been developed rapidly, since it&amp;rsquo;s not finished yet, we will need to expand it by ourself, it can be a problem to keep update with the future updates. I don&amp;rsquo;t want to make a fork since many good features are on the list, though we can&amp;rsquo;t wait for they to appear, We will be careful with out changes to make them easy to merge, but what if the owner decide to change the API interface drasticly?&lt;/li&gt;
&lt;li&gt;The core string class (CIwGameString) is not unicode compatible, and the author didn&amp;rsquo;t have plan to support it soon. This can be a big problem for us to support multiple language, especially the asian languages. I want to find a clean solution for this, though haven&amp;rsquo;t started working on it yet.&lt;/li&gt;
&lt;li&gt;There is no unit tests yet, so it might introduce its own bugs, especially if it&amp;rsquo;s been update quickly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;my-plan-on-the-game-engine&#34;&gt;My Plan on The Game Engine&lt;/h2&gt;

&lt;p&gt;Now I feel OK working with Marmalade and IwGame, the next steps will be creating the features/tools we need for our games, i.e. create a game engine for our requirements.&lt;/p&gt;

&lt;p&gt;Here is the current list of works to be done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic level editing, to arrange 2D sprites on screen, supporting basic operations such as moving, scaling, rotating, etc. Our level/scene will be 2D non-tile with multiple layers, something similar to &lt;a href=&#34;http://javilop.com/gamedev/c-game-programming-tutorial-non-tile-based-arbitrary-positioned-entity-engine-editor-like-in-braid-or-aquaria-games/&#34;&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Complex charactor editing, 2D or 3D charactors with body parts, movement and animations.&lt;/li&gt;
&lt;li&gt;Advanced level editing, particles, visual effects, events, etc.&lt;/li&gt;
&lt;li&gt;UI editing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these editors will base on the XOML markup system of IwGame.&lt;/p&gt;

&lt;p&gt;These are still quite some works, might be over engineering for our first game, though as a developer, I don&amp;rsquo;t want to just do things in the quick and dirty way, I want to do it in a proper way. And I think a proper engine can make future games easier to develop, so in the long run, it will worth the efforts.&lt;/p&gt;

&lt;p&gt;Think I will start to write more about Marmalade and IwGame in the future, both help myself to understand them better, and hopefully might help some other developers too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PlantUML Plugin for Octopress</title>
      <link>http://blog.yjpark.org/blog/2012/04/30/plantuml-plugin-for-octopress/</link>
      <pubDate>Mon, 30 Apr 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/04/30/plantuml-plugin-for-octopress/</guid>
      <description>

&lt;h2 id=&#34;what-is-plantuml&#34;&gt;What is PlantUML?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.sourceforge.net/&#34;&gt;PlantUML&lt;/a&gt; is a component that allows to quickly write:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sequence diagram,&lt;/li&gt;
&lt;li&gt;use case diagram,&lt;/li&gt;
&lt;li&gt;class diagram,&lt;/li&gt;
&lt;li&gt;activity diagram,&lt;/li&gt;
&lt;li&gt;component diagram,&lt;/li&gt;
&lt;li&gt;state diagram&lt;/li&gt;
&lt;li&gt;object diagram&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I really like the idea of writing UML diagram with plain text. Since it&amp;rsquo;s totally plaintext, it&amp;rsquo;s very easy to do diff and version track, also you don&amp;rsquo;t need to do anything about the layout (the text itself looks pretty good too).&lt;/p&gt;

&lt;p&gt;Also the syntax of it is very well designed, and the generated diagrams looks really nice, so I use PlantUML for technical documentation with trac and sphinx.&lt;/p&gt;

&lt;h2 id=&#34;the-plugin&#34;&gt;The Plugin&lt;/h2&gt;

&lt;p&gt;After switching &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; to my blog platform, I was looking for a way to integrate PlantUML within it, though I can&amp;rsquo;t find one, so I wrote this very simple jekyll plugin (Octopress is based on &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yjpark/jekyll-plantuml&#34;&gt;jekyll-plantuml&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;You need to download the plantuml.jar file from &lt;a href=&#34;http://plantuml.sourceforge.net/download.html&#34;&gt;http://plantuml.sourceforge.net/download.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In your _config.xml, setup plantuml_jar to the downloaded jar file, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plantuml_jar: ../_lib/plantuml.jar
plantuml_background_color: &amp;quot;#f8f8f8&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The plantuml_background_color is optional, which will change the background of the generated diagram.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Just wrap the diagram text in &amp;ldquo;plantuml&amp;rdquo; block, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% plantuml %}
Alice -&amp;gt; Bob: Authentication Request
Bob --&amp;gt; Alice: Authentication Response

Alice -&amp;gt; Bob: Another authentication Request
Alice &amp;lt;-- Bob: another authentication Response
{% endplantuml %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;an-example&#34;&gt;An Example&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://blog.yjpark.org/img/plantuml/plantuml-example.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;!--
{% plantuml %}
   actor Tester as QA
   participant &#34;Issue Tracking\nSystem&#34; as CQ
   actor Developer as RD
   participant &#34;Configuration&#34; as P4C
   participant &#34;Component\nTopic Branch&#34; as P4CTB
   participant &#34;Customer\nRelease Branch&#34; as P4CRB
   actor &#34;Release Engineer&#34; as BM

   QA   -&gt;      CQ:     Critical bug\n reported
   group Fix
      RD   &lt;--     CQ:     Assigned
      RD   -&gt;      P4C:    Create bugfix\n configuration
      RD   -&gt;      P4CTB:  Create topic branch (by tools)
      RD   -&gt;      P4CTB:  Working on the bugfix
      RD   -&gt;      CQ:     Resolve
   end group
   group Virification
      QA   &lt;--     CQ:     Verify
      QA   &lt;-      P4C:    Get target to verify
      QA   -&gt;      CQ:     Confirm
   end group
   group Release
      BM   &lt;--     CQ:     Release request received
      loop Multiple customers
         BM   -&gt;      P4CRB:  Update customer\n branches
         P4CTB -&gt;     P4CRB:  Auto integrate\n (by tools)
      end loop
   end group
{% endplantuml %}
--&gt;
</description>
    </item>
    
    <item>
      <title>Movable Write Open Sourced</title>
      <link>http://blog.yjpark.org/blog/2012/04/22/movable-write-open-sourced/</link>
      <pubDate>Sun, 22 Apr 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/04/22/movable-write-open-sourced/</guid>
      <description>

&lt;h2 id=&#34;what-is-movable-write&#34;&gt;What is Movable Write&lt;/h2&gt;

&lt;p&gt;Back in 2010, I already had some experiences on iOS development. Did wrote some very simple application to fetch information over HTTP-RPC to a trac instance, and wrote a very simple game with Cocos2D and Box2D. Did spend some time to catch up with the versions or iOS updates and read about the new APIs.&lt;/p&gt;

&lt;p&gt;But my feeling was that by only spend small amount of time like it, I can never learn enough to have real experience on it, and I&amp;rsquo;ve been working on Web development for a few years. So I decided to work part-time in the company, and use the other half time to develop a real application, by real I mean with proper quality and released at app-store.&lt;/p&gt;

&lt;p&gt;I just got a iPad1 as development device, and tried a few apps, I liked note plus a lot, it&amp;rsquo;s very powerful, but a bit too powerful for my need, I want to write words most of the time, and I want to write largely, but view the written lines small.&lt;/p&gt;

&lt;p&gt;So I decided to write a note taking app for myself, after 3 months, Movable Write was released at app store.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://itunes.apple.com/us/app/movable-write/id416413981?mt=8&#34;&gt;App store link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wolfewithane.com/blog/2011/6/22/review-hand-notes-over-to-movable-write.html&#34;&gt;A nice introduction from wolfewithane.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://iapp.com.tw/ex/topic_inside.php?id=2447&#34;&gt;Another nice introduction from iapp.com.tw (in Chinese)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;what-is-missed&#34;&gt;What is missed&lt;/h2&gt;

&lt;p&gt;I did implement support for USB transfer for backup/restore, though didn&amp;rsquo;t write document about this feature, the plan was to implement synchronization for it, Dropbox and/or iCloud, though didn&amp;rsquo;t get time for it.&lt;/p&gt;

&lt;p&gt;Another interesting possibility is Evernote integration, the code should be very easy to be runnable on OSX, also can be added as image or pdf.&lt;/p&gt;

&lt;p&gt;A bigger change is adding bigger element into page, e.g. a photo then wrap the lines around it. I&amp;rsquo;ve done some experiments about bigger writing area, it&amp;rsquo;s not easy to put it into the current structure though.&lt;/p&gt;

&lt;p&gt;Another bigger one is OCR for the written words, there are open-source libraries, though not sure how mature they are, all the original writing information are saved in file, it might be easy to add this feature.&lt;/p&gt;

&lt;p&gt;A small one is to replay the writing process of the note, since all the timing infomation was saved too, this is not hard to implement.&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;why-open-sourced&#34;&gt;Why open sourced&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s sadly that I can&amp;rsquo;t put more dedicated time into it, since it didn&amp;rsquo;t bring much money as a product for a small group of people, though I get quite some very good comments from some users.&lt;/p&gt;

&lt;p&gt;I feel very happy that some people found it useful and use it frequently, so in case any of them are programmer, I decided to put all the source codes at github, please fork it if you&amp;rsquo;re interesting.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pettyfun/MovableWrite&#34;&gt;Movable Write at Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Might write more about the technical side of the project later, what I&amp;rsquo;ve learned, and how to extend it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>