<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Doc on Living and Programming - YJ Park&#39;s Blog</title>
    <link>http://blog.yjpark.org/categories/doc/</link>
    <description>Recent content in Doc on Living and Programming - YJ Park&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>yjpark@gmail.com (YJ Park)</managingEditor>
    <webMaster>yjpark@gmail.com (YJ Park)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sat, 07 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.yjpark.org/categories/doc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to Dap Context</title>
      <link>http://blog.yjpark.org/blog/2017/01/07/introduction-to-dap-context/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2017/01/07/introduction-to-dap-context/</guid>
      <description>&lt;p&gt;Back in 2013, I was working on my first Unity3d game, it&amp;rsquo;s a simplified RTS game for tablets, the first version took us (3 developers including me) about 2 years to hit the iOS app store, did learned quite some lessons during the process, wanted to write some blogs for a long time, though never really did.&lt;/p&gt;

&lt;p&gt;We released the game at 2015, but the game wasn&amp;rsquo;t successful commercially, and our small start-up company run out of money. I was still making games after that, planned to reuse some lib codes created along the way. Then I realised that the quality of these libs can be improved much (due to time pressure, and lack of experiences)&lt;/p&gt;

&lt;p&gt;The most useful module was a custom data context class I wroted, it was rather simple, just an object with a bunch of properties, and event channels, both can be watched, e.g. when a property been set to a new value, all listeners will be triggered by a callback. On top of these properties and channels, I create a simple layer to interact with the data context via requests, such as &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;fire&lt;/code&gt;, then on top of that, I create a simple text parser so diffrent section in config files can trigger different action in the system, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;selection&amp;quot; : {
    &amp;quot;_&amp;quot;: [
        &amp;quot;sprite/destroy?key=selection&amp;quot;,
        &amp;quot;sprite/do?key=selection&amp;amp;prefab=squads.effect_sprite#color=1,1,1,0&amp;amp;sprite=flash&amp;amp;zoom=1.0&amp;amp;play.flash&amp;amp;done.flash=destroy&amp;quot;,
    ]
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>