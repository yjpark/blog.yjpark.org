<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fsharp on Living and Programming - YJ Park&#39;s Blog</title>
    <link>http://blog.yjpark.org/categories/fsharp/</link>
    <description>Recent content in Fsharp on Living and Programming - YJ Park&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>yjpark@gmail.com (YJ Park)</managingEditor>
    <webMaster>yjpark@gmail.com (YJ Park)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Tue, 22 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.yjpark.org/categories/fsharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[F# Game Tutorial] Game Abstraction</title>
      <link>http://blog.yjpark.org/blog/2019/01/22/fsharp-game-tutorial-game-abstraction/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2019/01/22/fsharp-game-tutorial-game-abstraction/</guid>
      <description>&lt;p&gt;In last post, we did load an atlas and show a simple sprite from it, this one is mainly on refactoring, extract common logic for all games, which can be reused later.&lt;/p&gt;

&lt;h2 id=&#34;game-texturepacker&#34;&gt;Game.TexturePacker&lt;/h2&gt;

&lt;p&gt;Moved the texture packer library from Tank.Content here.&lt;/p&gt;

&lt;h2 id=&#34;game-engine&#34;&gt;Game.Engine&lt;/h2&gt;

&lt;p&gt;Move game abstraction here, it&amp;rsquo;s very simple now, the logic is same from last post, just create base class, and ways for customization.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[F# Game Tutorial] Game Skeleton and Atlas</title>
      <link>http://blog.yjpark.org/blog/2019/01/21/fsharp-game-tutorial-game-skeleton-and-atlas/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2019/01/21/fsharp-game-tutorial-game-skeleton-and-atlas/</guid>
      <description>&lt;p&gt;Was down with a really bad flu last week, can&amp;rsquo;t work on anything at all, feeling much better today.&lt;/p&gt;

&lt;h2 id=&#34;what-to-cover-in-this-post&#34;&gt;What to Cover in this Post&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve setup the environment, got these command line tools to be running: &lt;code&gt;dotnet&lt;/code&gt;, &lt;code&gt;paket&lt;/code&gt;, &lt;code&gt;fake&lt;/code&gt;, now we are gonna use these tools to start development.&lt;/p&gt;

&lt;p&gt;Since this is a &lt;em&gt;from scratch&lt;/em&gt; tutorial, I&amp;rsquo;ll try to explain how I create the game itself and the game engine underneath, also will talk about some reasons behind the way I chose.&lt;/p&gt;

&lt;p&gt;This post will focus on the basic skeleton of the game, How I organize the codes and assets, use the libaries to create a minimal runnable game that can load an image and show it on the screen.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[F# Game Tutorial] Setup Environment</title>
      <link>http://blog.yjpark.org/blog/2019/01/08/fsharp-game-tutorial-setup-environment/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2019/01/08/fsharp-game-tutorial-setup-environment/</guid>
      <description>&lt;p&gt;In this post, I&amp;rsquo;ll explain how to setup development environment for this tutorial, you should be able to build and run the demo after following the steps.&lt;/p&gt;

&lt;h2 id=&#34;platform-components&#34;&gt;Platform Components&lt;/h2&gt;

&lt;h3 id=&#34;net-core&#34;&gt;.NET Core&lt;/h3&gt;

&lt;p&gt;.NET Core is the free, cross-platform, open source .NET platform, which is supported on Linux, macOS, Windows, you need the current version (v2.2.101) to run the tutorial codes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Official web site: &lt;a href=&#34;https://dotnet.microsoft.com/&#34;&gt;https://dotnet.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Source code: &lt;a href=&#34;https://github.com/dotnet&#34;&gt;https://github.com/dotnet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reasons to choose .NET Core:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[F# Game Tutorial] Preface</title>
      <link>http://blog.yjpark.org/blog/2019/01/06/fsharp-game-tutorial-preface/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2019/01/06/fsharp-game-tutorial-preface/</guid>
      <description>&lt;p&gt;Before start writing individual posts, I&amp;rsquo;d like to talk about some general ideas about this tutorial.&lt;/p&gt;

&lt;h2 id=&#34;target-audience-who&#34;&gt;Target Audience (Who)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Familiar with at least one programming language, and don&amp;rsquo;t mind to try a new one (if you don&amp;rsquo;t know F# before).&lt;/li&gt;
&lt;li&gt;Interested in game development, want to create some simple games for fun.&lt;/li&gt;
&lt;li&gt;Have some time to spare, to really learn something like writing a game from scratch, plan to spend a lot time on it, it&amp;rsquo;s really fun to me, but also quite hard at first.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;planned-contents-what&#34;&gt;Planned Contents (What)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I will write serious of posts about how to create this tank game from scratch, talking about what tasks need to be done, how to get each step forward, readers with no experiences should be able to follow these posts, and hopefully learn enough to create their own game.&lt;/li&gt;
&lt;li&gt;Along the way, I may also write some posts on specific topics, which may not directly related to current steps, but related to game development in general.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[F# Game Tutorial] Overview</title>
      <link>http://blog.yjpark.org/blog/2019/01/02/fsharp-game-tutorial-overview/</link>
      <pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2019/01/02/fsharp-game-tutorial-overview/</guid>
      <description>&lt;p&gt;Have been working on game development for a few years now, making game is indeed quite fun, it shares much with other kind of software development, while it also has its uniqueness. Always wanted to write more on it, though not really have good idea about how to start.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been working with a couple of game engines, mostly Unity3D, IwGame on Marmalade, Cocos2D, Phaser, created some own frameworks, did experiment with a very simple game engine in Elm as well. Most of them were designed in a similar way, provide similar components and tools. As game developers, we usually don&amp;rsquo;t need to dig much in the game engine itself, but we should have a rather clear understanding about its structure so we can work on it efficiently.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve decided to write some tutorials on game development, a very basic one, in my mind, it&amp;rsquo;s mostly for developers without much experiences with game development, but curious in it. I&amp;rsquo;ll try to share some of my understandings with game development, explain core components of game engine.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;http://blog.yjpark.org/img/game_tutorial/intro.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Build DotNet Projects with Fake</title>
      <link>http://blog.yjpark.org/blog/2018/11/27/build-dotnet-projects-with-fake/</link>
      <pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2018/11/27/build-dotnet-projects-with-fake/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been doing quite some F# coding lately, which is really nice, plan to write more about F# later, here I&amp;rsquo;m gonna talk about how to build DotNet projects with Fake.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve put common logic as libraries, then can share them easily across multiple projects, so I need to create NuGet packages. I&amp;rsquo;ve already created more than a dozen individual libraries, it&amp;rsquo;s clear that I need an automated process to manage them, or it&amp;rsquo;s very tedious to keep proper version of libraries in each project.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve did some small work around Fake to make such process, which works quite nicely for me, I plan to write two articles on this, this one will explain the basic structure, and how I use it to manage multiple projects easily, the next one will talk about how to create NuGet package, and how to use a hacky way to do local development easily.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Functional Reactive Actors in F#</title>
      <link>http://blog.yjpark.org/blog/2018/08/12/functional-reactive-actors-in-fsharp/</link>
      <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2018/08/12/functional-reactive-actors-in-fsharp/</guid>
      <description>&lt;p&gt;In the last few months, I&amp;rsquo;ve created an actor frameworks in which each actors is in functional reactive way in F#.&lt;/p&gt;

&lt;p&gt;Basically each actor is created with the Elm Architecture, everything is strong typed, can be run on Dot Net Core, or in browser with javascript generated by Fable, also can be run on mobile or desktop devices with Xamarin or Dot Net.&lt;/p&gt;

&lt;p&gt;It costed me much time and efforts to get it to current state, learned a lot along the way, will try to write something before I forget the details.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>