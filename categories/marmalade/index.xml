<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marmalade on Living and Programming - YJ Park&#39;s Blog</title>
    <link>http://blog.yjpark.org/categories/marmalade/</link>
    <description>Recent content in Marmalade on Living and Programming - YJ Park&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>yjpark@gmail.com (YJ Park)</managingEditor>
    <webMaster>yjpark@gmail.com (YJ Park)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sun, 14 Apr 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.yjpark.org/categories/marmalade/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Marmalade Tricks and Tips</title>
      <link>http://blog.yjpark.org/blog/2013/04/14/marmalade-tricks-and-tips/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2013/04/14/marmalade-tricks-and-tips/</guid>
      <description>

&lt;p&gt;During the days to develop our first game: &lt;a href=&#34;https://itunes.apple.com/us/app/day-day-birds/id608802879?mt=8&amp;amp;uo=4&#34;&gt;Day Day Birds&lt;/a&gt;, I went through the progress of learning to use Marmalade, generally it&amp;rsquo;s very easy to use, and save me lot of time, though there are some little things that I hoped that I know earlier.&lt;/p&gt;

&lt;h2 id=&#34;stack-size&#34;&gt;Stack Size&lt;/h2&gt;

&lt;p&gt;The game started to crash randomly before I noticed, it&amp;rsquo;s quite hard to debug, especially without the tools in Xcode or other IDEs provide. And it never crash in the simulator, so the debugging is quite awkward, a lot of guess, build, test-run going on.&lt;/p&gt;

&lt;p&gt;When it crashed on iOS device, some information were provided, though full stack trace is not availabe, and the place of crash is not consistent. After 2 or 3 days and nights figihting with this bug, finally found out the root cause, which is very surprising.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s caused by stack overflow, since Marmalade is designed to support many different mobile devices, many of them are with limited hardware, the stack size is 32k by default, since I&amp;rsquo;m having a LUA layer, and also allocated some string buffer in stack for convinience, it got overflowed, so caused the random crash.&lt;/p&gt;

&lt;p&gt;There is actually a &lt;a href=&#34;http://www.madewithmarmalade.com/devnet/forum/advice-anyone-experiencing-heap-corruption-3&#34;&gt;forum thread&lt;/a&gt; mentioned this.&lt;/p&gt;

&lt;p&gt;Since I only plan to support the modern devices (iPhone, iPad, maybe Android as well), gave it a much bigger setting fix the crash perfectly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   [s3e]
   SysStackSize=4000000
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;accelerate-framework&#34;&gt;Accelerate framework&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m using libBass for the audio playpack, for some reason it require Accelarate frame under iOS to compile. so I add &lt;code&gt;iphone-link-opts=&amp;quot;-weak_framework Accelerate&amp;quot;&lt;/code&gt; into the mkf file.&lt;/p&gt;

&lt;p&gt;For unknown reason, the Accelerate.framework stub in &lt;code&gt;/Developer/Marmalade/6.2/s3e/deploy/plugins/iphone/sys_libs/System/Library/Frameworks/Accelerate.frameworks/Accelerate&lt;/code&gt; is not working, might be the nested frameworks inside it.&lt;/p&gt;

&lt;p&gt;Not really understand how the stub frameworks work in Marmalade, seems a smart way to use the system&amp;rsquo;s SDK libraries, though a hacky solution make it compiled.&lt;/p&gt;

&lt;p&gt;Current fix is to copy the framework from &lt;code&gt;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/System/Library/Frameworks/Accelerate.framework&lt;/code&gt;. Not sure whether there is side effects.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp -r /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/System/Library/Frameworks/Accelerate.framework/* /Developer/Marmalade/6.2/s3e/deploy/plugins/iphone/sys_libs/System/Library/Frameworks/Accelerate.framework/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ios-device-crash-report&#34;&gt;iOS device crash report&lt;/h2&gt;

&lt;p&gt;This page explains how to read the crash report nicely, also don&amp;rsquo;t forget to save the mapping file of the version you submitted to app store, otherwise you will have no idea to debug when get crash logs from Apple.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://marmalade.zendesk.com/entries/22126117-how-to-map-iphone-crash-log-addresses-to-your-code&#34;&gt;How to map iPhone crash log addressed to your code&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;some-mkb-settings&#34;&gt;Some mkb settings&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;deployments
{
    name=&amp;quot;Slingshot&amp;quot;
    version=1.0

    [&amp;quot;Default&amp;quot;]
    iphone-provisioning-profile=&amp;quot;data/provisions/DayDayBirdsDev.mobileprovision&amp;quot;
    iphone-enable-4inch-retina=1
    iphone-no-splash=1
    iphone-prerendered-icon=1
    iphone-icon=&amp;quot;data/icon/Icon.png&amp;quot;
    iphone-icon-high-res=&amp;quot;data/icon/Icon@2x.png&amp;quot;
    iphone-icon-ipad=&amp;quot;data/icon/Icon-72.png&amp;quot;
    iphone-icon-ipad-high-res=&amp;quot;data/icon/Icon-72@2x.png&amp;quot;
    iphone-icon-ipad-search=&amp;quot;data/icon/Icon-Small-50.png&amp;quot;
    iphone-icon-ipad-search-high-res=&amp;quot;data/icon/Icon-Small-50@2x.png&amp;quot;
    iphone-icon-settings=&amp;quot;data/icon/Icon-Small.png&amp;quot;
    iphone-icon-settings-high-res=&amp;quot;data/icon/Icon-Small@2x.png&amp;quot;
    
    #Android
    android-icon=&amp;quot;data/android/icon/icon_48.png&amp;quot;
    android-icon-gallery=&amp;quot;data/android/icon/icon_170.png&amp;quot;
    android-icon-hdpi=&amp;quot;data/android/icon/icon_72.png&amp;quot;
    android-icon-ldpi=&amp;quot;data/android/icon/icon_36.png&amp;quot;
    android-icon-mdpi=&amp;quot;data/android/icon/icon_48.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;iphone-enable-4inch-retina=1&lt;/code&gt; enabled the iPhone 5 wide screen mode.&lt;/p&gt;

&lt;h2 id=&#34;some-app-icf-settings&#34;&gt;Some app.icf settings&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;DispFixRot=&amp;quot;Landscape&amp;quot;
IOSDispScaleFactor=200

{ID=IPHONE &amp;quot;iPad1,1&amp;quot;}
[s3e]
memSize = 30000000
SysStackSize=1000000
{ID=IPHONE &amp;quot;iPad2,1&amp;quot;,&amp;quot;iPad2,2&amp;quot;,&amp;quot;iPad2,3&amp;quot;,&amp;quot;iPad2,4&amp;quot;,&amp;quot;iPad2,5&amp;quot;,&amp;quot;iPad2,6&amp;quot;,&amp;quot;iPad2,7&amp;quot;}
[s3e]
memSize = 64000000
{ID=IPHONE &amp;quot;iPod1,1&amp;quot;,&amp;quot;iPod2,1&amp;quot;,&amp;quot;iPod3,1&amp;quot;,&amp;quot;iPod4,1&amp;quot;,&amp;quot;iPhone1,1&amp;quot;,&amp;quot;iPhone1,2&amp;quot;,&amp;quot;iPhone2,1&amp;quot;}
[s3e]
memSize = 34000000
SysStackSize=1000000
{ID=IPHONE &amp;quot;iPod5,1&amp;quot;,&amp;quot;iPhone3,1&amp;quot;,&amp;quot;iPhone3,2&amp;quot;,&amp;quot;iPhone4,1&amp;quot;,&amp;quot;iPhone4,2&amp;quot;}
[s3e]
memSize = 64000000
{OS=ANDROID}
[s3e]
memSize = 80000000
{OS=OSX}
[s3e]
memSize = 256000000
{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;DispFixRot=&amp;quot;Landscape&amp;quot;&lt;/code&gt; is to lock the screen rotation to be landscape only, I&amp;rsquo;ve met quite some problem with landscape, probably will write another post about it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IOSDispScaleFactor=200&lt;/code&gt; is used to activate the retina screen support, so the resolution of retina iPad will be 2048 x 1536,&lt;/p&gt;

&lt;p&gt;It took me quite some efforts to learn how to do the device-specific settings in app.icf, the syntax is quite complex, the marmalade documents actually cover this, though lacking good samples.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Initial Release of s3eBass - Marmalade extension for BASS audio engine</title>
      <link>http://blog.yjpark.org/blog/2012/11/06/initial-release-of-s3ebass-marmalade-extension-for-bass-audio-engine/</link>
      <pubDate>Tue, 06 Nov 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/11/06/initial-release-of-s3ebass-marmalade-extension-for-bass-audio-engine/</guid>
      <description>

&lt;p&gt;The audio and music are playing a very important role in games, for our future games, I want them to have good quality of audio and music, e.g. don&amp;rsquo;t use short loop of mp3 music, but something much longer and more dynamic without taking much space. My first thought is to use MIDI+soundfonts or some mod-based music, so I spent some time to try to see the possibility.&lt;/p&gt;

&lt;p&gt;There are quite some libraries to support xm playback, though I can&amp;rsquo;t find any Marmalade extensions on the web, in the forum someone mentioned that they made use of FMOD in their game, though there is no code shared, and FMOD is quite expansive.&lt;/p&gt;

&lt;p&gt;After some search, I decided to use &lt;a href=&#34;http://www.un4seen.com/bass.html&#34;&gt;BASS audio engine&lt;/a&gt;, which is quite powerful, with well designed API, not bad documentation and sample, and a reasonable price for small projects (the shareware license can cover product with small price).&lt;/p&gt;

&lt;p&gt;Now I&amp;rsquo;ve got a working extension(though the only test I did was to play a xm file on OSX, iOS and Android), think other people maybe interesting in the extension or how to create similar extensions, so I&amp;rsquo;m going to share the extension and some experiences I&amp;rsquo;ve learn from the process(not in this post).&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;quick-note-about-implementation&#34;&gt;Quick Note about Implementation&lt;/h2&gt;

&lt;p&gt;BASS itself support many platform, the platforms I need are: OSX, iOS, Android. It&amp;rsquo;s pure C, so it shouldn&amp;rsquo;t be too hard to make it work with Marmalade. Though it took me quite a while to get some basic idea about the Marmalade extension system.&lt;/p&gt;

&lt;p&gt;Most documentation from Marmalade about extensions seems focusing on writing platform specific codes in custom extension, in this case, it&amp;rsquo;s actually much more easier since BASS is already platform independent, all we need is to make it work with Marmalade&amp;rsquo;s build system.&lt;/p&gt;

&lt;p&gt;Will write more about how to wrap C libraries into Marmalade extension in other posts later.&lt;/p&gt;

&lt;h2 id=&#34;code-of-the-extension&#34;&gt;Code of the Extension&lt;/h2&gt;

&lt;p&gt;Since basically I have no idea about how to use BASS now, I just tried to use some codes from the BASS examples, it works pretty good, the xm files sounds quite good.&lt;/p&gt;

&lt;p&gt;Think I will write some wrapper layer around the C function calls to expose audio functionalities to C++, XML and Lua codes. Guess I will have much better idea about it in a couple of months after our first game get done.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve put the codes at &lt;a href=&#34;https://github.com/yjpark/s3eBass&#34;&gt;Github&lt;/a&gt;, feel free to clone it, and give it a try. see the github pages for more details about it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convert Cocos2D Font (BMFont) to Marmalade&#39;s GxFont</title>
      <link>http://blog.yjpark.org/blog/2012/11/05/convert-cocos2d-font-bmfont-to-marmalades-gxfont/</link>
      <pubDate>Mon, 05 Nov 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/11/05/convert-cocos2d-font-bmfont-to-marmalades-gxfont/</guid>
      <description>

&lt;p&gt;In 2D games, it&amp;rsquo;s typical to use image based font for UI elements, which can provide better graphic result, fast rendering, and usually smaller then true type fonts (especially if you want to support languages with big character set, e.g. Chinese).&lt;/p&gt;

&lt;p&gt;There are quite some tools to generate such font images, I&amp;rsquo;m using &lt;a href=&#34;http://www.bmglyph.com/&#34;&gt;bmGlyph&lt;/a&gt; as the font generator, it can publish the popular &amp;ldquo;Cocos2d / BMFont&amp;rdquo; format, though it&amp;rsquo;s not directly usable in Marmalade.&lt;/p&gt;

&lt;p&gt;Marmalade is using its own font format, and provide a font generator in the SDK, though it only support plain color, and when I feed it with some Chinese characators, they are not included in the generated files. I&amp;rsquo;m using the OS X version of the font builder, not sure about how the Windows version works.&lt;/p&gt;

&lt;p&gt;My first thought was to add function to use the BMFont generated, though it&amp;rsquo;s not an easy task, also I want to use IwGame&amp;rsquo;s label components, which are based on Marmalade&amp;rsquo;s GxFont and Truetype support.&lt;/p&gt;

&lt;p&gt;After reading &lt;a href=&#34;http://docs.madewithmarmalade.com/native/api_reference/iwgxfontapidocumentation/iwgxfontapioverview/iwgxfontfiles.html&#34;&gt;GxFont Reference&lt;/a&gt;, turns out it&amp;rsquo;s using a fairly simple format, so I decided to write a converter to create gxfont files.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;code-of-the-converter&#34;&gt;Code of the Converter&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve put the codes at &lt;a href=&#34;https://github.com/yjpark/marmalade-tools&#34;&gt;Github&lt;/a&gt;, feel free to clone it, and try to run it. see the github pages for more details about it.&lt;/p&gt;

&lt;p&gt;The converter support UTF-8 characters with no problem, the size of the tga files is a bit big comparing to the Cocos2d version, since more empty spaces are needed for GxFont format.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s kind of a straight-forward implementation, and probably there are ways to make it better, especially if the bmGlyph&amp;rsquo;s console support is out (in the coming feature list now), the whole process of extracting characters from data file, create Cocos2d font, convert to GxFont can be fully automatied.&lt;/p&gt;

&lt;p&gt;Just read the code if you&amp;rsquo;re interested in the implementation details. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenGL ES 2.0 Shader in Marmalade</title>
      <link>http://blog.yjpark.org/blog/2012/10/02/opengl-es-2-dot-0-shader-in-marmalade/</link>
      <pubDate>Tue, 02 Oct 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/10/02/opengl-es-2-dot-0-shader-in-marmalade/</guid>
      <description>

&lt;p&gt;Marmalade provide good support for writing custom shaders in it, though it&amp;rsquo;s not easy to get all the information to start writing the first shader in my case, here is some information that I gathered during the process.&lt;/p&gt;

&lt;p&gt;I decided to only support Open GL 2.0 Shaders in our games, most current devices support it, and as a small team, supporting older devices is a bit hard since we don&amp;rsquo;t have testers for now, also the architect of 2.0 is simpler and cleaner.&lt;/p&gt;

&lt;p&gt;The sample shader&amp;rsquo;s function is to replace non-transparent part of the image to a given color, then the color can be changed programmingly (also by xml thanks to IwGame). Basically the images will be just working as masks, the actually color to be rendered are controlled by the shader.&lt;/p&gt;

&lt;p&gt;I will not cover the basics about Open GL Shaders, there are plenty of information on the web about that, also a PDF doc is included in Marmalade installation, it&amp;rsquo;s a good start point to me, you should read it first to get the concepts.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;marmalade-rendering-with-custom-shader&#34;&gt;Marmalade Rendering with Custom Shader&lt;/h2&gt;

&lt;p&gt;Marmalade support shader very well by the &lt;a href=&#34;http://docs.madewithmarmalade.com/native/api_reference/api/classCIwGxShaderTechnique.html&#34;&gt;CIwGxShaderTechnique&lt;/a&gt; class, to use it, you need to set it to material, here is the snnipet for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;    CIwMaterial* mat = IW_GX_ALLOC_MATERIAL();
    mat-&amp;gt;SetTexture(image-&amp;gt;getImage2D()-&amp;gt;GetMaterial()-&amp;gt;GetTexture());
    mat-&amp;gt;SetShaderTechnique(shader);
    IwGxSetMaterial(mat);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The shader here is a pointer to CIwGxShaderTechnique, and the image is a pointer to CIwGameImage (part of IwGame), if you are not using IwGame, you can use Iw2d, or IwGx directly.&lt;/p&gt;

&lt;p&gt;The following function can load a shader from a resource group.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;CIwGxShaderTechnique* getShader(const char* shaderName) {
    CIwGxShaderTechnique* shaderTemplate = (CIwGxShaderTechnique*)IwGetResManager()-&amp;gt;GetResNamed(shaderName, &amp;quot;CIwGxShaderTechnique&amp;quot;);
    
    if (shaderTemplate == NULL) {
        return false;
    }
    
    shader = new CIwGxShaderTechnique();
    IwSerialiseOpen(&amp;quot;shader-Duplicate.bin&amp;quot;, false);
    shaderTemplate-&amp;gt;Serialise();
    IwSerialiseClose();

    IwSerialiseOpen(&amp;quot;shader-Duplicate.bin&amp;quot;, true);
    shader-&amp;gt;Serialise();
    IwSerialiseClose();
    return shader;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: since I need multiple instance of the shader for diffrent images with differnt colors, here I use a quick solution with marmalade&amp;rsquo;s serialization, which is NOT thread safe due to the hard code file name.&lt;/p&gt;

&lt;p&gt;Load the resource group as this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;    IwGetResManager()-&amp;gt;LoadGroup(&amp;quot;effect/Shaders.group&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;files-used&#34;&gt;Files Used&lt;/h2&gt;

&lt;p&gt;You need to include the shader files in the asset section of the mkb/mkf file, like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;files
{
    [Data]
    (data)
    effect/Shaders.group
}

assets
{
    (data-ram/data-gles1)
    effect/Shaders.group.bin
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please refer to Marmalade&amp;rsquo;s documents if you are not familiar with the resource compiling process and mkb syntaxes.&lt;/p&gt;

&lt;p&gt;Here is data/effect/Shaders.group&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CIwResGroup
{
    name &amp;quot;PettyFun Environment Shaders&amp;quot;
    shared true

    &amp;quot;./PfMaskEffectShader.itx&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The content of data/effect/PfMaskEffectShader.itx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CIwGxShaderTechnique
{
    name &amp;quot;PfMaskEffectShader&amp;quot;

    param &amp;quot;p_Color&amp;quot; vec4 1 {0.0, 0.0, 1.0, 1.0}
    
    shader &amp;quot;vertex&amp;quot;
    {
        attribute highp vec4 inVert;
        attribute mediump vec2 inUV0;
        
        uniform highp mat4 inPMVMat;
        uniform mediump vec2 inUVOffset;
        uniform mediump vec2 inUVScale;
    
        varying mediump vec2 v_UV0;

        void main(void)
        {
            gl_Position = inPMVMat * inVert;
            
            v_UV0 = inUV0 * inUVScale + inUVOffset;
        }
    }
    shader &amp;quot;fragment&amp;quot;
    {
        uniform sampler2D inSampler0;
        varying mediump vec2 v_UV0;
        uniform mediump vec4 p_Color;

        void main(void)
        {
            mediump vec4 c = texture2D(inSampler0, v_UV0);
            if (c.a &amp;lt; 0.1) {
                gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
            } else {
                gl_FragColor = p_Color;
            }
        }
    } 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please read &lt;a href=&#34;http://docs.madewithmarmalade.com/native/api_reference/api/group__IwGxShaderTechnique.html&#34;&gt;IwGxShaderTechnique Reference&lt;/a&gt; for the list of the attributes that you can use. It took me quite a while to find this document since this is no links to this page on the class reference page. This is VERY useful for writing shaders in Marmalade.&lt;/p&gt;

&lt;h2 id=&#34;update-params-by-code-and-xml&#34;&gt;Update Params By Code and XML&lt;/h2&gt;

&lt;p&gt;the &lt;strong&gt;param&lt;/strong&gt; in the shader is for the parameters from your code, change it&amp;rsquo;s value like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void PfShaderEffect::SetShaderParam(const char *paramName, CIwGxShaderUniform::CIwGxShaderUniformType type, const void* value) {
    if (Shader == NULL) return;
    
    CIwGxShaderUniform* param = Shader-&amp;gt;GetParam(paramName);
    if( param ) {
        param-&amp;gt;Set(type, 0, value);
    } else {
        PfTrace(&amp;quot;Shader Param Not Exist: %s&amp;quot;, paramName);
    }
}

void PfShaderEffect::SetShaderParamAsInt(const char *paramName, int value) {
    SetShaderParam(paramName, CIwGxShaderUniform::INT, &amp;amp;value);
}


void PfShaderEffect::SetShaderParamAsFloat(const char *paramName, float value) {
    SetShaderParam(paramName, CIwGxShaderUniform::FLOAT, &amp;amp;value);
}

void PfShaderEffect::SetShaderParamAsColor(const char *paramName, CIwColour value) {
    float color[4];
    color[0] = 1.0f * value.r / 0xff;
    color[1] = 1.0f * value.g / 0xff;
    color[2] = 1.0f * value.b / 0xff;
    color[3] = 1.0f * value.a / 0xff;
    SetShaderParam(paramName, CIwGxShaderUniform::VEC4, color);
}

void PfShaderEffect::UpdateColorFromAnimation(CIwColour* color, CIwGameAnimInstance *animation) {
    CIwGameAnimFrameVec4* value = (CIwGameAnimFrameVec4*)animation-&amp;gt;getCurrentData();
    color-&amp;gt;r = value-&amp;gt;data.x;
    color-&amp;gt;g = value-&amp;gt;data.y;
    color-&amp;gt;b = value-&amp;gt;data.z;
    color-&amp;gt;a = value-&amp;gt;data.w;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since I&amp;rsquo;m using IwGame, it&amp;rsquo;s very easy to make the color controlled by the XOML animation, all I need to do is to override the UpdateFromAnimation method of CIwGameActor, and handle the color value from it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool PfMaskEffect::UpdateFromAnimation(CIwGameAnimInstance *animation) {
    if (PfShaderEffect::UpdateFromAnimation(animation))
        return true;
    
    bool delta = animation-&amp;gt;isDelta();
    
    unsigned int element_name = animation-&amp;gt;getTargetPropertyHash();
    
    if (element_name == PfHash(&amp;quot;Color&amp;quot;)) {
        UpdateColorFromAnimation(&amp;amp;Color, animation);
        SetShaderParamAsColor(&amp;quot;p_Color&amp;quot;, Color);
    } else {
        return false;
    }
        return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can generate smooth color switch animation by pure XML as normal IwGame Animation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;Template Name=&amp;quot;MaskColorTimelineTemplate&amp;quot;&amp;gt;
        &amp;lt;Animation Name=&amp;quot;MaskColorAnim$name$&amp;quot; Duration=&amp;quot;$duration$&amp;quot; Type=&amp;quot;vec4&amp;quot;&amp;gt;
            &amp;lt;Frame Value=&amp;quot;$startcolor$&amp;quot; Time=&amp;quot;0&amp;quot; /&amp;gt;
            &amp;lt;Frame Value=&amp;quot;$endcolor$&amp;quot; Time=&amp;quot;$duration$&amp;quot; /&amp;gt;
        &amp;lt;/Animation&amp;gt;
        &amp;lt;Timeline Name=&amp;quot;MaskColorTimeline$name$&amp;quot; AutoPlay=&amp;quot;true&amp;quot;&amp;gt;
            &amp;lt;Animation Anim=&amp;quot;MaskColorAnim$name$&amp;quot; Target=&amp;quot;Color&amp;quot; Repeat=&amp;quot;1&amp;quot; StartAtTime=&amp;quot;0&amp;quot;/&amp;gt;
        &amp;lt;/Timeline&amp;gt;
    &amp;lt;/Template&amp;gt;

    &amp;lt;Actor ...&amp;gt;
        &amp;lt;FromTemplate Template=&amp;quot;MaskColorTimelineTemplate&amp;quot; name=&amp;quot;ColorChange&amp;quot; duration=&amp;quot;2&amp;quot;
            startcolor=&amp;quot;180, 220, 251, 255&amp;quot; endcolor=&amp;quot;255, 0, 0, 255&amp;quot; /&amp;gt;
    &amp;lt;/Actor&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is very flexible and powerful, no need to recompile, just updating plain XML files.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Game Engine Based on Marmalade and IwGame</title>
      <link>http://blog.yjpark.org/blog/2012/08/30/game-engine-based-on-marmalade-and-iwgame/</link>
      <pubDate>Thu, 30 Aug 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/08/30/game-engine-based-on-marmalade-and-iwgame/</guid>
      <description>

&lt;p&gt;Since August 2012, 2 developers(including me) and 2 graphic designers come together and started a small game studio to work on some mobile casual games, as the tech lead, I need to choose a development way for our first batch of games.&lt;/p&gt;

&lt;p&gt;Our games will be mostly 2D games, might with some 3D charactors, though the scenes or levels will be 2D, I think that&amp;rsquo;s better for the team and the graphic quality of the games.&lt;/p&gt;

&lt;p&gt;After quite some readings and experiments, I finally have a clear idea about how we gonna build these games, We will create our small game engine, on top of Marmalade and IwGame.&lt;/p&gt;

&lt;h2 id=&#34;why-choose-marmalade&#34;&gt;Why choose Marmalade?&lt;/h2&gt;

&lt;p&gt;I did have quite some experience on cocos2d, though it&amp;rsquo;s been ruled out pretty quickly. I want our game to work on multiple platforms, since we don&amp;rsquo;t use much platform-specific features, we don&amp;rsquo;t get much with objective-c. Also personally I am not really a big fan of cocos2d, it&amp;rsquo;s kind of a simple framework with good quality, though missing some of the features I want with a solid framework, e.g. Tool or Markup for graphic scene editor, I&amp;rsquo;ve tried Cocos Builder and Level Helper very breifly, might be just me, but I don&amp;rsquo;t like neither one. A similar option is to go with cocos2d-x, which is cross platform, but because of similar reason, I didn&amp;rsquo;t dig into it deeply.&lt;/p&gt;

&lt;p&gt;The second option is Unity3d, I&amp;rsquo;ve used it for about 3 months before, It&amp;rsquo;s pretty good, easy to use, and have a hugh community with tons of good plugins. My biggest concern about it is the binary format of the prefebs, it&amp;rsquo;s a bit like the xib file in App development, hard to change and track, as a developer, I want a text based format. Also don&amp;rsquo;t really think the .Net virtual machine is the best way for our rather small games. My feeling is that it&amp;rsquo;s more like a tool for game designers and graphic designers, as developers, we gave up full control in exchange with a full-feature game development environment. And also it&amp;rsquo;s mostly 3D centric, 2D works are possible, but a bit awkard, since we don&amp;rsquo;t need the 3D power and I want more control with my codes, I did not take this path either.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;For good performance and graphic effects, I didn&amp;rsquo;t investigate the fast development tools, most of them are HTML based or LUA based, more like quick prototype tools for me.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve played with Airplay for a couple of days 2 years ago, technically it was very good, though with a rather steep learning curve, and lack of tutorials and blog post, so I didn&amp;rsquo;t really learn it as a hobby. Now it&amp;rsquo;s renamed to Marmalade, been updated pretty often, and having a much bigger user base and many successful games are based on it, like Draw Something or Cut The Rope. Since I will use the chosen platform for at least 1 or 2 years, I spend a week to really try to learn it this time.&lt;/p&gt;

&lt;p&gt;The first impression was kind of negative, the OSX support seems to be much weaker than the windows one, a bunch of small problems were met, which almost make me give it up. Now I&amp;rsquo;ve been using it for about 1 month, still got some problem, though I think I start to feel comfortable with it.&lt;/p&gt;

&lt;p&gt;There are still very few technical information about marmalade other than the official documents and forum, the only helpful tutorial I can find is the &lt;a href=&#34;http://www.drmop.com/index.php/marmalade-sdk-tutorials/&#34;&gt;DrMop tutorials&lt;/a&gt;. It&amp;rsquo;s very helpful to provide basic ideas for new Marmalade users.&lt;/p&gt;

&lt;p&gt;The API documents of Marmalade is actually quite good after you get the basic ideas about it. Also the examples included are good learning source.&lt;/p&gt;

&lt;p&gt;My current feeling about Marmalade is quite positive, it has nice features and solid quality, provide full control, has native bridge for potential platform-specific development.&lt;/p&gt;

&lt;p&gt;The things I wish to be better:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1st class OSX support, add the missing features of the simulator, fix the broken &amp;ldquo;mkb &amp;ndash;iphone&amp;rdquo; device building (only trid on 10.8 + Xcode 4.4, not sure about other environments). (Update: &amp;ndash;iphone is fixed in 6.1, simulator seems not updated)&lt;/li&gt;
&lt;li&gt;Release to osx ability, then I can create desktop tools such as customized level editor instead of let my graphic designers to use the simulator to run them. (Update: Added in 6.1)&lt;/li&gt;
&lt;li&gt;Float data types in IwGx, it&amp;rsquo;s said to be included in 6.1 release which should be out soon, much simpler and less error-prone, we&amp;rsquo;ll target on OpenGL ES 2.0 devices only (iOS devices first) to make our life easier since we can&amp;rsquo;t afford dedicated tester anyway. (Update: Float added in 6.1 and works great, though we probably will not change IwGame to use float)&lt;/li&gt;
&lt;li&gt;High level document besides API reference, and generally more documentations.&lt;/li&gt;
&lt;li&gt;Better community and 3rd party components, it&amp;rsquo;s quite unpopular in stackoverflow, very few blogs, and the github community projects are not very active and organized.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-is-iwgame-and-why-it-is-helpful&#34;&gt;What is IwGame, and Why it is Helpful&lt;/h2&gt;

&lt;p&gt;Marmalade is very low level, its design priciple is that people can make their engine working on it rather easily, but we don&amp;rsquo;t have any game engine yet, so either I need to write a 2D engine from scratch, or choose a C/C++ engine to work with. Cocos2d-X works on Marmalade, though I want something more powerful. Many 3D engine works on it too, but they are too complex to me, I probably will choose Unity3D if I want a 3D engine.&lt;/p&gt;

&lt;p&gt;According to the website, &lt;a href=&#34;http://www.drmop.com/index.php/iwgame-engine/&#34;&gt;IwGame&lt;/a&gt; is a &amp;ldquo;Free Open Source Cross Platform Mobile Game Engine for Smart Phones and Tablets&amp;rdquo;, it&amp;rsquo;s a quite ambitious project, already has a long feature list with many future features, though still in an rather early stage.&lt;/p&gt;

&lt;p&gt;The main reasons I chose it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open source, I can tweak the codes to suit my needs better, and even if its development stopped, we can still improve it by ourselves.&lt;/li&gt;
&lt;li&gt;XML file format, it&amp;rsquo;s very powerful, e.g. make simple animations easily without coding. Also it&amp;rsquo;s very easy to extend the system to add our own extensions. This is a hugh advantage to me.&lt;/li&gt;
&lt;li&gt;Complete 2D framework, including sprite, scene, particle, physics, UI&amp;hellip; No need to reimplement the basic things from the scratch, we can focus on more interesting stuffs.&lt;/li&gt;
&lt;li&gt;Support 2D and 3D rendering, since the rendering codes are based on IwGx now, even for 2D games, some part of 3D elements can be very useful, so I think this flexibility is very good.&lt;/li&gt;
&lt;li&gt;Good document and a full game source included, there are quite some typos in the included PDF document, though it provide most information I need to get started, plus reading the source code, It&amp;rsquo;s kind of easy to learn (though still much harder comparing to cocos2d family).&lt;/li&gt;
&lt;li&gt;Good code quality, easy to read and not hard to expand.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some worries about base our codes on it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s a big project, and seems most code and docs are written by DrMop in several monthes. He did very great so far, though he has too many works ahead him, I am not sure where this project will be after 1 year, what if it&amp;rsquo;s dead? also it&amp;rsquo;s been a while since the last update.&lt;/li&gt;
&lt;li&gt;On the other hand, if it&amp;rsquo;s been developed rapidly, since it&amp;rsquo;s not finished yet, we will need to expand it by ourself, it can be a problem to keep update with the future updates. I don&amp;rsquo;t want to make a fork since many good features are on the list, though we can&amp;rsquo;t wait for they to appear, We will be careful with out changes to make them easy to merge, but what if the owner decide to change the API interface drasticly?&lt;/li&gt;
&lt;li&gt;The core string class (CIwGameString) is not unicode compatible, and the author didn&amp;rsquo;t have plan to support it soon. This can be a big problem for us to support multiple language, especially the asian languages. I want to find a clean solution for this, though haven&amp;rsquo;t started working on it yet.&lt;/li&gt;
&lt;li&gt;There is no unit tests yet, so it might introduce its own bugs, especially if it&amp;rsquo;s been update quickly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;my-plan-on-the-game-engine&#34;&gt;My Plan on The Game Engine&lt;/h2&gt;

&lt;p&gt;Now I feel OK working with Marmalade and IwGame, the next steps will be creating the features/tools we need for our games, i.e. create a game engine for our requirements.&lt;/p&gt;

&lt;p&gt;Here is the current list of works to be done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic level editing, to arrange 2D sprites on screen, supporting basic operations such as moving, scaling, rotating, etc. Our level/scene will be 2D non-tile with multiple layers, something similar to &lt;a href=&#34;http://javilop.com/gamedev/c-game-programming-tutorial-non-tile-based-arbitrary-positioned-entity-engine-editor-like-in-braid-or-aquaria-games/&#34;&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Complex charactor editing, 2D or 3D charactors with body parts, movement and animations.&lt;/li&gt;
&lt;li&gt;Advanced level editing, particles, visual effects, events, etc.&lt;/li&gt;
&lt;li&gt;UI editing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these editors will base on the XOML markup system of IwGame.&lt;/p&gt;

&lt;p&gt;These are still quite some works, might be over engineering for our first game, though as a developer, I don&amp;rsquo;t want to just do things in the quick and dirty way, I want to do it in a proper way. And I think a proper engine can make future games easier to develop, so in the long run, it will worth the efforts.&lt;/p&gt;

&lt;p&gt;Think I will start to write more about Marmalade and IwGame in the future, both help myself to understand them better, and hopefully might help some other developers too.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>