<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Living and Programming - YJ Park&#39;s Blog</title>
    <link>http://blog.yjpark.org/</link>
    <description>Recent content on Living and Programming - YJ Park&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>yjpark@gmail.com (YJ Park)</managingEditor>
    <webMaster>yjpark@gmail.com (YJ Park)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sun, 03 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.yjpark.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[F# Game Tutorial] GUI Addon</title>
      <link>http://blog.yjpark.org/blog/2019/02/03/fsharp-game-tutorial-gui-addon/</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2019/02/03/fsharp-game-tutorial-gui-addon/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a few days since last post, in this one, I want to talk about basic GUI implementation in the game, how to create a very simple addon system to support flexible extensions.&lt;/p&gt;

&lt;p&gt;After we&amp;rsquo;ve got the very limited version of the game running (we can load an atlas and show sprites with it after last post), next steps will be adding more features, at this points, it&amp;rsquo;s better to have a way to communicate with the running game easily. For example, when I want to tweak some parameters in game, it&amp;rsquo;s not very efficient to repeatedly do these steps: change it in code, recompile, rerun to find the best value, instead I prefer to run the game, and use some way to change the parameters while the game is still running.&lt;/p&gt;

&lt;p&gt;There are different ways to support this kind of communication:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provide some REPL (read, evaluate, print, loop) for running game, this is a very powerful way, but need quite some logic to support, especially for a compiled language like F#, many game engine will use some dynamic language for scripting purpose.&lt;/li&gt;
&lt;li&gt;Special development environment to provide extra features, e.g. when you run your game in Unity Editor, you can see many runtime information with editor UI, and can adjust many values with built-in inspector, 3rd party tools, or your editor extensions.&lt;/li&gt;
&lt;li&gt;In game GUI, menu bar, tool bar, or any UI you created for in game control purpose&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[F# Game Tutorial] Game Abstraction</title>
      <link>http://blog.yjpark.org/blog/2019/01/22/fsharp-game-tutorial-game-abstraction/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2019/01/22/fsharp-game-tutorial-game-abstraction/</guid>
      <description>&lt;p&gt;In last post, we did load an atlas and show a simple sprite from it, this one is mainly on refactoring, extract common logic for all games, which can be reused later.&lt;/p&gt;

&lt;h2 id=&#34;game-texturepacker&#34;&gt;Game.TexturePacker&lt;/h2&gt;

&lt;p&gt;Moved the texture packer library from Tank.Content here.&lt;/p&gt;

&lt;h2 id=&#34;game-engine&#34;&gt;Game.Engine&lt;/h2&gt;

&lt;p&gt;Move game abstraction here, it&amp;rsquo;s very simple now, the logic is same from last post, just create base class, and ways for customization.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[F# Game Tutorial] Game Skeleton and Atlas</title>
      <link>http://blog.yjpark.org/blog/2019/01/21/fsharp-game-tutorial-game-skeleton-and-atlas/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2019/01/21/fsharp-game-tutorial-game-skeleton-and-atlas/</guid>
      <description>&lt;p&gt;Was down with a really bad flu last week, can&amp;rsquo;t work on anything at all, feeling much better today.&lt;/p&gt;

&lt;h2 id=&#34;what-to-cover-in-this-post&#34;&gt;What to Cover in this Post&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve setup the environment, got these command line tools to be running: &lt;code&gt;dotnet&lt;/code&gt;, &lt;code&gt;paket&lt;/code&gt;, &lt;code&gt;fake&lt;/code&gt;, now we are gonna use these tools to start development.&lt;/p&gt;

&lt;p&gt;Since this is a &lt;em&gt;from scratch&lt;/em&gt; tutorial, I&amp;rsquo;ll try to explain how I create the game itself and the game engine underneath, also will talk about some reasons behind the way I chose.&lt;/p&gt;

&lt;p&gt;This post will focus on the basic skeleton of the game, How I organize the codes and assets, use the libaries to create a minimal runnable game that can load an image and show it on the screen.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[F# Game Tutorial] Setup Environment</title>
      <link>http://blog.yjpark.org/blog/2019/01/08/fsharp-game-tutorial-setup-environment/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2019/01/08/fsharp-game-tutorial-setup-environment/</guid>
      <description>&lt;p&gt;In this post, I&amp;rsquo;ll explain how to setup development environment for this tutorial, you should be able to build and run the demo after following the steps.&lt;/p&gt;

&lt;h2 id=&#34;platform-components&#34;&gt;Platform Components&lt;/h2&gt;

&lt;h3 id=&#34;net-core&#34;&gt;.NET Core&lt;/h3&gt;

&lt;p&gt;.NET Core is the free, cross-platform, open source .NET platform, which is supported on Linux, macOS, Windows, you need the current version (v2.2.101) to run the tutorial codes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Official web site: &lt;a href=&#34;https://dotnet.microsoft.com/&#34;&gt;https://dotnet.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Source code: &lt;a href=&#34;https://github.com/dotnet&#34;&gt;https://github.com/dotnet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reasons to choose .NET Core:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[F# Game Tutorial] Preface</title>
      <link>http://blog.yjpark.org/blog/2019/01/06/fsharp-game-tutorial-preface/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2019/01/06/fsharp-game-tutorial-preface/</guid>
      <description>&lt;p&gt;Before start writing individual posts, I&amp;rsquo;d like to talk about some general ideas about this tutorial.&lt;/p&gt;

&lt;h2 id=&#34;target-audience-who&#34;&gt;Target Audience (Who)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Familiar with at least one programming language, and don&amp;rsquo;t mind to try a new one (if you don&amp;rsquo;t know F# before).&lt;/li&gt;
&lt;li&gt;Interested in game development, want to create some simple games for fun.&lt;/li&gt;
&lt;li&gt;Have some time to spare, to really learn something like writing a game from scratch, plan to spend a lot time on it, it&amp;rsquo;s really fun to me, but also quite hard at first.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;planned-contents-what&#34;&gt;Planned Contents (What)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I will write serious of posts about how to create this tank game from scratch, talking about what tasks need to be done, how to get each step forward, readers with no experiences should be able to follow these posts, and hopefully learn enough to create their own game.&lt;/li&gt;
&lt;li&gt;Along the way, I may also write some posts on specific topics, which may not directly related to current steps, but related to game development in general.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[F# Game Tutorial] Overview</title>
      <link>http://blog.yjpark.org/blog/2019/01/02/fsharp-game-tutorial-overview/</link>
      <pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2019/01/02/fsharp-game-tutorial-overview/</guid>
      <description>&lt;p&gt;Have been working on game development for a few years now, making game is indeed quite fun, it shares much with other kind of software development, while it also has its uniqueness. Always wanted to write more on it, though not really have good idea about how to start.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been working with a couple of game engines, mostly Unity3D, IwGame on Marmalade, Cocos2D, Phaser, created some own frameworks, did experiment with a very simple game engine in Elm as well. Most of them were designed in a similar way, provide similar components and tools. As game developers, we usually don&amp;rsquo;t need to dig much in the game engine itself, but we should have a rather clear understanding about its structure so we can work on it efficiently.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve decided to write some tutorials on game development, a very basic one, in my mind, it&amp;rsquo;s mostly for developers without much experiences with game development, but curious in it. I&amp;rsquo;ll try to share some of my understandings with game development, explain core components of game engine.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;http://blog.yjpark.org/img/game_tutorial/intro.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Build DotNet Projects with Fake</title>
      <link>http://blog.yjpark.org/blog/2018/11/27/build-dotnet-projects-with-fake/</link>
      <pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2018/11/27/build-dotnet-projects-with-fake/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been doing quite some F# coding lately, which is really nice, plan to write more about F# later, here I&amp;rsquo;m gonna talk about how to build DotNet projects with Fake.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve put common logic as libraries, then can share them easily across multiple projects, so I need to create NuGet packages. I&amp;rsquo;ve already created more than a dozen individual libraries, it&amp;rsquo;s clear that I need an automated process to manage them, or it&amp;rsquo;s very tedious to keep proper version of libraries in each project.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve did some small work around Fake to make such process, which works quite nicely for me, I plan to write two articles on this, this one will explain the basic structure, and how I use it to manage multiple projects easily, the next one will talk about how to create NuGet package, and how to use a hacky way to do local development easily.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Functional Reactive Actors in F#</title>
      <link>http://blog.yjpark.org/blog/2018/08/12/functional-reactive-actors-in-fsharp/</link>
      <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2018/08/12/functional-reactive-actors-in-fsharp/</guid>
      <description>&lt;p&gt;In the last few months, I&amp;rsquo;ve created an actor frameworks in which each actors is in functional reactive way in F#.&lt;/p&gt;

&lt;p&gt;Basically each actor is created with the Elm Architecture, everything is strong typed, can be run on Dot Net Core, or in browser with javascript generated by Fable, also can be run on mobile or desktop devices with Xamarin or Dot Net.&lt;/p&gt;

&lt;p&gt;It costed me much time and efforts to get it to current state, learned a lot along the way, will try to write something before I forget the details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introduction to Dap Context</title>
      <link>http://blog.yjpark.org/blog/2017/01/07/introduction-to-dap-context/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2017/01/07/introduction-to-dap-context/</guid>
      <description>&lt;p&gt;Back in 2013, I was working on my first Unity3d game, it&amp;rsquo;s a simplified RTS game for tablets, the first version took us (3 developers including me) about 2 years to hit the iOS app store, did learned quite some lessons during the process, wanted to write some blogs for a long time, though never really did.&lt;/p&gt;

&lt;p&gt;We released the game at 2015, but the game wasn&amp;rsquo;t successful commercially, and our small start-up company run out of money. I was still making games after that, planned to reuse some lib codes created along the way. Then I realised that the quality of these libs can be improved much (due to time pressure, and lack of experiences)&lt;/p&gt;

&lt;p&gt;The most useful module was a custom data context class I wroted, it was rather simple, just an object with a bunch of properties, and event channels, both can be watched, e.g. when a property been set to a new value, all listeners will be triggered by a callback. On top of these properties and channels, I create a simple layer to interact with the data context via requests, such as &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;fire&lt;/code&gt;, then on top of that, I create a simple text parser so diffrent section in config files can trigger different action in the system, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;selection&amp;quot; : {
    &amp;quot;_&amp;quot;: [
        &amp;quot;sprite/destroy?key=selection&amp;quot;,
        &amp;quot;sprite/do?key=selection&amp;amp;prefab=squads.effect_sprite#color=1,1,1,0&amp;amp;sprite=flash&amp;amp;zoom=1.0&amp;amp;play.flash&amp;amp;done.flash=destroy&amp;quot;,
    ]
},
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>SILP: Simple Individual Line Preprocessor</title>
      <link>http://blog.yjpark.org/blog/2014/04/12/silp-simple-individual-line-preprocessor/</link>
      <pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2014/04/12/silp-simple-individual-line-preprocessor/</guid>
      <description>&lt;h2 id=&#34;why-bother-with-a-preprocessor&#34;&gt;Why bother with a preprocessor?&lt;/h2&gt;

&lt;p&gt;I was quite busy working on our &lt;a href=&#34;http://emberconflict.com/&#34;&gt;RTS game on iPad&lt;/a&gt; for almost a year, we are quite close to our first public version now. It&amp;rsquo;s developed with Unity3d, using uLink as the network library. Created a quite nice data context system on Unity3d, so non-developers can update pure visual part of the system without developers&amp;rsquo; help, will write some entries on it later when got time.&lt;/p&gt;

&lt;p&gt;SILP is a very small side project come from the process working on it. It&amp;rsquo;s a simple language-agnostic preprocessor.&lt;/p&gt;

&lt;p&gt;There are many discussions about whether a programming language should include preprocessor, most people seems agree that preprocessor is too error-prune and sacrifice readability too badly, and there should be seldom cases that an alternative can&amp;rsquo;t be find to replace the preprocessor usage.&lt;/p&gt;

&lt;p&gt;I agree that in most cases we don&amp;rsquo;t need preprocessor though there are several cases that I would like to have a preprocessor in my tool set for cleaner codes or can remove some trivial typing. Here are 2 examples:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Save Day One Summary to Evernote</title>
      <link>http://blog.yjpark.org/blog/2014/01/21/save-day-one-summary-to-evernote/</link>
      <pubDate>Tue, 21 Jan 2014 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2014/01/21/save-day-one-summary-to-evernote/</guid>
      <description>&lt;h2 id=&#34;why-not-just-use-evernote&#34;&gt;Why Not Just Use Evernote?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been using Evernote for several years, which is great, the best features to me are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multi devices synchronization&lt;/li&gt;
&lt;li&gt;High quality app on iOS/Android and OSX&lt;/li&gt;
&lt;li&gt;Very good search in notes (even in the photos)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though lately I found myself write less an less in Evernote, if I&amp;rsquo;m writing something long, then usually I will use MacVim, may copy the text back to Evernote. If I need to write a couple of line, the process to write in Evernote is like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch to Evernote&lt;/li&gt;
&lt;li&gt;Find the note for current day (each day I will have a new note.)&lt;/li&gt;
&lt;li&gt;Go to the end of the note&lt;/li&gt;
&lt;li&gt;Write something&lt;/li&gt;
&lt;li&gt;Switch back&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feels a bit heavy, also there is no information about when I did add the line into the note.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Marmalade Tricks and Tips</title>
      <link>http://blog.yjpark.org/blog/2013/04/14/marmalade-tricks-and-tips/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2013/04/14/marmalade-tricks-and-tips/</guid>
      <description>&lt;p&gt;During the days to develop our first game: &lt;a href=&#34;https://itunes.apple.com/us/app/day-day-birds/id608802879?mt=8&amp;amp;uo=4&#34;&gt;Day Day Birds&lt;/a&gt;, I went through the progress of learning to use Marmalade, generally it&amp;rsquo;s very easy to use, and save me lot of time, though there are some little things that I hoped that I know earlier.&lt;/p&gt;

&lt;h2 id=&#34;stack-size&#34;&gt;Stack Size&lt;/h2&gt;

&lt;p&gt;The game started to crash randomly before I noticed, it&amp;rsquo;s quite hard to debug, especially without the tools in Xcode or other IDEs provide. And it never crash in the simulator, so the debugging is quite awkward, a lot of guess, build, test-run going on.&lt;/p&gt;

&lt;p&gt;When it crashed on iOS device, some information were provided, though full stack trace is not availabe, and the place of crash is not consistent. After 2 or 3 days and nights figihting with this bug, finally found out the root cause, which is very surprising.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Initial Release of s3eBass - Marmalade extension for BASS audio engine</title>
      <link>http://blog.yjpark.org/blog/2012/11/06/initial-release-of-s3ebass-marmalade-extension-for-bass-audio-engine/</link>
      <pubDate>Tue, 06 Nov 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/11/06/initial-release-of-s3ebass-marmalade-extension-for-bass-audio-engine/</guid>
      <description>The audio and music are playing a very important role in games, for our future games, I want them to have good quality of audio and music, e.g. don&amp;rsquo;t use short loop of mp3 music, but something much longer and more dynamic without taking much space. My first thought is to use MIDI+soundfonts or some mod-based music, so I spent some time to try to see the possibility.
There are quite some libraries to support xm playback, though I can&amp;rsquo;t find any Marmalade extensions on the web, in the forum someone mentioned that they made use of FMOD in their game, though there is no code shared, and FMOD is quite expansive.</description>
    </item>
    
    <item>
      <title>Convert Cocos2D Font (BMFont) to Marmalade&#39;s GxFont</title>
      <link>http://blog.yjpark.org/blog/2012/11/05/convert-cocos2d-font-bmfont-to-marmalades-gxfont/</link>
      <pubDate>Mon, 05 Nov 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/11/05/convert-cocos2d-font-bmfont-to-marmalades-gxfont/</guid>
      <description>In 2D games, it&amp;rsquo;s typical to use image based font for UI elements, which can provide better graphic result, fast rendering, and usually smaller then true type fonts (especially if you want to support languages with big character set, e.g. Chinese).
There are quite some tools to generate such font images, I&amp;rsquo;m using bmGlyph as the font generator, it can publish the popular &amp;ldquo;Cocos2d / BMFont&amp;rdquo; format, though it&amp;rsquo;s not directly usable in Marmalade.</description>
    </item>
    
    <item>
      <title>Level Editor Based on IwGame - Introduction</title>
      <link>http://blog.yjpark.org/blog/2012/10/12/level-editor-based-on-iwgame-introduction/</link>
      <pubDate>Fri, 12 Oct 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/10/12/level-editor-based-on-iwgame-introduction/</guid>
      <description>It&amp;rsquo;s been more than a month since my post about the idea of game engine based on Marmalade and IwGame, after the post, spent many hours busy coding, now I&amp;rsquo;ve got the basic level editor up running, I think it&amp;rsquo;s pretty cool, so here are some details about it.
Here is a screenshot of the level editor:
  Level Editor Screen Shot 1   Updates about Original Post Before talking about the level editor, first I want to share some updates about Marmalade and IwGame in the last month.</description>
    </item>
    
    <item>
      <title>OpenGL ES 2.0 Shader in Marmalade</title>
      <link>http://blog.yjpark.org/blog/2012/10/02/opengl-es-2-dot-0-shader-in-marmalade/</link>
      <pubDate>Tue, 02 Oct 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/10/02/opengl-es-2-dot-0-shader-in-marmalade/</guid>
      <description>Marmalade provide good support for writing custom shaders in it, though it&amp;rsquo;s not easy to get all the information to start writing the first shader in my case, here is some information that I gathered during the process.
I decided to only support Open GL 2.0 Shaders in our games, most current devices support it, and as a small team, supporting older devices is a bit hard since we don&amp;rsquo;t have testers for now, also the architect of 2.</description>
    </item>
    
    <item>
      <title>Game Engine Based on Marmalade and IwGame</title>
      <link>http://blog.yjpark.org/blog/2012/08/30/game-engine-based-on-marmalade-and-iwgame/</link>
      <pubDate>Thu, 30 Aug 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/08/30/game-engine-based-on-marmalade-and-iwgame/</guid>
      <description>Since August 2012, 2 developers(including me) and 2 graphic designers come together and started a small game studio to work on some mobile casual games, as the tech lead, I need to choose a development way for our first batch of games.
Our games will be mostly 2D games, might with some 3D charactors, though the scenes or levels will be 2D, I think that&amp;rsquo;s better for the team and the graphic quality of the games.</description>
    </item>
    
    <item>
      <title>PlantUML Plugin for Octopress</title>
      <link>http://blog.yjpark.org/blog/2012/04/30/plantuml-plugin-for-octopress/</link>
      <pubDate>Mon, 30 Apr 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/04/30/plantuml-plugin-for-octopress/</guid>
      <description>What is PlantUML? PlantUML is a component that allows to quickly write:
 sequence diagram, use case diagram, class diagram, activity diagram, component diagram, state diagram object diagram  I really like the idea of writing UML diagram with plain text. Since it&amp;rsquo;s totally plaintext, it&amp;rsquo;s very easy to do diff and version track, also you don&amp;rsquo;t need to do anything about the layout (the text itself looks pretty good too).</description>
    </item>
    
    <item>
      <title>Movable Write Open Sourced</title>
      <link>http://blog.yjpark.org/blog/2012/04/22/movable-write-open-sourced/</link>
      <pubDate>Sun, 22 Apr 2012 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/blog/2012/04/22/movable-write-open-sourced/</guid>
      <description>What is Movable Write Back in 2010, I already had some experiences on iOS development. Did wrote some very simple application to fetch information over HTTP-RPC to a trac instance, and wrote a very simple game with Cocos2D and Box2D. Did spend some time to catch up with the versions or iOS updates and read about the new APIs.
But my feeling was that by only spend small amount of time like it, I can never learn enough to have real experience on it, and I&amp;rsquo;ve been working on Web development for a few years.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.yjpark.org/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/page/about/</guid>
      <description> TODO </description>
    </item>
    
    <item>
      <title>Search Results</title>
      <link>http://blog.yjpark.org/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://blog.yjpark.org/search/</guid>
      <description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ` [outputs] home = [&amp;quot;HTML&amp;quot;, &amp;quot;JSON&amp;quot;] \`</description>
    </item>
    
  </channel>
</rss>