<<<<<<< HEAD
[{"categories":["fsharp","game","tutorial"],"contents":"Have been working on game development for a few years now, making game is indeed quite fun, it shares much with other kind of software development, while it also has its uniqueness. Always wanted to write more on it, though not really have good idea about how to start.\nI\u0026rsquo;ve been working with a couple of game engines, mostly Unity3D, IwGame on Marmalade, Cocos2D, Phaser, created some own frameworks, did experiment with a very simple game engine in Elm as well. Most of them were designed in a similar way, provide similar components and tools. As game developers, we usually don\u0026rsquo;t need to dig much in the game engine itself, but we should have a rather clear understanding about its structure so we can work on it efficiently.\nI\u0026rsquo;ve decided to write some tutorials on game development, a very basic one, in my mind, it\u0026rsquo;s mostly for developers without much experiences with game development, but curious in it. I\u0026rsquo;ll try to share some of my understandings with game development, explain core components of game engine.\n  A 2D Tank Game Current plan is to create a simple 2D topdown tank game in this tutorial, which is easy to understand, and have enough potential complexity as a real game. Not sure about what will eventually be covered, but at least got following ideas that worth writing about\n Map system, the maps will be created with Tiled map editor https://www.mapeditor.org/ GUI for game itself, and for development The tank will have different weapon system, the parameters can be changed by buffs Special abilities that can be added with pickable items on map Enemies can be either tanks or other units, which need basic AI system to act by themself A couple game mechanics to give player purpose, and hopefully fun. Common features for games, such as achievements, charts, tutorials\u0026hellip;  If possible also really want to write about real-time network game development, so ideally this tank game will be multi-player !\nWhy F# ? To make it even more fun for the potential readers, I choose F# as the language for this tutorial, in my opinion, F# is very suitable for learning, it\u0026rsquo;s quite clean and concise, and it support both functional paradigm and object oriented paradigm, also it\u0026rsquo;s a part of DotNet ecosystem, and have full access to all C# libraries. Even if you won\u0026rsquo;t write F# code in the project, learning it can make you a bette developer with C# or other languages.\nI don\u0026rsquo;t plan to write too much about F# itself, there are many good F# tutorials on the web, personally I learned mainly from these two sites\n https://fsharpforfunandprofit.com/ https://fsharp.org/  If you have coding experience in most modern programming language, should not take much time to get familiar with F# syntax, don\u0026rsquo;t need to be expert to follow this tutorial.\nIt\u0026rsquo;s not very practical to take pure functional approach in games, since for better performance, most game engines rely on mutable data structures, it\u0026rsquo;s still possible to do it in pure functional way, at least for smaller games, but here I\u0026rsquo;ll just focus on more traditional object-oriented way, so the ideas in this tutorial can be easily used in most game engines.\nDotNet Core with MonoGame I\u0026rsquo;ll build the tutorial on DotNet Core, which is cross-platform, have a great toolchain.\nI use Visual Studio Code as main IDE, it\u0026rsquo;s really good, the Vim binding is good, after setup a few shortcuts and some configuration, I feel very comfortable with it. The F# support is quite nice, still have a few issues, though mainly nice to use.\n https://dotnet.microsoft.com/ https://code.visualstudio.com/  I choose MonoGame as the low level platform, will create very simple engine on top of it, it\u0026rsquo;s not officially on DotNet Core yet, but a nice developer (cra0zy) did create a core version and put on nuget, I\u0026rsquo;ll use this package in my tutorial\n http://www.monogame.net/ https://www.nuget.org/packages/MonoGame.Framework.DesktopGL.Core/  Was thinking about use Fable and Pixi to create HTML5 games, which will be very cool too, though that approach need to bring more dependencies, and might make the whole process a bit complex for new comers, so I end up with MonoGame.\nThe Plan To make sure my library selection is practical, did create some prototype code, which can load tiled map, show some GUI elements, seems to be solid so far, the codes are at:\n https://github.com/yjpark/FSharpGameTutorial  I\u0026rsquo;ll keep working on the prototype, in the meantime, will start writing the tutorial, will be organized by topics, certain branches will be created for each post, also all the contents will be put into the repository as wiki pages.\n","permalink":"http://blog.yjpark.org/blog/2019/01/02/fsharp-game-tutorial-overview/","tags":null,"title":"F# Game Tutorial Overview"},{"categories":["code","fsharp","fake"],"contents":"I\u0026rsquo;ve been doing quite some F# coding lately, which is really nice, plan to write more about F# later, here I\u0026rsquo;m gonna talk about how to build DotNet projects with Fake.\nI\u0026rsquo;ve put common logic as libraries, then can share them easily across multiple projects, so I need to create NuGet packages. I\u0026rsquo;ve already created more than a dozen individual libraries, it\u0026rsquo;s clear that I need an automated process to manage them, or it\u0026rsquo;s very tedious to keep proper version of libraries in each project.\nI\u0026rsquo;ve did some small work around Fake to make such process, which works quite nicely for me, I plan to write two articles on this, this one will explain the basic structure, and how I use it to manage multiple projects easily, the next one will talk about how to create NuGet package, and how to use a hacky way to do local development easily.\nWhat\u0026rsquo;s Fake and Why Need It. Here is the slogan form Fake\u0026rsquo;s official site: https://fake.build/\nF# MAKE 5 - A DSL FOR BUILD TASKS AND MORE THE POWER OF F# - ANYWHERE - ANYTIME\nIt\u0026rsquo;s a make like system, but instead of a special purpose DSL, it\u0026rsquo;s standard F#, with addition of modules and syntax to make common tasks easily. You can define dependencies of targets (a task in Fake\u0026rsquo;s terminology) very easily with it\u0026rsquo;s ==\u0026gt; operator.\nSince it\u0026rsquo;s standard F#, you can have type check for the make script, and quite nice IDE support in VS Code (haven\u0026rsquo;t tried other IDEs yet). Here is the code snippet from tutorial\n// Targets Target.create \u0026#34;Clean\u0026#34; (fun _ -\u0026gt; Shell.cleanDir buildDir ) Target.create \u0026#34;BuildApp\u0026#34; (fun _ -\u0026gt; !! \u0026#34;src/app/**/*.csproj\u0026#34; |\u0026gt; MSBuild.runRelease id buildDir \u0026#34;Build\u0026#34; |\u0026gt; Trace.logItems \u0026#34;AppBuild-Output: \u0026#34; ) Target.create \u0026#34;Default\u0026#34; (fun _ -\u0026gt; Trace.trace \u0026#34;Hello World from FAKE\u0026#34; ) open Fake.Core.TargetOperators \u0026#34;Clean\u0026#34; ==\u0026gt; \u0026#34;BuildApp\u0026#34; ==\u0026gt; \u0026#34;Default\u0026#34; // start build Target.runOrDefault \u0026#34;Default\u0026#34; Nice and clean, isn\u0026rsquo;t it?\nThough in practice, this kind of simple approach not working for me.\n First of all, don\u0026rsquo;t really like the build targets as string here, which is error prune, and won\u0026rsquo;t benefit from compiler for checks, a union type will be better, though won\u0026rsquo;t fit to fake\u0026rsquo;s API easily, the best approach to me is that no need to define these standard targets manually, should be able to generate them by convention. Secondly, since building several projects can take time, I would like to be able to just operate on specific project if I want to, I can cd to certain folder and run dotnet commands there in a shell, though it\u0026rsquo;s a bit tedious to switch current folder back and forth all the time. Also, most projects are having similar tasks, but with the out-of-box fake, still need to write some boilerplate codes for each project, which is quite tedious.  Introducing Dap.Build So after some time tinkering around it, I\u0026rsquo;ve create a simple package for this, which is on GitHub and NuGet:\n https://github.com/yjpark/dap.build.fsharp\n https://www.nuget.org/packages/dap.build\n  The following example is used in a library project (not open sourced yet, pushed to private nuget ATM), which includes 13 libraries, with just 30 lines of codes, all of them have individual tasks to clean/restore/build/pack/push\u0026hellip; and aggragated tasks to build all, restore all \u0026hellip; and all the targets are with properly dependencies.\n#r \u0026#34;paket: groupref Build //\u0026#34; #load \u0026#34;.fake/build.fsx/intellisense.fsx\u0026#34; open Fake.Core open Fake.IO.Globbing.Operators module NuGet = Dap.Build.NuGet let feed = NuGet.Feed.Create ( server = NuGet.ProGet \u0026#34;https://nuget.yjpark.org/nuget/dap\u0026#34;, apiKey = NuGet.Environment \u0026#34;API_KEY_nuget_yjpark_org\u0026#34; ) let projects = !! \u0026#34;lib/Dap.FlatBuffers/*.csproj\u0026#34; ++ \u0026#34;src/Fable.Dap.Prelude/*.fsproj\u0026#34; ++ \u0026#34;src/Dap.Prelude/*.fsproj\u0026#34; ++ \u0026#34;src/Fable.Dap.Context/*.fsproj\u0026#34; ++ \u0026#34;src/Dap.Context/*.fsproj\u0026#34; ++ \u0026#34;src/Fable.Dap.Platform/*.fsproj\u0026#34; ++ \u0026#34;src/Dap.Platform/*.fsproj\u0026#34; ++ \u0026#34;src/Fable.Dap.WebSocket/*.fsproj\u0026#34; ++ \u0026#34;src/Dap.WebSocket/*.fsproj\u0026#34; ++ \u0026#34;src/Fable.Dap.Remote/*.fsproj\u0026#34; ++ \u0026#34;src/Dap.Remote/*.fsproj\u0026#34; ++ \u0026#34;src/Fable.Dap.Dsl/*.fsproj\u0026#34; ++ \u0026#34;src/Dap.Archive/*.fsproj\u0026#34; NuGet.createAndRun NuGet.release feed project This example use paket to manage packages, need the following snippet in paket.dependencies\ngroup Build source https://www.nuget.org/api/v2 storage: none framework: netstandard2.0 nuget Dap.Build  Full list of targets are:\nThe following targets are available: Build - Build 13 Projects Clean - Clean 13 Projects Dap.Archive:Build - Build Dap.Archive Dap.Archive:Clean - Clean Dap.Archive Dap.Archive:Fetch - Fetch Dap.Archive Dap.Archive:Inject - Inject Dap.Archive Dap.Archive:Pack - Pack Dap.Archive Dap.Archive:Push - Push Dap.Archive Dap.Archive:Recover - Recover Dap.Archive Dap.Archive:Restore - Restore Dap.Archive Dap.Context:Build - Build Dap.Context Dap.Context:Clean - Clean Dap.Context Dap.Context:Fetch - Fetch Dap.Context Dap.Context:Inject - Inject Dap.Context Dap.Context:Pack - Pack Dap.Context Dap.Context:Push - Push Dap.Context Dap.Context:Recover - Recover Dap.Context Dap.Context:Restore - Restore Dap.Context Dap.FlatBuffers:Build - Build Dap.FlatBuffers Dap.FlatBuffers:Clean - Clean Dap.FlatBuffers Dap.FlatBuffers:Fetch - Fetch Dap.FlatBuffers Dap.FlatBuffers:Inject - Inject Dap.FlatBuffers Dap.FlatBuffers:Pack - Pack Dap.FlatBuffers Dap.FlatBuffers:Push - Push Dap.FlatBuffers Dap.FlatBuffers:Recover - Recover Dap.FlatBuffers Dap.FlatBuffers:Restore - Restore Dap.FlatBuffers Dap.Platform:Build - Build Dap.Platform Dap.Platform:Clean - Clean Dap.Platform Dap.Platform:Fetch - Fetch Dap.Platform Dap.Platform:Inject - Inject Dap.Platform Dap.Platform:Pack - Pack Dap.Platform Dap.Platform:Push - Push Dap.Platform Dap.Platform:Recover - Recover Dap.Platform Dap.Platform:Restore - Restore Dap.Platform Dap.Prelude:Build - Build Dap.Prelude Dap.Prelude:Clean - Clean Dap.Prelude Dap.Prelude:Fetch - Fetch Dap.Prelude Dap.Prelude:Inject - Inject Dap.Prelude Dap.Prelude:Pack - Pack Dap.Prelude Dap.Prelude:Push - Push Dap.Prelude Dap.Prelude:Recover - Recover Dap.Prelude Dap.Prelude:Restore - Restore Dap.Prelude Dap.Remote:Build - Build Dap.Remote Dap.Remote:Clean - Clean Dap.Remote Dap.Remote:Fetch - Fetch Dap.Remote Dap.Remote:Inject - Inject Dap.Remote Dap.Remote:Pack - Pack Dap.Remote Dap.Remote:Push - Push Dap.Remote Dap.Remote:Recover - Recover Dap.Remote Dap.Remote:Restore - Restore Dap.Remote Dap.WebSocket:Build - Build Dap.WebSocket Dap.WebSocket:Clean - Clean Dap.WebSocket Dap.WebSocket:Fetch - Fetch Dap.WebSocket Dap.WebSocket:Inject - Inject Dap.WebSocket Dap.WebSocket:Pack - Pack Dap.WebSocket Dap.WebSocket:Push - Push Dap.WebSocket Dap.WebSocket:Recover - Recover Dap.WebSocket Dap.WebSocket:Restore - Restore Dap.WebSocket Fable.Dap.Context:Build - Build Fable.Dap.Context Fable.Dap.Context:Clean - Clean Fable.Dap.Context Fable.Dap.Context:Fetch - Fetch Fable.Dap.Context Fable.Dap.Context:Inject - Inject Fable.Dap.Context Fable.Dap.Context:Pack - Pack Fable.Dap.Context Fable.Dap.Context:Push - Push Fable.Dap.Context Fable.Dap.Context:Recover - Recover Fable.Dap.Context Fable.Dap.Context:Restore - Restore Fable.Dap.Context Fable.Dap.Dsl:Build - Build Fable.Dap.Dsl Fable.Dap.Dsl:Clean - Clean Fable.Dap.Dsl Fable.Dap.Dsl:Fetch - Fetch Fable.Dap.Dsl Fable.Dap.Dsl:Inject - Inject Fable.Dap.Dsl Fable.Dap.Dsl:Pack - Pack Fable.Dap.Dsl Fable.Dap.Dsl:Push - Push Fable.Dap.Dsl Fable.Dap.Dsl:Recover - Recover Fable.Dap.Dsl Fable.Dap.Dsl:Restore - Restore Fable.Dap.Dsl Fable.Dap.Platform:Build - Build Fable.Dap.Platform Fable.Dap.Platform:Clean - Clean Fable.Dap.Platform Fable.Dap.Platform:Fetch - Fetch Fable.Dap.Platform Fable.Dap.Platform:Inject - Inject Fable.Dap.Platform Fable.Dap.Platform:Pack - Pack Fable.Dap.Platform Fable.Dap.Platform:Push - Push Fable.Dap.Platform Fable.Dap.Platform:Recover - Recover Fable.Dap.Platform Fable.Dap.Platform:Restore - Restore Fable.Dap.Platform Fable.Dap.Prelude:Build - Build Fable.Dap.Prelude Fable.Dap.Prelude:Clean - Clean Fable.Dap.Prelude Fable.Dap.Prelude:Fetch - Fetch Fable.Dap.Prelude Fable.Dap.Prelude:Inject - Inject Fable.Dap.Prelude Fable.Dap.Prelude:Pack - Pack Fable.Dap.Prelude Fable.Dap.Prelude:Push - Push Fable.Dap.Prelude Fable.Dap.Prelude:Recover - Recover Fable.Dap.Prelude Fable.Dap.Prelude:Restore - Restore Fable.Dap.Prelude Fable.Dap.Remote:Build - Build Fable.Dap.Remote Fable.Dap.Remote:Clean - Clean Fable.Dap.Remote Fable.Dap.Remote:Fetch - Fetch Fable.Dap.Remote Fable.Dap.Remote:Inject - Inject Fable.Dap.Remote Fable.Dap.Remote:Pack - Pack Fable.Dap.Remote Fable.Dap.Remote:Push - Push Fable.Dap.Remote Fable.Dap.Remote:Recover - Recover Fable.Dap.Remote Fable.Dap.Remote:Restore - Restore Fable.Dap.Remote Fable.Dap.WebSocket:Build - Build Fable.Dap.WebSocket Fable.Dap.WebSocket:Clean - Clean Fable.Dap.WebSocket Fable.Dap.WebSocket:Fetch - Fetch Fable.Dap.WebSocket Fable.Dap.WebSocket:Inject - Inject Fable.Dap.WebSocket Fable.Dap.WebSocket:Pack - Pack Fable.Dap.WebSocket Fable.Dap.WebSocket:Push - Push Fable.Dap.WebSocket Fable.Dap.WebSocket:Recover - Recover Fable.Dap.WebSocket Fable.Dap.WebSocket:Restore - Restore Fable.Dap.WebSocket Fetch - Fetch 13 Projects Inject - Inject 13 Projects Pack - Pack 13 Projects Push - Push 13 Projects Recover - Recover 13 Projects Restore - Restore 13 Projects  I am really happy with it, can do most operation easily. The nuget related feature is very nice, I didn\u0026rsquo;t find much information about how other developers work with nugets, what commands to pack and push them, currently Dap.Build support both nuget.org and ProGit, will have another post on this part later.\nThe missing part is auto complete for targets, though since I\u0026rsquo;m using fish, it\u0026rsquo;s command history can replace auto completion mostly, so this is not an urgent feature to me.\n","permalink":"http://blog.yjpark.org/blog/2018/11/27/build-dotnet-projects-with-fake/","tags":null,"title":"Build DotNet Projects with Fake"},{"categories":["code","fsharp","dap"],"contents":"In the last few months, I\u0026rsquo;ve created an actor frameworks in which each actors is in functional reactive way in F#.\nBasically each actor is created with the Elm Architecture, everything is strong typed, can be run on Dot Net Core, or in browser with javascript generated by Fable, also can be run on mobile or desktop devices with Xamarin or Dot Net.\nIt costed me much time and efforts to get it to current state, learned a lot along the way, will try to write something before I forget the details.\nSome Background (Feel Free to Skip) Back in March, I started a new projects that needs server side logic and web or native apps as clients.\nMy first attempt was to tweak the server side framework that I used on games before for it. It was my dap context in C# running on top of Orleans actor framework. Orleans works purely in async way as an actor system, though my libs was originally used in games, and was mainly in sync mode, so I ended us have some hacky solution to mix them together, in the game usage it seems to be fine, didn\u0026rsquo;t caused me much problems. Though the new project involves many external HTTP and WebSocket access, so the framework gets in the way, may the code messy with some nasty delay to link sync and async sides together.\nAlso there are quite some complex data structures in it as well, I tried to use the metadata code generator (use Microsoft Bond as data definition language) I created for game dev with it as well, though not really happy either, for games\u0026rsquo; metadata, there are a few rather complex data structures that may have many instances, and the data type itself usually are combined by simple types. Though in the new project, the logic is quite complex, and the number of data structure is quite big, it\u0026rsquo;s very annoying if I want to create Bond definitions for everything.\nSo after a couple of week patching the exist framework, and fighting with some nasty bugs with the patching, and need more patchs on top of it, I decided to take a new approach.\nAt first, I planned to take full Orleans approach, the problem was that being an (virtual) actor framework, I still need to find my way to organize these actors together in a nice way. Also being a server-side framework, it can not really help for the client side, though I really don\u0026rsquo;t want 2 languages if possible.\nSo it become clear that I need some framework again, pure async one to work nicely with Orleans and GUI apps, easy to access external services through HTTP and WebSocket, single language for both client and server side.\nWhy F# I did use Elm in some front-end small projects in last couple of years, which is great, use Records and Unions can describe data structures very nicely, and refactoring with Elm feels so good. Though server-side Elm is missing ATM, did some hacky way to render HTML pages with it running in node, though it\u0026rsquo;s not ready for heavy logic yet.\nI also did some experiments with Purescript before, which is very similar to Haskell, transcompiled to javascript, so can be run on browsers, nodejs, and react-native. The language is well-designed, harder to learn compared to Elm. Seems Purescript is even less popular than Elm, so it might be a risky choice, also running the backend on nodejs is not ideal to me.\nDot Not Core is really nice, Orleans is very nice too, I really want to keep work on top of them, so I did the framework in F# eventually.\nI\u0026rsquo;ve been reading on F# before, which seems a compromised design back then, it\u0026rsquo;s not a pure function language, support complete Object-Oriented as well, also can use mutable values if you wanted to. on the other hand, these design choices make it quite practical, and can took advantage of the much bigger C# libraries when need to integrate with third-parties.\nFable is a transcompiler for F# to generate javascript codes, then it can be run in browser or react native apps. It\u0026rsquo;s quite nice, there are certain limitations and some small things to be considered, but after the development environment been setup properly, it works as expected.\nAnother bonus to me is that I am used to generics in C#, generics in F# is as powerful, and actual codes can be much shorter.\nElmish (Functional Reactive in F#) The Elm Architecture is really nice way to write logic, the idea is that you describe type of model and message, the running is just a serious of messages received and versions of models according to these messages.\nIn ideal situation the model should be immutable, then it\u0026rsquo;s quite easy to get serialized, which can leads to powerful features such as persistent app states, and time travel debugger.\nF# community had created similar approach as Elmish, which is quite simple actually, was created to be used in Fable, then refactored to be used in normal F# as well.\nThe essential idea is that logic will check incoming message, create a new model based on the current one, any might create new messages that will be send into itself later. Of course it\u0026rsquo;s much more complex in real world usage, though technically it\u0026rsquo;s mostly about how an update is implemented, the method signature looks like this:\ntype Update\u0026lt;\u0026#39;model, \u0026#39;msg\u0026gt; = \u0026#39;msg -\u0026gt; \u0026#39;model -\u0026gt; \u0026#39;model * Cmd\u0026lt;\u0026#39;msg\u0026gt; Actors and Runtime The Elmish approach did imply an actor like way, messages can be received one-by-one, and sending messages should be the only way to interact with the inner system, which is basically an actor.\nIn Elm\u0026rsquo;s cases, the whole application is the only actor, use subscriptions and system libraries (such as HTTP accessing) to generate messages that send back in the future.\nElmish provide simple implementation with F#\u0026rsquo;s MailboxProcessor, you can create multiple programs if you want, it provide view rendering to show stuffs in browsers (or react native, or other GUI system such as Xamarin Forms). It\u0026rsquo;s also usually the only actor.\nOn the contrary, actor framework normally have many actors, and usually not having GUI elements with them.\nMy tasks here is to create a runtime for my actors. which will handle the message passing, and state management, also optional GUI integration.\nI did some abstraction with the runtime, so it\u0026rsquo;s implementation can be on top of different platforms, currently I\u0026rsquo;ve have one with MailboxProcessor, later will add Orleans and maybe experiment with ProtoActor later.\nAlso did some abstraction with the runner object, so I can organize actor-specific helpers easily, e.g. one actor might want to access or create other actors, one way is to make this a system wise singleton, though that means it\u0026rsquo;s not easy to isolate actors from each other. another example is loggers, I want each actor to have its own logger, so the code need someway to access the logger.\nSo my update looks like:\ntype Update\u0026lt;\u0026#39;runner, \u0026#39;model, \u0026#39;msg\u0026gt; = \u0026#39;runner -\u0026gt; \u0026#39;msg -\u0026gt; \u0026#39;model -\u0026gt; \u0026#39;model * Cmd\u0026lt;\u0026#39;msg\u0026gt; This is the biggest difference between my framework and Elmish, also this make the implementation much harder, I feel it worth the effort, will have more details on this topic later.\nWhere is The Code? It\u0026rsquo;s not ready yet, it\u0026rsquo;s working, can be used as nuget packages (on private source now), though not yet ready to be open-sourced, currently still in the quick iteration mode.\nWill write more blogs first, then when it\u0026rsquo;s stable enough, will probably make it public.\n","permalink":"http://blog.yjpark.org/blog/2018/08/12/functional-reactive-actors-in-fsharp/","tags":null,"title":"Functional Reactive Actors in F#"},{"categories":["code","doc"],"contents":"Back in 2013, I was working on my first Unity3d game, it\u0026rsquo;s a simplified RTS game for tablets, the first version took us (3 developers including me) about 2 years to hit the iOS app store, did learned quite some lessons during the process, wanted to write some blogs for a long time, though never really did.\nWe released the game at 2015, but the game wasn\u0026rsquo;t successful commercially, and our small start-up company run out of money. I was still making games after that, planned to reuse some lib codes created along the way. Then I realised that the quality of these libs can be improved much (due to time pressure, and lack of experiences)\nThe most useful module was a custom data context class I wroted, it was rather simple, just an object with a bunch of properties, and event channels, both can be watched, e.g. when a property been set to a new value, all listeners will be triggered by a callback. On top of these properties and channels, I create a simple layer to interact with the data context via requests, such as get or set or fire, then on top of that, I create a simple text parser so diffrent section in config files can trigger different action in the system, e.g.\n\u0026quot;selection\u0026quot; : { \u0026quot;_\u0026quot;: [ \u0026quot;sprite/destroy?key=selection\u0026quot;, \u0026quot;sprite/do?key=selection\u0026amp;prefab=squads.effect_sprite#color=1,1,1,0\u0026amp;sprite=flash\u0026amp;zoom=1.0\u0026amp;play.flash\u0026amp;done.flash=destroy\u0026quot;, ] },  The first command will destroy the old selection sprite, the second command will create a new one (these objects are managed by a pool, so performance won\u0026rsquo;t be affected), then change it\u0026rsquo;s color, sprite, zoom value, then fire an event play.flash which is an animation created by HoTween in the prefab, then when the event done.flash been triggered (when the tween finished), destroy itself.\nThis is used in our effect system, in the code, a bunch of entry points were defined, when certain things happened, the logic will check according section in the config file, then parse these commands and run them through the request system, which operates on the data contexts eventually.\nThis works rather smoothly, so when non-dev members wants to tweak effects, they can just create prefabs, and writing commands to operate these prefabs, no code writing envolved, it\u0026rsquo;s a small challenge for them to learn and master the syntax, though after some documents and practice, the art works and dev works were de-coupled properly.\nLater the same system was used for GUI elements, in slightly different way, and also been used for charactor\u0026rsquo;s properties storage, though quite some boilerplate codes was written to make things work, the parsing logic became quite messy after adding more features, such as delayed execution, relative value changes\u0026hellip;\nWhat\u0026rsquo;s Dap So I was working on the second version of my library codes, C# version, mainly used in Unity3d, though much of the codes are not limited to Unity3d, and can been used with DotNet, Mono, and Xamarin as well.\nDap stands for Distributed Application Platform, the plan is to create conventions, api, and libraries for distributed applications, in my mind, it means:\n Multiple platform support Multiple devices at the same time Real-time communication and colabration from these devices  This is rather big scope, when I started thinking about this, was mainly focus on application dev, though much of the ideas are suitable for game dev as well, especially for network games.\nWhat\u0026rsquo;s Dap Context, Aspect Dap is following ECS (Entity Component System), has following core concepts:\n Context, it\u0026rsquo;s the entity in Dap, a little like Unity\u0026rsquo;s GameObject, though you can create subclass of Contexts. Aspect, it\u0026rsquo;s the component in Dap, everything related to a Context most likely are aspects The system in Dap can be done by either subclass from context, or with manners (special Aspects designed for sharing logic in defferent type of Entities) Env, it\u0026rsquo;s the runtime environment of the Dap system, there is only one env instance in the system, which is holding all the contexts  Aspects are grouped to certain different categories in Context, these are the basic ones for all Contexts (you can also add new categories to subclasses as well):\nProperties Holding values, which can be watched, when the valued been changed, all listeners will be notified. The value can be serialized, so can be saved to files or transfered over network.\nYou can also provide checkers on the value, so can implement validation or authentication to the underlining values.\nChannels Channels are used to fire events, which can be watched as well, each event can have a data with it.\nNote: here the data is a simple serialization format, support basic types.\nHandlers Handlers are used for request handling, requests can be sent to handlers, they will check the request data, do according operation, and then return a result.\nBus Bus is for more loose notification, e.g. since you can only listen to a channel when it\u0026rsquo;s already created, there is a timing issue to listen to future channels. Bus is just a simple message, with no data with it. You can also check whether a certain message have been sent as well.\nVars Wrapping for internal values or runtime values (not able to be serialized)\nManners Behaviors that can be added to multiple kind of contexts, e.g. Tickable is implemented as a Manner, means will listen to system\u0026rsquo;s tick channel, create a own tick channel, and fire a tick event accordingly.\nAlso network logic are created as Manner, so they can be added to existing classes, so by following some simple rules (mostly naming conventions), a single player game can be turned into a network one by adding proper manners at client and server sides, the code changes should be rather small.\nWhere\u0026rsquo;s the Code The core lib is available at github, there is no documents at the moment, and extra libraries (not open sourced yet) are needed to use it properly in real project, but the source codes can be used for understanding the concepts, so if you are interested, feel free to clone or fork:\n https://github.com/angeldnd/dap.core.csharp ","permalink":"http://blog.yjpark.org/blog/2017/01/07/introduction-to-dap-context/","tags":null,"title":"Introduction to Dap Context"},{"categories":["code","tool","silp"],"contents":"Why bother with a preprocessor? I was quite busy working on our RTS game on iPad for almost a year, we are quite close to our first public version now. It\u0026rsquo;s developed with Unity3d, using uLink as the network library. Created a quite nice data context system on Unity3d, so non-developers can update pure visual part of the system without developers\u0026rsquo; help, will write some entries on it later when got time.\nSILP is a very small side project come from the process working on it. It\u0026rsquo;s a simple language-agnostic preprocessor.\nThere are many discussions about whether a programming language should include preprocessor, most people seems agree that preprocessor is too error-prune and sacrifice readability too badly, and there should be seldom cases that an alternative can\u0026rsquo;t be find to replace the preprocessor usage.\nI agree that in most cases we don\u0026rsquo;t need preprocessor though there are several cases that I would like to have a preprocessor in my tool set for cleaner codes or can remove some trivial typing. Here are 2 examples:\nCommon Import Statements In each project, most likely there will be some very common import statements that every source file want to include, e.g. logging and other utilities. In dynamic languages such as Python, it\u0026rsquo;s not hard to inject them into the global namespace in some bootstrap functions, though in Java or Go it\u0026rsquo;s not quite possible, each file has to have these lines.\nSince Go support and recommend import from a git url, this is a bit more annoying. Here is a quick example.\nimport \u0026quot;github.com/golang/glog\u0026quot;  It\u0026rsquo;s both longer to type, and harder to change in the future, what if we need to change something in the source codes of the library? We can fork the source repository, and working on it, though we have to go over every source file and change the url of the import. It\u0026rsquo;s not too hard with some tools like sed, though it\u0026rsquo;s a bit ugly and fragile to me since we have to replace in text level.\nOf course with just one import, it\u0026rsquo;s not a big problem, though in practice, it\u0026rsquo;s very easy to have several imports for every file, and quite some other imports grouped by file types (e.g. services that need db library, services that provide RPC calls\u0026hellip;)\nDuplicate Codes Some time, it\u0026rsquo;s not very easy to use usual way to remove duplicated codes, here is an example in Unity3d, it\u0026rsquo;s a piece of our codes to check whether a user is already online in the system.\nprivate IEnumerator SaveArmyAsync(LobbyClient client, ArmyInfo armyInfo) { float startTime = Monitor.AddStartedEvent(LobbyMonitor.ARMY_SAVE_ARMY); string error = LobbyNetError.ACCOUNT_ONLINE_WITH_OTHER_DEVICE; IEnumerator checkOnline = client.CheckOnlinePlayer(_OnlinePlayerInfoBucket, () =\u0026gt; { error = null; }); while (checkOnline.MoveNext()) yield return checkOnline.Current; if (error != null) { LobbyRPCUtils.SendNak(this, client, LobbyMonitor.ARMY_SAVE_ARMY, \u0026quot;RPC_SaveArmyFailed\u0026quot;, error); yield break; }  The logic here may not be very clear without full context, basically what it did is to create a event and send to our istatd server, save the time into startTime, calling client.CheckOnlinePlayer() to check whether the user is logged in the system from other device, and calling LobbyRPCUtils.SendNak() to send a RPC call to the client if the user is already online.\nThe same structure is almost identical for all our server side RPC functions, only difference are the event id and RPC name, in this case LobbyMonitor.ACCOUNT_LOGIN and RPC_OnLoginFailed. As you can see, common functions are created to do most logic. But it\u0026rsquo;s not very easy to make the whole pattern into a shorter format, because we have to follow the coroutine style here.\nFor example, line 3 ~ 7 are running client.CheckOnlinePlayer() in the coroutine way, and line 9 ~ 12 are handling the error case. We can\u0026rsquo;t yield break in client.CheckOnlinePlayer() since it will only break it\u0026rsquo;s own coroutine, instead of the outer one here.\nPassing callback function into client.CheckOnlinePlayer() can solve the error handling, though still need the first trick, and the code will be less readable comparing with this way (using the callback style in many other places though).\nIf we are using a language supporting preprocessor, then we can easily create a macro here to do the duplicated works, though not possible in C#, until I created the SILP project, Our only option was just copy-paste.\nSo What is SILP? After we have more RPC calls in the system sharing the similar code structure shown in last example, I decided to do something to improve it. Solve it in the language scope seems not a good option to me (only possible approach I figured possible was to wrap coroutine somehow and use some customized data structure to provide cleaner interface, both heavy and unnecessary), and I was thinking about finding a language-agnostic preprocessor for a while, so I spent some time to look for a existing project that I can use.\nAfter a quick research, was a bit disappointed with the result, most of the preprocessors either are heavily limited to one language or provide way too much power than I need (so it\u0026rsquo;s harder to learn and use). It\u0026rsquo;s very clear that all I need is just a simple text substitution tools, so I created SILP and spend a whole day on it, the result is quite satisfying.\nHow Simple SILP Is? There is zero logic in the syntax, currently all supported feature is parameter substitution in the template, and unless super useful, no complex feature will be added in the future.\nSILP only handle individual line as well. All generated lines will be put back to the original file after the line with SILP syntax.\nWhen Should Use SILP?  Standard code block that\u0026rsquo;s hard to be eliminated by regular technique. Some small piece of logic that you don\u0026rsquo;t want to wrap in a function and the language doesn\u0026rsquo;t support inline functions.  When Should NOT Use SILP?  If you can remove duplicated code in language supported way. The logic is not standard, and using SILP make them harder to read.  Full Example With SILP After implementing SILP, here is how I can remove the duplicated codes in the previous online player checking logic, here is the silp_cs.md file:\n# LOBBY_SERVER_RPC_CHECK_ONLINE_PLAYER(eventId, nakRPC) # ```C# float startTime = Monitor.AddStartedEvent(${eventId}); string error = LobbyNetError.ACCOUNT_ONLINE_WITH_OTHER_DEVICE; IEnumerator checkOnline = client.CheckOnlinePlayer(_OnlinePlayerInfoBucket, () =\u0026gt; { error = null; }); while (checkOnline.MoveNext()) yield return checkOnline.Current; if (error != null) { LobbyRPCUtils.SendNak(this, client, ${eventId}, ${nakRPC}, error); yield break; } ```  The format is actually a valid github flavored markdown, only supported syntax is the h1 title (has to be like # macro(param1, param2) #), and code block.\nHere is the rendered image with the above example by Marked, looks nice isn\u0026rsquo;t it? (note that you need to toggle the convert fenced code block option)\n  View By Marked   Now all the RPC calls will be like this:\nprivate IEnumerator SaveArmyAsync(LobbyClient client, ArmyInfo armyInfo) { //SILP: LOBBY_SERVER_RPC_CHECK_ONLINE_PLAYER(LobbyMonitor.ARMY_SAVE_ARMY, \u0026quot;RPC_SaveArmyFailed\u0026quot;) float startTime = Monitor.AddStartedEvent(LobbyMonitor.ARMY_SAVE_ARMY); //__SILP__ //__SILP__ string error = LobbyNetError.ACCOUNT_ONLINE_WITH_OTHER_DEVICE; //__SILP__ IEnumerator checkOnline = client.CheckOnlinePlayer(_OnlinePlayerInfoBucket, () =\u0026gt; { //__SILP__ error = null; //__SILP__ }); //__SILP__ while (checkOnline.MoveNext()) yield return checkOnline.Current; //__SILP__ if (error != null) { //__SILP__ LobbyRPCUtils.SendNak(this, client, LobbyMonitor.ARMY_SAVE_ARMY, \u0026quot;RPC_SaveArmyFailed\u0026quot;, error); //__SILP__ yield break; //__SILP__ } //__SILP__  All lines end with //__SILP__ are generated automatically, and can be regenerated with SILP, so if you want to adjust the logic in the future, should be very easy to do, and create a new RPC call is trivial as well, only need to write one line, and run SILP again (current manually, though it should be easy to make it automatically)\nWhat\u0026rsquo;s Next Here is the repository: https://github.com/yjpark/silp\nIt\u0026rsquo;s also available through PyPi, you can install with\npip install silp  Will first finish the documentation for what\u0026rsquo;s working now, maybe adding more languages to default setting (mainly just how to add the special comments).\nMaybe put the language configuration into the silp_xx.md file as well, though it might be more complicate to use and error-prone, so not sure about how to do this yet.\nThere are some interesting possibilities with editors here, e.g. set up code folding for SILP line and the generated line.\n","permalink":"http://blog.yjpark.org/blog/2014/04/12/silp-simple-individual-line-preprocessor/","tags":null,"title":"SILP: Simple Individual Line Preprocessor"},{"categories":["code","tool"],"contents":"Why Not Just Use Evernote? I\u0026rsquo;ve been using Evernote for several years, which is great, the best features to me are:\n Multi devices synchronization High quality app on iOS/Android and OSX Very good search in notes (even in the photos)  Though lately I found myself write less an less in Evernote, if I\u0026rsquo;m writing something long, then usually I will use MacVim, may copy the text back to Evernote. If I need to write a couple of line, the process to write in Evernote is like this:\n Switch to Evernote Find the note for current day (each day I will have a new note.) Go to the end of the note Write something Switch back  Feels a bit heavy, also there is no information about when I did add the line into the note.\nDay One Since 2013 I started to use Day One, which is a very beautiful application(has OSX and iOS versions) for note taking. Here is the reasons that I like it:\n Quick note adding widget in menubar, which can be triggered by a global shortcut Markdown format, rendered very nicely as well. Dropbox synchronization, iCloud supported as well. Every note has a timestamp. Calendar view for all the notes. Look and feels very nice.  Then the process to add a quick note will be:\n Using the global shortcut. Type, then Cmd-Enter to save it.  It\u0026rsquo;s much more light-weigh comparing to the Evernote way.\nWhy Not Just Use Day One? One major missed part in Day One is the lack of Android support, also the search is not as good as evernote, another problem is that you can not see all the notes in one day at once, you have to mouse over each item to see the whole content, which is a bit annoying IMO.\nDayone 2 Evernote So I wrote a very simple script to export Day One entries as a summary note in Evernote.\nTimestamps will be added in front of each entry.\nThe summary note will look like:\n[00:25] One note written in Day One [19:17] Another note in Day One ...  They will not be converted to HTML format, since I prefer to keep the plain text format in Evernote, and MarkDown notes looks very nice as plain text to me.\nNote that since I used the applescript to save the note, it only works on OSX. Also there is some tricks to keep track of the last saved date. Check the README in the repository for more informations.\nThe code is: https://github.com/yjpark/dayone2evernote\n","permalink":"http://blog.yjpark.org/blog/2014/01/21/save-day-one-summary-to-evernote/","tags":null,"title":"Save Day One Summary to Evernote"},{"categories":"marmalade","contents":"During the days to develop our first game: Day Day Birds, I went through the progress of learning to use Marmalade, generally it\u0026rsquo;s very easy to use, and save me lot of time, though there are some little things that I hoped that I know earlier.\nStack Size The game started to crash randomly before I noticed, it\u0026rsquo;s quite hard to debug, especially without the tools in Xcode or other IDEs provide. And it never crash in the simulator, so the debugging is quite awkward, a lot of guess, build, test-run going on.\nWhen it crashed on iOS device, some information were provided, though full stack trace is not availabe, and the place of crash is not consistent. After 2 or 3 days and nights figihting with this bug, finally found out the root cause, which is very surprising.\nIt\u0026rsquo;s caused by stack overflow, since Marmalade is designed to support many different mobile devices, many of them are with limited hardware, the stack size is 32k by default, since I\u0026rsquo;m having a LUA layer, and also allocated some string buffer in stack for convinience, it got overflowed, so caused the random crash.\nThere is actually a forum thread mentioned this.\nSince I only plan to support the modern devices (iPhone, iPad, maybe Android as well), gave it a much bigger setting fix the crash perfectly.\n [s3e] SysStackSize=4000000  Accelerate framework I\u0026rsquo;m using libBass for the audio playpack, for some reason it require Accelarate frame under iOS to compile. so I add iphone-link-opts=\u0026quot;-weak_framework Accelerate\u0026quot; into the mkf file.\nFor unknown reason, the Accelerate.framework stub in /Developer/Marmalade/6.2/s3e/deploy/plugins/iphone/sys_libs/System/Library/Frameworks/Accelerate.frameworks/Accelerate is not working, might be the nested frameworks inside it.\nNot really understand how the stub frameworks work in Marmalade, seems a smart way to use the system\u0026rsquo;s SDK libraries, though a hacky solution make it compiled.\nCurrent fix is to copy the framework from /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/System/Library/Frameworks/Accelerate.framework. Not sure whether there is side effects.\ncp -r /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/System/Library/Frameworks/Accelerate.framework/* /Developer/Marmalade/6.2/s3e/deploy/plugins/iphone/sys_libs/System/Library/Frameworks/Accelerate.framework/  iOS device crash report This page explains how to read the crash report nicely, also don\u0026rsquo;t forget to save the mapping file of the version you submitted to app store, otherwise you will have no idea to debug when get crash logs from Apple.\nHow to map iPhone crash log addressed to your code\nSome mkb settings deployments { name=\u0026quot;Slingshot\u0026quot; version=1.0 [\u0026quot;Default\u0026quot;] iphone-provisioning-profile=\u0026quot;data/provisions/DayDayBirdsDev.mobileprovision\u0026quot; iphone-enable-4inch-retina=1 iphone-no-splash=1 iphone-prerendered-icon=1 iphone-icon=\u0026quot;data/icon/Icon.png\u0026quot; iphone-icon-high-res=\u0026quot;data/icon/Icon@2x.png\u0026quot; iphone-icon-ipad=\u0026quot;data/icon/Icon-72.png\u0026quot; iphone-icon-ipad-high-res=\u0026quot;data/icon/Icon-72@2x.png\u0026quot; iphone-icon-ipad-search=\u0026quot;data/icon/Icon-Small-50.png\u0026quot; iphone-icon-ipad-search-high-res=\u0026quot;data/icon/Icon-Small-50@2x.png\u0026quot; iphone-icon-settings=\u0026quot;data/icon/Icon-Small.png\u0026quot; iphone-icon-settings-high-res=\u0026quot;data/icon/Icon-Small@2x.png\u0026quot; #Android android-icon=\u0026quot;data/android/icon/icon_48.png\u0026quot; android-icon-gallery=\u0026quot;data/android/icon/icon_170.png\u0026quot; android-icon-hdpi=\u0026quot;data/android/icon/icon_72.png\u0026quot; android-icon-ldpi=\u0026quot;data/android/icon/icon_36.png\u0026quot; android-icon-mdpi=\u0026quot;data/android/icon/icon_48.png\u0026quot; }  iphone-enable-4inch-retina=1 enabled the iPhone 5 wide screen mode.\nSome app.icf settings DispFixRot=\u0026quot;Landscape\u0026quot; IOSDispScaleFactor=200 {ID=IPHONE \u0026quot;iPad1,1\u0026quot;} [s3e] memSize = 30000000 SysStackSize=1000000 {ID=IPHONE \u0026quot;iPad2,1\u0026quot;,\u0026quot;iPad2,2\u0026quot;,\u0026quot;iPad2,3\u0026quot;,\u0026quot;iPad2,4\u0026quot;,\u0026quot;iPad2,5\u0026quot;,\u0026quot;iPad2,6\u0026quot;,\u0026quot;iPad2,7\u0026quot;} [s3e] memSize = 64000000 {ID=IPHONE \u0026quot;iPod1,1\u0026quot;,\u0026quot;iPod2,1\u0026quot;,\u0026quot;iPod3,1\u0026quot;,\u0026quot;iPod4,1\u0026quot;,\u0026quot;iPhone1,1\u0026quot;,\u0026quot;iPhone1,2\u0026quot;,\u0026quot;iPhone2,1\u0026quot;} [s3e] memSize = 34000000 SysStackSize=1000000 {ID=IPHONE \u0026quot;iPod5,1\u0026quot;,\u0026quot;iPhone3,1\u0026quot;,\u0026quot;iPhone3,2\u0026quot;,\u0026quot;iPhone4,1\u0026quot;,\u0026quot;iPhone4,2\u0026quot;} [s3e] memSize = 64000000 {OS=ANDROID} [s3e] memSize = 80000000 {OS=OSX} [s3e] memSize = 256000000 {}  DispFixRot=\u0026quot;Landscape\u0026quot; is to lock the screen rotation to be landscape only, I\u0026rsquo;ve met quite some problem with landscape, probably will write another post about it.\nIOSDispScaleFactor=200 is used to activate the retina screen support, so the resolution of retina iPad will be 2048 x 1536,\nIt took me quite some efforts to learn how to do the device-specific settings in app.icf, the syntax is quite complex, the marmalade documents actually cover this, though lacking good samples.\n","permalink":"http://blog.yjpark.org/blog/2013/04/14/marmalade-tricks-and-tips/","tags":null,"title":"Marmalade Tricks and Tips"},{"categories":["marmalade","pfgame","code"],"contents":" The audio and music are playing a very important role in games, for our future games, I want them to have good quality of audio and music, e.g. don\u0026rsquo;t use short loop of mp3 music, but something much longer and more dynamic without taking much space. My first thought is to use MIDI+soundfonts or some mod-based music, so I spent some time to try to see the possibility.\nThere are quite some libraries to support xm playback, though I can\u0026rsquo;t find any Marmalade extensions on the web, in the forum someone mentioned that they made use of FMOD in their game, though there is no code shared, and FMOD is quite expansive.\nAfter some search, I decided to use BASS audio engine, which is quite powerful, with well designed API, not bad documentation and sample, and a reasonable price for small projects (the shareware license can cover product with small price).\nNow I\u0026rsquo;ve got a working extension(though the only test I did was to play a xm file on OSX, iOS and Android), think other people maybe interesting in the extension or how to create similar extensions, so I\u0026rsquo;m going to share the extension and some experiences I\u0026rsquo;ve learn from the process(not in this post).\nQuick Note about Implementation BASS itself support many platform, the platforms I need are: OSX, iOS, Android. It\u0026rsquo;s pure C, so it shouldn\u0026rsquo;t be too hard to make it work with Marmalade. Though it took me quite a while to get some basic idea about the Marmalade extension system.\nMost documentation from Marmalade about extensions seems focusing on writing platform specific codes in custom extension, in this case, it\u0026rsquo;s actually much more easier since BASS is already platform independent, all we need is to make it work with Marmalade\u0026rsquo;s build system.\nWill write more about how to wrap C libraries into Marmalade extension in other posts later.\nCode of the Extension Since basically I have no idea about how to use BASS now, I just tried to use some codes from the BASS examples, it works pretty good, the xm files sounds quite good.\nThink I will write some wrapper layer around the C function calls to expose audio functionalities to C++, XML and Lua codes. Guess I will have much better idea about it in a couple of months after our first game get done.\nI\u0026rsquo;ve put the codes at Github, feel free to clone it, and give it a try. see the github pages for more details about it.\n","permalink":"http://blog.yjpark.org/blog/2012/11/06/initial-release-of-s3ebass-marmalade-extension-for-bass-audio-engine/","tags":null,"title":"Initial Release of s3eBass - Marmalade extension for BASS audio engine"},{"categories":["marmalade","pfgame","code"],"contents":" In 2D games, it\u0026rsquo;s typical to use image based font for UI elements, which can provide better graphic result, fast rendering, and usually smaller then true type fonts (especially if you want to support languages with big character set, e.g. Chinese).\nThere are quite some tools to generate such font images, I\u0026rsquo;m using bmGlyph as the font generator, it can publish the popular \u0026ldquo;Cocos2d / BMFont\u0026rdquo; format, though it\u0026rsquo;s not directly usable in Marmalade.\nMarmalade is using its own font format, and provide a font generator in the SDK, though it only support plain color, and when I feed it with some Chinese characators, they are not included in the generated files. I\u0026rsquo;m using the OS X version of the font builder, not sure about how the Windows version works.\nMy first thought was to add function to use the BMFont generated, though it\u0026rsquo;s not an easy task, also I want to use IwGame\u0026rsquo;s label components, which are based on Marmalade\u0026rsquo;s GxFont and Truetype support.\nAfter reading GxFont Reference, turns out it\u0026rsquo;s using a fairly simple format, so I decided to write a converter to create gxfont files.\nCode of the Converter I\u0026rsquo;ve put the codes at Github, feel free to clone it, and try to run it. see the github pages for more details about it.\nThe converter support UTF-8 characters with no problem, the size of the tga files is a bit big comparing to the Cocos2d version, since more empty spaces are needed for GxFont format.\nIt\u0026rsquo;s kind of a straight-forward implementation, and probably there are ways to make it better, especially if the bmGlyph\u0026rsquo;s console support is out (in the coming feature list now), the whole process of extracting characters from data file, create Cocos2d font, convert to GxFont can be fully automatied.\nJust read the code if you\u0026rsquo;re interested in the implementation details. :)\n","permalink":"http://blog.yjpark.org/blog/2012/11/05/convert-cocos2d-font-bmfont-to-marmalades-gxfont/","tags":null,"title":"Convert Cocos2D Font (BMFont) to Marmalade's GxFont"},{"categories":["iwgame","pfgame"],"contents":" It\u0026rsquo;s been more than a month since my post about the idea of game engine based on Marmalade and IwGame, after the post, spent many hours busy coding, now I\u0026rsquo;ve got the basic level editor up running, I think it\u0026rsquo;s pretty cool, so here are some details about it.\nHere is a screenshot of the level editor:\n  Level Editor Screen Shot 1   Updates about Original Post Before talking about the level editor, first I want to share some updates about Marmalade and IwGame in the last month.\nFirst, Marmalade 6.1 was released, it\u0026rsquo;s great for me, the 2 most useful feature for me are: Open GL ES 2.0 shader support in simulator, easy to debug shader now, and OSX deployment to send game/editor as running application to Graphic Artists.\nSecond, DrMop commented in the original post, assure that IwGame is very actively developed and version 0.40 is about to be released.\nQuick test with Chinese characters in CIwGameActorText, it works out of box, just specify a truetype font, write the text in UTF-8, then it\u0026rsquo;s done. I guess there is no need for CIwGameString to support unicode, since it can pass the bytes to Marmalade correctly.\nCurrent Features Now back to the level editor, it support image objects with layer(display order), depth(for parallel perspective), users can add/remove/copy/group objects, and can change position/size/scale/angle/origin with mouse, zoom in/out and move the camera around. Also I\u0026rsquo;ve integrated a Box2D debug view, and you can edit simple shape in it too (boxes and circles).\nActually it\u0026rsquo;s a bit easier than I thought to implement it, caused me about 5 weeks so far, worked quite hared during the time, but also had a basic animation editor and a game prototype at the same time, so the pure time on it was about 3 weeks.\nOur graphic artists have already used the editor to build a few nice scenes and they are getting more productively with it day by day, It\u0026rsquo;s just what I wished it to be: a tool to make developer and other roles to collaborative more effectively, think it\u0026rsquo;s at the right direction.\nAlso it\u0026rsquo;s extremely useful for prototyping and debugging, the way I did it is to add a few tools around the objects, so when you\u0026rsquo;re running your game, you can switch to editor mode at any time (by tapping the tab key), then you can check the scene to see what\u0026rsquo;s going on, or adjust the objects right in the editor, then you can switch back to game mode. It feels like you can freeze time in game at any time, then make changes, then go back, very cool, and very useful.\nTo make it clear, here is a screenshot of our game prototype:\n  Level Editor Screen Shot 2   After I switch to editor mode, and zoom out a bit, I can get the screen as the first screenshot, then I can adjust the level, and switch back to keep playing. Our graphic artist feels very happy with this in game editing ability, they can see their changes instantly, which make the whole process very efficiently.\nAnother very useful feature is the Box2D shape editor and debug view, we can create boxes and circles right through the level editor, they will be effective instantly, so for a game based on Box2D, it\u0026rsquo;s very easy to create the levels by non-programmers.\nHere is the same game prototype with Box2D debug view enabled:\n  Level Editor Screen Shot 3   As you can see, we use boxes and circles to create a rather complicate level. Also it\u0026rsquo;s very helpful to debug the collisions between objects, e.g. when I was implementing the effect of arrows hitting targets.\nWhat\u0026rsquo;s Missing As a basic level editor with advanced features (particle, animations\u0026hellip;), I think it\u0026rsquo;s quite complete and usable, we\u0026rsquo;ve got quite some prototype scenes with it till now, and the artists feel happy with it most of the time.\nThe biggest missed feature is undo/redo, only deleting have a quick undo since it can cause big trouble when touch wrong key accidentally. To make it better, all version of saved files are kept on disk, so if you made big mistakes, then it\u0026rsquo;s recoverable by hand. It\u0026rsquo;s non trivial to implement a good undo/redo system, so probably this feature will only be added in a much later stage.\nAlso there is on gui at all, all functions are done by keyboard shortcut and mouse movement, so there is a learning curve, and you\u0026rsquo;ll feel a bit awkward at first. Though this is the quickest way for implementation and also for actually using IMO, after a few days using it, both of our graphic artists can use it with no big problem, and they said that it\u0026rsquo;s a bit geeky feeling when using it. :)\nAnd manual works required to create a skeleton scene and import images to it, it\u0026rsquo;s not hard, just running some python scripts, but it\u0026rsquo;s still not so simple for non-programmers.\nWhat\u0026rsquo;s Next Guess I\u0026rsquo;ll keep improving it, fixing bugs first, now the focus is character animation editor, and the game prototype. After that, I\u0026rsquo;ll add particle feature to the level editor.\nI feel quite happy doing this kind of tool works, and actually it\u0026rsquo;s not hard to make it usable as a standalone project and let other people to use it. e.g. I can make a converter to generate cocos builder format, then it can be used in cocos2d projects. Or if I make my animation editor to export spriter\u0026rsquo;s xml syntax, it can be used in many other projects too.\nAnd at least for myself and our graphic artists, we think that our homebrew tools are much easier to use and feature complete (for just our needs) comparing to the tools we\u0026rsquo;ve tried. e.g. cocos builder, sprite helper, and spriter. Not saying that my editors are better products, just they are tailored by exactly our need and my design approach, and since it\u0026rsquo;s integrated in the exact game process, the workflow is much better comparing to a 3rd party tools. Also our level is pretty big(currently the demo scene is about 20000 pixel wide, and the engine/editor can support much bigger usage), I can\u0026rsquo;t find a proper tool to handle such big scene.\nThough making a generic tool will involve many not so interesting works, and it\u0026rsquo;s very hard to make it works for more people, and probably my tools are just too tailored to our need, so I think I will keep focusing on our games in the near future.\nBut anyway, I already have some demo scene editor running as OS X application, will make it downloadable in next few days, after I wrote a very basic manual about it. like Jakub commented in the original post, even if I decided to keep it private, it can still help others a bit, and maybe by using it in a experimental way, people can get some ideas about improving their own tools.\nIf you are interested to see more information about the editor, please leave comments, thanks.\nI\u0026rsquo;ll try to post more about technical details about some aspects of the editors, some hacks I used, and some mistakes I\u0026rsquo;ve overcomed.\n","permalink":"http://blog.yjpark.org/blog/2012/10/12/level-editor-based-on-iwgame-introduction/","tags":null,"title":"Level Editor Based on IwGame - Introduction"},{"categories":["iwgame","marmalade"],"contents":" Marmalade provide good support for writing custom shaders in it, though it\u0026rsquo;s not easy to get all the information to start writing the first shader in my case, here is some information that I gathered during the process.\nI decided to only support Open GL 2.0 Shaders in our games, most current devices support it, and as a small team, supporting older devices is a bit hard since we don\u0026rsquo;t have testers for now, also the architect of 2.0 is simpler and cleaner.\nThe sample shader\u0026rsquo;s function is to replace non-transparent part of the image to a given color, then the color can be changed programmingly (also by xml thanks to IwGame). Basically the images will be just working as masks, the actually color to be rendered are controlled by the shader.\nI will not cover the basics about Open GL Shaders, there are plenty of information on the web about that, also a PDF doc is included in Marmalade installation, it\u0026rsquo;s a good start point to me, you should read it first to get the concepts.\nMarmalade Rendering with Custom Shader Marmalade support shader very well by the CIwGxShaderTechnique class, to use it, you need to set it to material, here is the snnipet for that:\nCIwMaterial* mat = IW_GX_ALLOC_MATERIAL(); mat-\u0026gt;SetTexture(image-\u0026gt;getImage2D()-\u0026gt;GetMaterial()-\u0026gt;GetTexture()); mat-\u0026gt;SetShaderTechnique(shader); IwGxSetMaterial(mat);  The shader here is a pointer to CIwGxShaderTechnique, and the image is a pointer to CIwGameImage (part of IwGame), if you are not using IwGame, you can use Iw2d, or IwGx directly.\nThe following function can load a shader from a resource group.\nCIwGxShaderTechnique* getShader(const char* shaderName) { CIwGxShaderTechnique* shaderTemplate = (CIwGxShaderTechnique*)IwGetResManager()-\u0026gt;GetResNamed(shaderName, \u0026quot;CIwGxShaderTechnique\u0026quot;); if (shaderTemplate == NULL) { return false; } shader = new CIwGxShaderTechnique(); IwSerialiseOpen(\u0026quot;shader-Duplicate.bin\u0026quot;, false); shaderTemplate-\u0026gt;Serialise(); IwSerialiseClose(); IwSerialiseOpen(\u0026quot;shader-Duplicate.bin\u0026quot;, true); shader-\u0026gt;Serialise(); IwSerialiseClose(); return shader; }  Note: since I need multiple instance of the shader for diffrent images with differnt colors, here I use a quick solution with marmalade\u0026rsquo;s serialization, which is NOT thread safe due to the hard code file name.\nLoad the resource group as this:\nIwGetResManager()-\u0026gt;LoadGroup(\u0026quot;effect/Shaders.group\u0026quot;);  Files Used You need to include the shader files in the asset section of the mkb/mkf file, like this\nfiles { [Data] (data) effect/Shaders.group } assets { (data-ram/data-gles1) effect/Shaders.group.bin }  Please refer to Marmalade\u0026rsquo;s documents if you are not familiar with the resource compiling process and mkb syntaxes.\nHere is data/effect/Shaders.group\nCIwResGroup { name \u0026quot;PettyFun Environment Shaders\u0026quot; shared true \u0026quot;./PfMaskEffectShader.itx\u0026quot; }  The content of data/effect/PfMaskEffectShader.itx\nCIwGxShaderTechnique { name \u0026quot;PfMaskEffectShader\u0026quot; param \u0026quot;p_Color\u0026quot; vec4 1 {0.0, 0.0, 1.0, 1.0} shader \u0026quot;vertex\u0026quot; { attribute highp vec4 inVert; attribute mediump vec2 inUV0; uniform highp mat4 inPMVMat; uniform mediump vec2 inUVOffset; uniform mediump vec2 inUVScale; varying mediump vec2 v_UV0; void main(void) { gl_Position = inPMVMat * inVert; v_UV0 = inUV0 * inUVScale + inUVOffset; } } shader \u0026quot;fragment\u0026quot; { uniform sampler2D inSampler0; varying mediump vec2 v_UV0; uniform mediump vec4 p_Color; void main(void) { mediump vec4 c = texture2D(inSampler0, v_UV0); if (c.a \u0026lt; 0.1) { gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0); } else { gl_FragColor = p_Color; } } } }  Please read IwGxShaderTechnique Reference for the list of the attributes that you can use. It took me quite a while to find this document since this is no links to this page on the class reference page. This is VERY useful for writing shaders in Marmalade.\nUpdate Params By Code and XML the param in the shader is for the parameters from your code, change it\u0026rsquo;s value like this.\nvoid PfShaderEffect::SetShaderParam(const char *paramName, CIwGxShaderUniform::CIwGxShaderUniformType type, const void* value) { if (Shader == NULL) return; CIwGxShaderUniform* param = Shader-\u0026gt;GetParam(paramName); if( param ) { param-\u0026gt;Set(type, 0, value); } else { PfTrace(\u0026quot;Shader Param Not Exist: %s\u0026quot;, paramName); } } void PfShaderEffect::SetShaderParamAsInt(const char *paramName, int value) { SetShaderParam(paramName, CIwGxShaderUniform::INT, \u0026amp;value); } void PfShaderEffect::SetShaderParamAsFloat(const char *paramName, float value) { SetShaderParam(paramName, CIwGxShaderUniform::FLOAT, \u0026amp;value); } void PfShaderEffect::SetShaderParamAsColor(const char *paramName, CIwColour value) { float color[4]; color[0] = 1.0f * value.r / 0xff; color[1] = 1.0f * value.g / 0xff; color[2] = 1.0f * value.b / 0xff; color[3] = 1.0f * value.a / 0xff; SetShaderParam(paramName, CIwGxShaderUniform::VEC4, color); } void PfShaderEffect::UpdateColorFromAnimation(CIwColour* color, CIwGameAnimInstance *animation) { CIwGameAnimFrameVec4* value = (CIwGameAnimFrameVec4*)animation-\u0026gt;getCurrentData(); color-\u0026gt;r = value-\u0026gt;data.x; color-\u0026gt;g = value-\u0026gt;data.y; color-\u0026gt;b = value-\u0026gt;data.z; color-\u0026gt;a = value-\u0026gt;data.w; }  Since I\u0026rsquo;m using IwGame, it\u0026rsquo;s very easy to make the color controlled by the XOML animation, all I need to do is to override the UpdateFromAnimation method of CIwGameActor, and handle the color value from it.\nbool PfMaskEffect::UpdateFromAnimation(CIwGameAnimInstance *animation) { if (PfShaderEffect::UpdateFromAnimation(animation)) return true; bool delta = animation-\u0026gt;isDelta(); unsigned int element_name = animation-\u0026gt;getTargetPropertyHash(); if (element_name == PfHash(\u0026quot;Color\u0026quot;)) { UpdateColorFromAnimation(\u0026amp;Color, animation); SetShaderParamAsColor(\u0026quot;p_Color\u0026quot;, Color); } else { return false; } return true; }  Then you can generate smooth color switch animation by pure XML as normal IwGame Animation.\n\u0026lt;Template Name=\u0026quot;MaskColorTimelineTemplate\u0026quot;\u0026gt; \u0026lt;Animation Name=\u0026quot;MaskColorAnim$name$\u0026quot; Duration=\u0026quot;$duration$\u0026quot; Type=\u0026quot;vec4\u0026quot;\u0026gt; \u0026lt;Frame Value=\u0026quot;$startcolor$\u0026quot; Time=\u0026quot;0\u0026quot; /\u0026gt; \u0026lt;Frame Value=\u0026quot;$endcolor$\u0026quot; Time=\u0026quot;$duration$\u0026quot; /\u0026gt; \u0026lt;/Animation\u0026gt; \u0026lt;Timeline Name=\u0026quot;MaskColorTimeline$name$\u0026quot; AutoPlay=\u0026quot;true\u0026quot;\u0026gt; \u0026lt;Animation Anim=\u0026quot;MaskColorAnim$name$\u0026quot; Target=\u0026quot;Color\u0026quot; Repeat=\u0026quot;1\u0026quot; StartAtTime=\u0026quot;0\u0026quot;/\u0026gt; \u0026lt;/Timeline\u0026gt; \u0026lt;/Template\u0026gt; \u0026lt;Actor ...\u0026gt; \u0026lt;FromTemplate Template=\u0026quot;MaskColorTimelineTemplate\u0026quot; name=\u0026quot;ColorChange\u0026quot; duration=\u0026quot;2\u0026quot; startcolor=\u0026quot;180, 220, 251, 255\u0026quot; endcolor=\u0026quot;255, 0, 0, 255\u0026quot; /\u0026gt; \u0026lt;/Actor\u0026gt;  This is very flexible and powerful, no need to recompile, just updating plain XML files.\n","permalink":"http://blog.yjpark.org/blog/2012/10/02/opengl-es-2-dot-0-shader-in-marmalade/","tags":null,"title":"OpenGL ES 2.0 Shader in Marmalade"},{"categories":["pettyfun","game","iwgame","marmalade"],"contents":" Since August 2012, 2 developers(including me) and 2 graphic designers come together and started a small game studio to work on some mobile casual games, as the tech lead, I need to choose a development way for our first batch of games.\nOur games will be mostly 2D games, might with some 3D charactors, though the scenes or levels will be 2D, I think that\u0026rsquo;s better for the team and the graphic quality of the games.\nAfter quite some readings and experiments, I finally have a clear idea about how we gonna build these games, We will create our small game engine, on top of Marmalade and IwGame.\nWhy choose Marmalade? I did have quite some experience on cocos2d, though it\u0026rsquo;s been ruled out pretty quickly. I want our game to work on multiple platforms, since we don\u0026rsquo;t use much platform-specific features, we don\u0026rsquo;t get much with objective-c. Also personally I am not really a big fan of cocos2d, it\u0026rsquo;s kind of a simple framework with good quality, though missing some of the features I want with a solid framework, e.g. Tool or Markup for graphic scene editor, I\u0026rsquo;ve tried Cocos Builder and Level Helper very breifly, might be just me, but I don\u0026rsquo;t like neither one. A similar option is to go with cocos2d-x, which is cross platform, but because of similar reason, I didn\u0026rsquo;t dig into it deeply.\nThe second option is Unity3d, I\u0026rsquo;ve used it for about 3 months before, It\u0026rsquo;s pretty good, easy to use, and have a hugh community with tons of good plugins. My biggest concern about it is the binary format of the prefebs, it\u0026rsquo;s a bit like the xib file in App development, hard to change and track, as a developer, I want a text based format. Also don\u0026rsquo;t really think the .Net virtual machine is the best way for our rather small games. My feeling is that it\u0026rsquo;s more like a tool for game designers and graphic designers, as developers, we gave up full control in exchange with a full-feature game development environment. And also it\u0026rsquo;s mostly 3D centric, 2D works are possible, but a bit awkard, since we don\u0026rsquo;t need the 3D power and I want more control with my codes, I did not take this path either.\nFor good performance and graphic effects, I didn\u0026rsquo;t investigate the fast development tools, most of them are HTML based or LUA based, more like quick prototype tools for me.\nI\u0026rsquo;ve played with Airplay for a couple of days 2 years ago, technically it was very good, though with a rather steep learning curve, and lack of tutorials and blog post, so I didn\u0026rsquo;t really learn it as a hobby. Now it\u0026rsquo;s renamed to Marmalade, been updated pretty often, and having a much bigger user base and many successful games are based on it, like Draw Something or Cut The Rope. Since I will use the chosen platform for at least 1 or 2 years, I spend a week to really try to learn it this time.\nThe first impression was kind of negative, the OSX support seems to be much weaker than the windows one, a bunch of small problems were met, which almost make me give it up. Now I\u0026rsquo;ve been using it for about 1 month, still got some problem, though I think I start to feel comfortable with it.\nThere are still very few technical information about marmalade other than the official documents and forum, the only helpful tutorial I can find is the DrMop tutorials. It\u0026rsquo;s very helpful to provide basic ideas for new Marmalade users.\nThe API documents of Marmalade is actually quite good after you get the basic ideas about it. Also the examples included are good learning source.\nMy current feeling about Marmalade is quite positive, it has nice features and solid quality, provide full control, has native bridge for potential platform-specific development.\nThe things I wish to be better:\n 1st class OSX support, add the missing features of the simulator, fix the broken \u0026ldquo;mkb \u0026ndash;iphone\u0026rdquo; device building (only trid on 10.8 + Xcode 4.4, not sure about other environments). (Update: \u0026ndash;iphone is fixed in 6.1, simulator seems not updated) Release to osx ability, then I can create desktop tools such as customized level editor instead of let my graphic designers to use the simulator to run them. (Update: Added in 6.1) Float data types in IwGx, it\u0026rsquo;s said to be included in 6.1 release which should be out soon, much simpler and less error-prone, we\u0026rsquo;ll target on OpenGL ES 2.0 devices only (iOS devices first) to make our life easier since we can\u0026rsquo;t afford dedicated tester anyway. (Update: Float added in 6.1 and works great, though we probably will not change IwGame to use float) High level document besides API reference, and generally more documentations. Better community and 3rd party components, it\u0026rsquo;s quite unpopular in stackoverflow, very few blogs, and the github community projects are not very active and organized.  What is IwGame, and Why it is Helpful Marmalade is very low level, its design priciple is that people can make their engine working on it rather easily, but we don\u0026rsquo;t have any game engine yet, so either I need to write a 2D engine from scratch, or choose a C/C++ engine to work with. Cocos2d-X works on Marmalade, though I want something more powerful. Many 3D engine works on it too, but they are too complex to me, I probably will choose Unity3D if I want a 3D engine.\nAccording to the website, IwGame is a \u0026ldquo;Free Open Source Cross Platform Mobile Game Engine for Smart Phones and Tablets\u0026rdquo;, it\u0026rsquo;s a quite ambitious project, already has a long feature list with many future features, though still in an rather early stage.\nThe main reasons I chose it:\n Open source, I can tweak the codes to suit my needs better, and even if its development stopped, we can still improve it by ourselves. XML file format, it\u0026rsquo;s very powerful, e.g. make simple animations easily without coding. Also it\u0026rsquo;s very easy to extend the system to add our own extensions. This is a hugh advantage to me. Complete 2D framework, including sprite, scene, particle, physics, UI\u0026hellip; No need to reimplement the basic things from the scratch, we can focus on more interesting stuffs. Support 2D and 3D rendering, since the rendering codes are based on IwGx now, even for 2D games, some part of 3D elements can be very useful, so I think this flexibility is very good. Good document and a full game source included, there are quite some typos in the included PDF document, though it provide most information I need to get started, plus reading the source code, It\u0026rsquo;s kind of easy to learn (though still much harder comparing to cocos2d family). Good code quality, easy to read and not hard to expand.  Some worries about base our codes on it:\n It\u0026rsquo;s a big project, and seems most code and docs are written by DrMop in several monthes. He did very great so far, though he has too many works ahead him, I am not sure where this project will be after 1 year, what if it\u0026rsquo;s dead? also it\u0026rsquo;s been a while since the last update. On the other hand, if it\u0026rsquo;s been developed rapidly, since it\u0026rsquo;s not finished yet, we will need to expand it by ourself, it can be a problem to keep update with the future updates. I don\u0026rsquo;t want to make a fork since many good features are on the list, though we can\u0026rsquo;t wait for they to appear, We will be careful with out changes to make them easy to merge, but what if the owner decide to change the API interface drasticly? The core string class (CIwGameString) is not unicode compatible, and the author didn\u0026rsquo;t have plan to support it soon. This can be a big problem for us to support multiple language, especially the asian languages. I want to find a clean solution for this, though haven\u0026rsquo;t started working on it yet. There is no unit tests yet, so it might introduce its own bugs, especially if it\u0026rsquo;s been update quickly.  My Plan on The Game Engine Now I feel OK working with Marmalade and IwGame, the next steps will be creating the features/tools we need for our games, i.e. create a game engine for our requirements.\nHere is the current list of works to be done:\n Basic level editing, to arrange 2D sprites on screen, supporting basic operations such as moving, scaling, rotating, etc. Our level/scene will be 2D non-tile with multiple layers, something similar to this Complex charactor editing, 2D or 3D charactors with body parts, movement and animations. Advanced level editing, particles, visual effects, events, etc. UI editing.  All these editors will base on the XOML markup system of IwGame.\nThese are still quite some works, might be over engineering for our first game, though as a developer, I don\u0026rsquo;t want to just do things in the quick and dirty way, I want to do it in a proper way. And I think a proper engine can make future games easier to develop, so in the long run, it will worth the efforts.\nThink I will start to write more about Marmalade and IwGame in the future, both help myself to understand them better, and hopefully might help some other developers too.\n","permalink":"http://blog.yjpark.org/blog/2012/08/30/game-engine-based-on-marmalade-and-iwgame/","tags":null,"title":"Game Engine Based on Marmalade and IwGame"},{"categories":["tool","code"],"contents":" What is PlantUML? PlantUML is a component that allows to quickly write:\n sequence diagram, use case diagram, class diagram, activity diagram, component diagram, state diagram object diagram  I really like the idea of writing UML diagram with plain text. Since it\u0026rsquo;s totally plaintext, it\u0026rsquo;s very easy to do diff and version track, also you don\u0026rsquo;t need to do anything about the layout (the text itself looks pretty good too).\nAlso the syntax of it is very well designed, and the generated diagrams looks really nice, so I use PlantUML for technical documentation with trac and sphinx.\nThe Plugin After switching Octopress to my blog platform, I was looking for a way to integrate PlantUML within it, though I can\u0026rsquo;t find one, so I wrote this very simple jekyll plugin (Octopress is based on Jekyll).\njekyll-plantuml\nConfiguration You need to download the plantuml.jar file from http://plantuml.sourceforge.net/download.html\nIn your _config.xml, setup plantuml_jar to the downloaded jar file, e.g.\nplantuml_jar: ../_lib/plantuml.jar plantuml_background_color: \u0026quot;#f8f8f8\u0026quot;  The plantuml_background_color is optional, which will change the background of the generated diagram.\nUsage Just wrap the diagram text in \u0026ldquo;plantuml\u0026rdquo; block, e.g.\n{% plantuml %} Alice -\u0026gt; Bob: Authentication Request Bob --\u0026gt; Alice: Authentication Response Alice -\u0026gt; Bob: Another authentication Request Alice \u0026lt;-- Bob: another authentication Response {% endplantuml %}  An Example   CQ: Critical bug\\n reported group Fix RD P4C: Create bugfix\\n configuration RD - P4CTB: Create topic branch (by tools) RD - P4CTB: Working on the bugfix RD - CQ: Resolve end group group Virification QA CQ: Confirm end group group Release BM P4CRB: Update customer\\n branches P4CTB - P4CRB: Auto integrate\\n (by tools) end loop end group {% endplantuml %} -- ","permalink":"http://blog.yjpark.org/blog/2012/04/30/plantuml-plugin-for-octopress/","tags":null,"title":"PlantUML Plugin for Octopress"},{"categories":["pettyfun","ios","movablewrite","code"],"contents":" What is Movable Write Back in 2010, I already had some experiences on iOS development. Did wrote some very simple application to fetch information over HTTP-RPC to a trac instance, and wrote a very simple game with Cocos2D and Box2D. Did spend some time to catch up with the versions or iOS updates and read about the new APIs.\nBut my feeling was that by only spend small amount of time like it, I can never learn enough to have real experience on it, and I\u0026rsquo;ve been working on Web development for a few years. So I decided to work part-time in the company, and use the other half time to develop a real application, by real I mean with proper quality and released at app-store.\nI just got a iPad1 as development device, and tried a few apps, I liked note plus a lot, it\u0026rsquo;s very powerful, but a bit too powerful for my need, I want to write words most of the time, and I want to write largely, but view the written lines small.\nSo I decided to write a note taking app for myself, after 3 months, Movable Write was released at app store.\n App store link A nice introduction from wolfewithane.com Another nice introduction from iapp.com.tw (in Chinese)  What is missed I did implement support for USB transfer for backup/restore, though didn\u0026rsquo;t write document about this feature, the plan was to implement synchronization for it, Dropbox and/or iCloud, though didn\u0026rsquo;t get time for it.\nAnother interesting possibility is Evernote integration, the code should be very easy to be runnable on OSX, also can be added as image or pdf.\nA bigger change is adding bigger element into page, e.g. a photo then wrap the lines around it. I\u0026rsquo;ve done some experiments about bigger writing area, it\u0026rsquo;s not easy to put it into the current structure though.\nAnother bigger one is OCR for the written words, there are open-source libraries, though not sure how mature they are, all the original writing information are saved in file, it might be easy to add this feature.\nA small one is to replay the writing process of the note, since all the timing infomation was saved too, this is not hard to implement.\n\u0026hellip;\nWhy open sourced It\u0026rsquo;s sadly that I can\u0026rsquo;t put more dedicated time into it, since it didn\u0026rsquo;t bring much money as a product for a small group of people, though I get quite some very good comments from some users.\nI feel very happy that some people found it useful and use it frequently, so in case any of them are programmer, I decided to put all the source codes at github, please fork it if you\u0026rsquo;re interesting.\n Movable Write at Github  Might write more about the technical side of the project later, what I\u0026rsquo;ve learned, and how to extend it.\n","permalink":"http://blog.yjpark.org/blog/2012/04/22/movable-write-open-sourced/","tags":null,"title":"Movable Write Open Sourced"},{"categories":null,"contents":" TODO ","permalink":"http://blog.yjpark.org/page/about/","tags":null,"title":""},{"categories":null,"contents":" This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ` [outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;] \\`\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ` ... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ... \\`\nEdit fuse.js options to Search static/js/search.js ` keys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ] \\`\n","permalink":"http://blog.yjpark.org/search/","tags":null,"title":"Search Results"}]
=======
[{"categories":["code","fsharp","fake"],"contents":"I\u0026rsquo;ve been doing quite some F# coding lately, which is really nice, plan to write more about F# later, here I\u0026rsquo;m gonna talk about how to build DotNet projects with Fake.\nI\u0026rsquo;ve put common logic as libraries, then can share them easily across multiple projects, so I need to create NuGet packages. I\u0026rsquo;ve already created more than a dozen individual libraries, it\u0026rsquo;s clear that I need an automated process to manage them, or it\u0026rsquo;s very tedious to keep proper version of libraries in each project.\nI\u0026rsquo;ve did some small work around Fake to make such process, which works quite nicely for me, I plan to write two articles on this, this one will explain the basic structure, and how I use it to manage multiple projects easily, the next one will talk about how to create NuGet package, and how to use a hacky way to do local development easily.\nWhat\u0026rsquo;s Fake and Why Need It. Here is the slogan form Fake\u0026rsquo;s official site: https://fake.build/\nF# MAKE 5 - A DSL FOR BUILD TASKS AND MORE THE POWER OF F# - ANYWHERE - ANYTIME\nIt\u0026rsquo;s a make like system, but instead of a special purpose DSL, it\u0026rsquo;s standard F#, with addition of modules and syntax to make common tasks easily. You can define dependencies of targets (a task in Fake\u0026rsquo;s terminology) very easily with it\u0026rsquo;s ==\u0026gt; operator.\nSince it\u0026rsquo;s standard F#, you can have type check for the make script, and quite nice IDE support in VS Code (haven\u0026rsquo;t tried other IDEs yet). Here is the code snippet from tutorial\n// Targets Target.create \u0026#34;Clean\u0026#34; (fun _ -\u0026gt; Shell.cleanDir buildDir ) Target.create \u0026#34;BuildApp\u0026#34; (fun _ -\u0026gt; !! \u0026#34;src/app/**/*.csproj\u0026#34; |\u0026gt; MSBuild.runRelease id buildDir \u0026#34;Build\u0026#34; |\u0026gt; Trace.logItems \u0026#34;AppBuild-Output: \u0026#34; ) Target.create \u0026#34;Default\u0026#34; (fun _ -\u0026gt; Trace.trace \u0026#34;Hello World from FAKE\u0026#34; ) open Fake.Core.TargetOperators \u0026#34;Clean\u0026#34; ==\u0026gt; \u0026#34;BuildApp\u0026#34; ==\u0026gt; \u0026#34;Default\u0026#34; // start build Target.runOrDefault \u0026#34;Default\u0026#34; Nice and clean, isn\u0026rsquo;t it?\nThough in practice, this kind of simple approach not working for me.\n First of all, don\u0026rsquo;t really like the build targets as string here, which is error prune, and won\u0026rsquo;t benefit from compiler for checks, a union type will be better, though won\u0026rsquo;t fit to fake\u0026rsquo;s API easily, the best approach to me is that no need to define these standard targets manually, should be able to generate them by convention. Secondly, since building several projects can take time, I would like to be able to just operate on specific project if I want to, I can cd to certain folder and run dotnet commands there in a shell, though it\u0026rsquo;s a bit tedious to switch current folder back and forth all the time. Also, most projects are having similar tasks, but with the out-of-box fake, still need to write some boilerplate codes for each project, which is quite tedious.  Introducing Dap.Build So after some time tinkering around it, I\u0026rsquo;ve create a simple package for this, which is on GitHub and NuGet:\n https://github.com/yjpark/dap.build.fsharp\n https://www.nuget.org/packages/dap.build\n  The following example is used in a library project (not open sourced yet, pushed to private nuget ATM), which includes 13 libraries, with just 30 lines of codes, all of them have individual tasks to clean/restore/build/pack/push\u0026hellip; and aggragated tasks to build all, restore all \u0026hellip; and all the targets are with properly dependencies.\n#r \u0026#34;paket: groupref Build //\u0026#34; #load \u0026#34;.fake/build.fsx/intellisense.fsx\u0026#34; open Fake.Core open Fake.IO.Globbing.Operators module NuGet = Dap.Build.NuGet let feed = NuGet.Feed.Create ( server = NuGet.ProGet \u0026#34;https://nuget.yjpark.org/nuget/dap\u0026#34;, apiKey = NuGet.Environment \u0026#34;API_KEY_nuget_yjpark_org\u0026#34; ) let projects = !! \u0026#34;lib/Dap.FlatBuffers/*.csproj\u0026#34; ++ \u0026#34;src/Fable.Dap.Prelude/*.fsproj\u0026#34; ++ \u0026#34;src/Dap.Prelude/*.fsproj\u0026#34; ++ \u0026#34;src/Fable.Dap.Context/*.fsproj\u0026#34; ++ \u0026#34;src/Dap.Context/*.fsproj\u0026#34; ++ \u0026#34;src/Fable.Dap.Platform/*.fsproj\u0026#34; ++ \u0026#34;src/Dap.Platform/*.fsproj\u0026#34; ++ \u0026#34;src/Fable.Dap.WebSocket/*.fsproj\u0026#34; ++ \u0026#34;src/Dap.WebSocket/*.fsproj\u0026#34; ++ \u0026#34;src/Fable.Dap.Remote/*.fsproj\u0026#34; ++ \u0026#34;src/Dap.Remote/*.fsproj\u0026#34; ++ \u0026#34;src/Fable.Dap.Dsl/*.fsproj\u0026#34; ++ \u0026#34;src/Dap.Archive/*.fsproj\u0026#34; NuGet.createAndRun NuGet.release feed project This example use paket to manage packages, need the following snippet in paket.dependencies\ngroup Build source https://www.nuget.org/api/v2 storage: none framework: netstandard2.0 nuget Dap.Build  Full list of targets are:\nThe following targets are available: Build - Build 13 Projects Clean - Clean 13 Projects Dap.Archive:Build - Build Dap.Archive Dap.Archive:Clean - Clean Dap.Archive Dap.Archive:Fetch - Fetch Dap.Archive Dap.Archive:Inject - Inject Dap.Archive Dap.Archive:Pack - Pack Dap.Archive Dap.Archive:Push - Push Dap.Archive Dap.Archive:Recover - Recover Dap.Archive Dap.Archive:Restore - Restore Dap.Archive Dap.Context:Build - Build Dap.Context Dap.Context:Clean - Clean Dap.Context Dap.Context:Fetch - Fetch Dap.Context Dap.Context:Inject - Inject Dap.Context Dap.Context:Pack - Pack Dap.Context Dap.Context:Push - Push Dap.Context Dap.Context:Recover - Recover Dap.Context Dap.Context:Restore - Restore Dap.Context Dap.FlatBuffers:Build - Build Dap.FlatBuffers Dap.FlatBuffers:Clean - Clean Dap.FlatBuffers Dap.FlatBuffers:Fetch - Fetch Dap.FlatBuffers Dap.FlatBuffers:Inject - Inject Dap.FlatBuffers Dap.FlatBuffers:Pack - Pack Dap.FlatBuffers Dap.FlatBuffers:Push - Push Dap.FlatBuffers Dap.FlatBuffers:Recover - Recover Dap.FlatBuffers Dap.FlatBuffers:Restore - Restore Dap.FlatBuffers Dap.Platform:Build - Build Dap.Platform Dap.Platform:Clean - Clean Dap.Platform Dap.Platform:Fetch - Fetch Dap.Platform Dap.Platform:Inject - Inject Dap.Platform Dap.Platform:Pack - Pack Dap.Platform Dap.Platform:Push - Push Dap.Platform Dap.Platform:Recover - Recover Dap.Platform Dap.Platform:Restore - Restore Dap.Platform Dap.Prelude:Build - Build Dap.Prelude Dap.Prelude:Clean - Clean Dap.Prelude Dap.Prelude:Fetch - Fetch Dap.Prelude Dap.Prelude:Inject - Inject Dap.Prelude Dap.Prelude:Pack - Pack Dap.Prelude Dap.Prelude:Push - Push Dap.Prelude Dap.Prelude:Recover - Recover Dap.Prelude Dap.Prelude:Restore - Restore Dap.Prelude Dap.Remote:Build - Build Dap.Remote Dap.Remote:Clean - Clean Dap.Remote Dap.Remote:Fetch - Fetch Dap.Remote Dap.Remote:Inject - Inject Dap.Remote Dap.Remote:Pack - Pack Dap.Remote Dap.Remote:Push - Push Dap.Remote Dap.Remote:Recover - Recover Dap.Remote Dap.Remote:Restore - Restore Dap.Remote Dap.WebSocket:Build - Build Dap.WebSocket Dap.WebSocket:Clean - Clean Dap.WebSocket Dap.WebSocket:Fetch - Fetch Dap.WebSocket Dap.WebSocket:Inject - Inject Dap.WebSocket Dap.WebSocket:Pack - Pack Dap.WebSocket Dap.WebSocket:Push - Push Dap.WebSocket Dap.WebSocket:Recover - Recover Dap.WebSocket Dap.WebSocket:Restore - Restore Dap.WebSocket Fable.Dap.Context:Build - Build Fable.Dap.Context Fable.Dap.Context:Clean - Clean Fable.Dap.Context Fable.Dap.Context:Fetch - Fetch Fable.Dap.Context Fable.Dap.Context:Inject - Inject Fable.Dap.Context Fable.Dap.Context:Pack - Pack Fable.Dap.Context Fable.Dap.Context:Push - Push Fable.Dap.Context Fable.Dap.Context:Recover - Recover Fable.Dap.Context Fable.Dap.Context:Restore - Restore Fable.Dap.Context Fable.Dap.Dsl:Build - Build Fable.Dap.Dsl Fable.Dap.Dsl:Clean - Clean Fable.Dap.Dsl Fable.Dap.Dsl:Fetch - Fetch Fable.Dap.Dsl Fable.Dap.Dsl:Inject - Inject Fable.Dap.Dsl Fable.Dap.Dsl:Pack - Pack Fable.Dap.Dsl Fable.Dap.Dsl:Push - Push Fable.Dap.Dsl Fable.Dap.Dsl:Recover - Recover Fable.Dap.Dsl Fable.Dap.Dsl:Restore - Restore Fable.Dap.Dsl Fable.Dap.Platform:Build - Build Fable.Dap.Platform Fable.Dap.Platform:Clean - Clean Fable.Dap.Platform Fable.Dap.Platform:Fetch - Fetch Fable.Dap.Platform Fable.Dap.Platform:Inject - Inject Fable.Dap.Platform Fable.Dap.Platform:Pack - Pack Fable.Dap.Platform Fable.Dap.Platform:Push - Push Fable.Dap.Platform Fable.Dap.Platform:Recover - Recover Fable.Dap.Platform Fable.Dap.Platform:Restore - Restore Fable.Dap.Platform Fable.Dap.Prelude:Build - Build Fable.Dap.Prelude Fable.Dap.Prelude:Clean - Clean Fable.Dap.Prelude Fable.Dap.Prelude:Fetch - Fetch Fable.Dap.Prelude Fable.Dap.Prelude:Inject - Inject Fable.Dap.Prelude Fable.Dap.Prelude:Pack - Pack Fable.Dap.Prelude Fable.Dap.Prelude:Push - Push Fable.Dap.Prelude Fable.Dap.Prelude:Recover - Recover Fable.Dap.Prelude Fable.Dap.Prelude:Restore - Restore Fable.Dap.Prelude Fable.Dap.Remote:Build - Build Fable.Dap.Remote Fable.Dap.Remote:Clean - Clean Fable.Dap.Remote Fable.Dap.Remote:Fetch - Fetch Fable.Dap.Remote Fable.Dap.Remote:Inject - Inject Fable.Dap.Remote Fable.Dap.Remote:Pack - Pack Fable.Dap.Remote Fable.Dap.Remote:Push - Push Fable.Dap.Remote Fable.Dap.Remote:Recover - Recover Fable.Dap.Remote Fable.Dap.Remote:Restore - Restore Fable.Dap.Remote Fable.Dap.WebSocket:Build - Build Fable.Dap.WebSocket Fable.Dap.WebSocket:Clean - Clean Fable.Dap.WebSocket Fable.Dap.WebSocket:Fetch - Fetch Fable.Dap.WebSocket Fable.Dap.WebSocket:Inject - Inject Fable.Dap.WebSocket Fable.Dap.WebSocket:Pack - Pack Fable.Dap.WebSocket Fable.Dap.WebSocket:Push - Push Fable.Dap.WebSocket Fable.Dap.WebSocket:Recover - Recover Fable.Dap.WebSocket Fable.Dap.WebSocket:Restore - Restore Fable.Dap.WebSocket Fetch - Fetch 13 Projects Inject - Inject 13 Projects Pack - Pack 13 Projects Push - Push 13 Projects Recover - Recover 13 Projects Restore - Restore 13 Projects  I am really happy with it, can do most operation easily. The nuget related feature is very nice, I didn\u0026rsquo;t find much information about how other developers work with nugets, what commands to pack and push them, currently Dap.Build support both nuget.org and ProGit, will have another post on this part later.\nThe missing part is auto complete for targets, though since I\u0026rsquo;m using fish, it\u0026rsquo;s command history can replace auto completion mostly, so this is not an urgent feature to me.\n","permalink":"http://blog.yjpark.org/blog/2018/11/27/build-dotnet-projects-with-fake/","tags":null,"title":"Build DotNet Projects with Fake"},{"categories":["code","fsharp","dap"],"contents":"In the last few months, I\u0026rsquo;ve created an actor frameworks in which each actors is in functional reactive way in F#.\nBasically each actor is created with the Elm Architecture, everything is strong typed, can be run on Dot Net Core, or in browser with javascript generated by Fable, also can be run on mobile or desktop devices with Xamarin or Dot Net.\nIt costed me much time and efforts to get it to current state, learned a lot along the way, will try to write something before I forget the details.\nSome Background (Feel Free to Skip) Back in March, I started a new projects that needs server side logic and web or native apps as clients.\nMy first attempt was to tweak the server side framework that I used on games before for it. It was my dap context in C# running on top of Orleans actor framework. Orleans works purely in async way as an actor system, though my libs was originally used in games, and was mainly in sync mode, so I ended us have some hacky solution to mix them together, in the game usage it seems to be fine, didn\u0026rsquo;t caused me much problems. Though the new project involves many external HTTP and WebSocket access, so the framework gets in the way, may the code messy with some nasty delay to link sync and async sides together.\nAlso there are quite some complex data structures in it as well, I tried to use the metadata code generator (use Microsoft Bond as data definition language) I created for game dev with it as well, though not really happy either, for games\u0026rsquo; metadata, there are a few rather complex data structures that may have many instances, and the data type itself usually are combined by simple types. Though in the new project, the logic is quite complex, and the number of data structure is quite big, it\u0026rsquo;s very annoying if I want to create Bond definitions for everything.\nSo after a couple of week patching the exist framework, and fighting with some nasty bugs with the patching, and need more patchs on top of it, I decided to take a new approach.\nAt first, I planned to take full Orleans approach, the problem was that being an (virtual) actor framework, I still need to find my way to organize these actors together in a nice way. Also being a server-side framework, it can not really help for the client side, though I really don\u0026rsquo;t want 2 languages if possible.\nSo it become clear that I need some framework again, pure async one to work nicely with Orleans and GUI apps, easy to access external services through HTTP and WebSocket, single language for both client and server side.\nWhy F# I did use Elm in some front-end small projects in last couple of years, which is great, use Records and Unions can describe data structures very nicely, and refactoring with Elm feels so good. Though server-side Elm is missing ATM, did some hacky way to render HTML pages with it running in node, though it\u0026rsquo;s not ready for heavy logic yet.\nI also did some experiments with Purescript before, which is very similar to Haskell, transcompiled to javascript, so can be run on browsers, nodejs, and react-native. The language is well-designed, harder to learn compared to Elm. Seems Purescript is even less popular than Elm, so it might be a risky choice, also running the backend on nodejs is not ideal to me.\nDot Not Core is really nice, Orleans is very nice too, I really want to keep work on top of them, so I did the framework in F# eventually.\nI\u0026rsquo;ve been reading on F# before, which seems a compromised design back then, it\u0026rsquo;s not a pure function language, support complete Object-Oriented as well, also can use mutable values if you wanted to. on the other hand, these design choices make it quite practical, and can took advantage of the much bigger C# libraries when need to integrate with third-parties.\nFable is a transcompiler for F# to generate javascript codes, then it can be run in browser or react native apps. It\u0026rsquo;s quite nice, there are certain limitations and some small things to be considered, but after the development environment been setup properly, it works as expected.\nAnother bonus to me is that I am used to generics in C#, generics in F# is as powerful, and actual codes can be much shorter.\nElmish (Functional Reactive in F#) The Elm Architecture is really nice way to write logic, the idea is that you describe type of model and message, the running is just a serious of messages received and versions of models according to these messages.\nIn ideal situation the model should be immutable, then it\u0026rsquo;s quite easy to get serialized, which can leads to powerful features such as persistent app states, and time travel debugger.\nF# community had created similar approach as Elmish, which is quite simple actually, was created to be used in Fable, then refactored to be used in normal F# as well.\nThe essential idea is that logic will check incoming message, create a new model based on the current one, any might create new messages that will be send into itself later. Of course it\u0026rsquo;s much more complex in real world usage, though technically it\u0026rsquo;s mostly about how an update is implemented, the method signature looks like this:\ntype Update\u0026lt;\u0026#39;model, \u0026#39;msg\u0026gt; = \u0026#39;msg -\u0026gt; \u0026#39;model -\u0026gt; \u0026#39;model * Cmd\u0026lt;\u0026#39;msg\u0026gt; Actors and Runtime The Elmish approach did imply an actor like way, messages can be received one-by-one, and sending messages should be the only way to interact with the inner system, which is basically an actor.\nIn Elm\u0026rsquo;s cases, the whole application is the only actor, use subscriptions and system libraries (such as HTTP accessing) to generate messages that send back in the future.\nElmish provide simple implementation with F#\u0026rsquo;s MailboxProcessor, you can create multiple programs if you want, it provide view rendering to show stuffs in browsers (or react native, or other GUI system such as Xamarin Forms). It\u0026rsquo;s also usually the only actor.\nOn the contrary, actor framework normally have many actors, and usually not having GUI elements with them.\nMy tasks here is to create a runtime for my actors. which will handle the message passing, and state management, also optional GUI integration.\nI did some abstraction with the runtime, so it\u0026rsquo;s implementation can be on top of different platforms, currently I\u0026rsquo;ve have one with MailboxProcessor, later will add Orleans and maybe experiment with ProtoActor later.\nAlso did some abstraction with the runner object, so I can organize actor-specific helpers easily, e.g. one actor might want to access or create other actors, one way is to make this a system wise singleton, though that means it\u0026rsquo;s not easy to isolate actors from each other. another example is loggers, I want each actor to have its own logger, so the code need someway to access the logger.\nSo my update looks like:\ntype Update\u0026lt;\u0026#39;runner, \u0026#39;model, \u0026#39;msg\u0026gt; = \u0026#39;runner -\u0026gt; \u0026#39;msg -\u0026gt; \u0026#39;model -\u0026gt; \u0026#39;model * Cmd\u0026lt;\u0026#39;msg\u0026gt; This is the biggest difference between my framework and Elmish, also this make the implementation much harder, I feel it worth the effort, will have more details on this topic later.\nWhere is The Code? It\u0026rsquo;s not ready yet, it\u0026rsquo;s working, can be used as nuget packages (on private source now), though not yet ready to be open-sourced, currently still in the quick iteration mode.\nWill write more blogs first, then when it\u0026rsquo;s stable enough, will probably make it public.\n","permalink":"http://blog.yjpark.org/blog/2018/08/12/functional-reactive-actors-in-fsharp/","tags":null,"title":"Functional Reactive Actors in F#"},{"categories":["code","doc"],"contents":"Back in 2013, I was working on my first Unity3d game, it\u0026rsquo;s a simplified RTS game for tablets, the first version took us (3 developers including me) about 2 years to hit the iOS app store, did learned quite some lessons during the process, wanted to write some blogs for a long time, though never really did.\nWe released the game at 2015, but the game wasn\u0026rsquo;t successful commercially, and our small start-up company run out of money. I was still making games after that, planned to reuse some lib codes created along the way. Then I realised that the quality of these libs can be improved much (due to time pressure, and lack of experiences)\nThe most useful module was a custom data context class I wroted, it was rather simple, just an object with a bunch of properties, and event channels, both can be watched, e.g. when a property been set to a new value, all listeners will be triggered by a callback. On top of these properties and channels, I create a simple layer to interact with the data context via requests, such as get or set or fire, then on top of that, I create a simple text parser so diffrent section in config files can trigger different action in the system, e.g.\n\u0026quot;selection\u0026quot; : { \u0026quot;_\u0026quot;: [ \u0026quot;sprite/destroy?key=selection\u0026quot;, \u0026quot;sprite/do?key=selection\u0026amp;prefab=squads.effect_sprite#color=1,1,1,0\u0026amp;sprite=flash\u0026amp;zoom=1.0\u0026amp;play.flash\u0026amp;done.flash=destroy\u0026quot;, ] },  The first command will destroy the old selection sprite, the second command will create a new one (these objects are managed by a pool, so performance won\u0026rsquo;t be affected), then change it\u0026rsquo;s color, sprite, zoom value, then fire an event play.flash which is an animation created by HoTween in the prefab, then when the event done.flash been triggered (when the tween finished), destroy itself.\nThis is used in our effect system, in the code, a bunch of entry points were defined, when certain things happened, the logic will check according section in the config file, then parse these commands and run them through the request system, which operates on the data contexts eventually.\nThis works rather smoothly, so when non-dev members wants to tweak effects, they can just create prefabs, and writing commands to operate these prefabs, no code writing envolved, it\u0026rsquo;s a small challenge for them to learn and master the syntax, though after some documents and practice, the art works and dev works were de-coupled properly.\nLater the same system was used for GUI elements, in slightly different way, and also been used for charactor\u0026rsquo;s properties storage, though quite some boilerplate codes was written to make things work, the parsing logic became quite messy after adding more features, such as delayed execution, relative value changes\u0026hellip;\nWhat\u0026rsquo;s Dap So I was working on the second version of my library codes, C# version, mainly used in Unity3d, though much of the codes are not limited to Unity3d, and can been used with DotNet, Mono, and Xamarin as well.\nDap stands for Distributed Application Platform, the plan is to create conventions, api, and libraries for distributed applications, in my mind, it means:\n Multiple platform support Multiple devices at the same time Real-time communication and colabration from these devices  This is rather big scope, when I started thinking about this, was mainly focus on application dev, though much of the ideas are suitable for game dev as well, especially for network games.\nWhat\u0026rsquo;s Dap Context, Aspect Dap is following ECS (Entity Component System), has following core concepts:\n Context, it\u0026rsquo;s the entity in Dap, a little like Unity\u0026rsquo;s GameObject, though you can create subclass of Contexts. Aspect, it\u0026rsquo;s the component in Dap, everything related to a Context most likely are aspects The system in Dap can be done by either subclass from context, or with manners (special Aspects designed for sharing logic in defferent type of Entities) Env, it\u0026rsquo;s the runtime environment of the Dap system, there is only one env instance in the system, which is holding all the contexts  Aspects are grouped to certain different categories in Context, these are the basic ones for all Contexts (you can also add new categories to subclasses as well):\nProperties Holding values, which can be watched, when the valued been changed, all listeners will be notified. The value can be serialized, so can be saved to files or transfered over network.\nYou can also provide checkers on the value, so can implement validation or authentication to the underlining values.\nChannels Channels are used to fire events, which can be watched as well, each event can have a data with it.\nNote: here the data is a simple serialization format, support basic types.\nHandlers Handlers are used for request handling, requests can be sent to handlers, they will check the request data, do according operation, and then return a result.\nBus Bus is for more loose notification, e.g. since you can only listen to a channel when it\u0026rsquo;s already created, there is a timing issue to listen to future channels. Bus is just a simple message, with no data with it. You can also check whether a certain message have been sent as well.\nVars Wrapping for internal values or runtime values (not able to be serialized)\nManners Behaviors that can be added to multiple kind of contexts, e.g. Tickable is implemented as a Manner, means will listen to system\u0026rsquo;s tick channel, create a own tick channel, and fire a tick event accordingly.\nAlso network logic are created as Manner, so they can be added to existing classes, so by following some simple rules (mostly naming conventions), a single player game can be turned into a network one by adding proper manners at client and server sides, the code changes should be rather small.\nWhere\u0026rsquo;s the Code The core lib is available at github, there is no documents at the moment, and extra libraries (not open sourced yet) are needed to use it properly in real project, but the source codes can be used for understanding the concepts, so if you are interested, feel free to clone or fork:\n https://github.com/angeldnd/dap.core.csharp ","permalink":"http://blog.yjpark.org/blog/2017/01/07/introduction-to-dap-context/","tags":null,"title":"Introduction to Dap Context"},{"categories":["code","tool","silp"],"contents":"Why bother with a preprocessor? I was quite busy working on our RTS game on iPad for almost a year, we are quite close to our first public version now. It\u0026rsquo;s developed with Unity3d, using uLink as the network library. Created a quite nice data context system on Unity3d, so non-developers can update pure visual part of the system without developers\u0026rsquo; help, will write some entries on it later when got time.\nSILP is a very small side project come from the process working on it. It\u0026rsquo;s a simple language-agnostic preprocessor.\nThere are many discussions about whether a programming language should include preprocessor, most people seems agree that preprocessor is too error-prune and sacrifice readability too badly, and there should be seldom cases that an alternative can\u0026rsquo;t be find to replace the preprocessor usage.\nI agree that in most cases we don\u0026rsquo;t need preprocessor though there are several cases that I would like to have a preprocessor in my tool set for cleaner codes or can remove some trivial typing. Here are 2 examples:\nCommon Import Statements In each project, most likely there will be some very common import statements that every source file want to include, e.g. logging and other utilities. In dynamic languages such as Python, it\u0026rsquo;s not hard to inject them into the global namespace in some bootstrap functions, though in Java or Go it\u0026rsquo;s not quite possible, each file has to have these lines.\nSince Go support and recommend import from a git url, this is a bit more annoying. Here is a quick example.\nimport \u0026quot;github.com/golang/glog\u0026quot;  It\u0026rsquo;s both longer to type, and harder to change in the future, what if we need to change something in the source codes of the library? We can fork the source repository, and working on it, though we have to go over every source file and change the url of the import. It\u0026rsquo;s not too hard with some tools like sed, though it\u0026rsquo;s a bit ugly and fragile to me since we have to replace in text level.\nOf course with just one import, it\u0026rsquo;s not a big problem, though in practice, it\u0026rsquo;s very easy to have several imports for every file, and quite some other imports grouped by file types (e.g. services that need db library, services that provide RPC calls\u0026hellip;)\nDuplicate Codes Some time, it\u0026rsquo;s not very easy to use usual way to remove duplicated codes, here is an example in Unity3d, it\u0026rsquo;s a piece of our codes to check whether a user is already online in the system.\nprivate IEnumerator SaveArmyAsync(LobbyClient client, ArmyInfo armyInfo) { float startTime = Monitor.AddStartedEvent(LobbyMonitor.ARMY_SAVE_ARMY); string error = LobbyNetError.ACCOUNT_ONLINE_WITH_OTHER_DEVICE; IEnumerator checkOnline = client.CheckOnlinePlayer(_OnlinePlayerInfoBucket, () =\u0026gt; { error = null; }); while (checkOnline.MoveNext()) yield return checkOnline.Current; if (error != null) { LobbyRPCUtils.SendNak(this, client, LobbyMonitor.ARMY_SAVE_ARMY, \u0026quot;RPC_SaveArmyFailed\u0026quot;, error); yield break; }  The logic here may not be very clear without full context, basically what it did is to create a event and send to our istatd server, save the time into startTime, calling client.CheckOnlinePlayer() to check whether the user is logged in the system from other device, and calling LobbyRPCUtils.SendNak() to send a RPC call to the client if the user is already online.\nThe same structure is almost identical for all our server side RPC functions, only difference are the event id and RPC name, in this case LobbyMonitor.ACCOUNT_LOGIN and RPC_OnLoginFailed. As you can see, common functions are created to do most logic. But it\u0026rsquo;s not very easy to make the whole pattern into a shorter format, because we have to follow the coroutine style here.\nFor example, line 3 ~ 7 are running client.CheckOnlinePlayer() in the coroutine way, and line 9 ~ 12 are handling the error case. We can\u0026rsquo;t yield break in client.CheckOnlinePlayer() since it will only break it\u0026rsquo;s own coroutine, instead of the outer one here.\nPassing callback function into client.CheckOnlinePlayer() can solve the error handling, though still need the first trick, and the code will be less readable comparing with this way (using the callback style in many other places though).\nIf we are using a language supporting preprocessor, then we can easily create a macro here to do the duplicated works, though not possible in C#, until I created the SILP project, Our only option was just copy-paste.\nSo What is SILP? After we have more RPC calls in the system sharing the similar code structure shown in last example, I decided to do something to improve it. Solve it in the language scope seems not a good option to me (only possible approach I figured possible was to wrap coroutine somehow and use some customized data structure to provide cleaner interface, both heavy and unnecessary), and I was thinking about finding a language-agnostic preprocessor for a while, so I spent some time to look for a existing project that I can use.\nAfter a quick research, was a bit disappointed with the result, most of the preprocessors either are heavily limited to one language or provide way too much power than I need (so it\u0026rsquo;s harder to learn and use). It\u0026rsquo;s very clear that all I need is just a simple text substitution tools, so I created SILP and spend a whole day on it, the result is quite satisfying.\nHow Simple SILP Is? There is zero logic in the syntax, currently all supported feature is parameter substitution in the template, and unless super useful, no complex feature will be added in the future.\nSILP only handle individual line as well. All generated lines will be put back to the original file after the line with SILP syntax.\nWhen Should Use SILP?  Standard code block that\u0026rsquo;s hard to be eliminated by regular technique. Some small piece of logic that you don\u0026rsquo;t want to wrap in a function and the language doesn\u0026rsquo;t support inline functions.  When Should NOT Use SILP?  If you can remove duplicated code in language supported way. The logic is not standard, and using SILP make them harder to read.  Full Example With SILP After implementing SILP, here is how I can remove the duplicated codes in the previous online player checking logic, here is the silp_cs.md file:\n# LOBBY_SERVER_RPC_CHECK_ONLINE_PLAYER(eventId, nakRPC) # ```C# float startTime = Monitor.AddStartedEvent(${eventId}); string error = LobbyNetError.ACCOUNT_ONLINE_WITH_OTHER_DEVICE; IEnumerator checkOnline = client.CheckOnlinePlayer(_OnlinePlayerInfoBucket, () =\u0026gt; { error = null; }); while (checkOnline.MoveNext()) yield return checkOnline.Current; if (error != null) { LobbyRPCUtils.SendNak(this, client, ${eventId}, ${nakRPC}, error); yield break; } ```  The format is actually a valid github flavored markdown, only supported syntax is the h1 title (has to be like # macro(param1, param2) #), and code block.\nHere is the rendered image with the above example by Marked, looks nice isn\u0026rsquo;t it? (note that you need to toggle the convert fenced code block option)\n  View By Marked   Now all the RPC calls will be like this:\nprivate IEnumerator SaveArmyAsync(LobbyClient client, ArmyInfo armyInfo) { //SILP: LOBBY_SERVER_RPC_CHECK_ONLINE_PLAYER(LobbyMonitor.ARMY_SAVE_ARMY, \u0026quot;RPC_SaveArmyFailed\u0026quot;) float startTime = Monitor.AddStartedEvent(LobbyMonitor.ARMY_SAVE_ARMY); //__SILP__ //__SILP__ string error = LobbyNetError.ACCOUNT_ONLINE_WITH_OTHER_DEVICE; //__SILP__ IEnumerator checkOnline = client.CheckOnlinePlayer(_OnlinePlayerInfoBucket, () =\u0026gt; { //__SILP__ error = null; //__SILP__ }); //__SILP__ while (checkOnline.MoveNext()) yield return checkOnline.Current; //__SILP__ if (error != null) { //__SILP__ LobbyRPCUtils.SendNak(this, client, LobbyMonitor.ARMY_SAVE_ARMY, \u0026quot;RPC_SaveArmyFailed\u0026quot;, error); //__SILP__ yield break; //__SILP__ } //__SILP__  All lines end with //__SILP__ are generated automatically, and can be regenerated with SILP, so if you want to adjust the logic in the future, should be very easy to do, and create a new RPC call is trivial as well, only need to write one line, and run SILP again (current manually, though it should be easy to make it automatically)\nWhat\u0026rsquo;s Next Here is the repository: https://github.com/yjpark/silp\nIt\u0026rsquo;s also available through PyPi, you can install with\npip install silp  Will first finish the documentation for what\u0026rsquo;s working now, maybe adding more languages to default setting (mainly just how to add the special comments).\nMaybe put the language configuration into the silp_xx.md file as well, though it might be more complicate to use and error-prone, so not sure about how to do this yet.\nThere are some interesting possibilities with editors here, e.g. set up code folding for SILP line and the generated line.\n","permalink":"http://blog.yjpark.org/blog/2014/04/12/silp-simple-individual-line-preprocessor/","tags":null,"title":"SILP: Simple Individual Line Preprocessor"},{"categories":["code","tool"],"contents":"Why Not Just Use Evernote? I\u0026rsquo;ve been using Evernote for several years, which is great, the best features to me are:\n Multi devices synchronization High quality app on iOS/Android and OSX Very good search in notes (even in the photos)  Though lately I found myself write less an less in Evernote, if I\u0026rsquo;m writing something long, then usually I will use MacVim, may copy the text back to Evernote. If I need to write a couple of line, the process to write in Evernote is like this:\n Switch to Evernote Find the note for current day (each day I will have a new note.) Go to the end of the note Write something Switch back  Feels a bit heavy, also there is no information about when I did add the line into the note.\nDay One Since 2013 I started to use Day One, which is a very beautiful application(has OSX and iOS versions) for note taking. Here is the reasons that I like it:\n Quick note adding widget in menubar, which can be triggered by a global shortcut Markdown format, rendered very nicely as well. Dropbox synchronization, iCloud supported as well. Every note has a timestamp. Calendar view for all the notes. Look and feels very nice.  Then the process to add a quick note will be:\n Using the global shortcut. Type, then Cmd-Enter to save it.  It\u0026rsquo;s much more light-weigh comparing to the Evernote way.\nWhy Not Just Use Day One? One major missed part in Day One is the lack of Android support, also the search is not as good as evernote, another problem is that you can not see all the notes in one day at once, you have to mouse over each item to see the whole content, which is a bit annoying IMO.\nDayone 2 Evernote So I wrote a very simple script to export Day One entries as a summary note in Evernote.\nTimestamps will be added in front of each entry.\nThe summary note will look like:\n[00:25] One note written in Day One [19:17] Another note in Day One ...  They will not be converted to HTML format, since I prefer to keep the plain text format in Evernote, and MarkDown notes looks very nice as plain text to me.\nNote that since I used the applescript to save the note, it only works on OSX. Also there is some tricks to keep track of the last saved date. Check the README in the repository for more informations.\nThe code is: https://github.com/yjpark/dayone2evernote\n","permalink":"http://blog.yjpark.org/blog/2014/01/21/save-day-one-summary-to-evernote/","tags":null,"title":"Save Day One Summary to Evernote"},{"categories":"marmalade","contents":"During the days to develop our first game: Day Day Birds, I went through the progress of learning to use Marmalade, generally it\u0026rsquo;s very easy to use, and save me lot of time, though there are some little things that I hoped that I know earlier.\nStack Size The game started to crash randomly before I noticed, it\u0026rsquo;s quite hard to debug, especially without the tools in Xcode or other IDEs provide. And it never crash in the simulator, so the debugging is quite awkward, a lot of guess, build, test-run going on.\nWhen it crashed on iOS device, some information were provided, though full stack trace is not availabe, and the place of crash is not consistent. After 2 or 3 days and nights figihting with this bug, finally found out the root cause, which is very surprising.\nIt\u0026rsquo;s caused by stack overflow, since Marmalade is designed to support many different mobile devices, many of them are with limited hardware, the stack size is 32k by default, since I\u0026rsquo;m having a LUA layer, and also allocated some string buffer in stack for convinience, it got overflowed, so caused the random crash.\nThere is actually a forum thread mentioned this.\nSince I only plan to support the modern devices (iPhone, iPad, maybe Android as well), gave it a much bigger setting fix the crash perfectly.\n [s3e] SysStackSize=4000000  Accelerate framework I\u0026rsquo;m using libBass for the audio playpack, for some reason it require Accelarate frame under iOS to compile. so I add iphone-link-opts=\u0026quot;-weak_framework Accelerate\u0026quot; into the mkf file.\nFor unknown reason, the Accelerate.framework stub in /Developer/Marmalade/6.2/s3e/deploy/plugins/iphone/sys_libs/System/Library/Frameworks/Accelerate.frameworks/Accelerate is not working, might be the nested frameworks inside it.\nNot really understand how the stub frameworks work in Marmalade, seems a smart way to use the system\u0026rsquo;s SDK libraries, though a hacky solution make it compiled.\nCurrent fix is to copy the framework from /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/System/Library/Frameworks/Accelerate.framework. Not sure whether there is side effects.\ncp -r /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/System/Library/Frameworks/Accelerate.framework/* /Developer/Marmalade/6.2/s3e/deploy/plugins/iphone/sys_libs/System/Library/Frameworks/Accelerate.framework/  iOS device crash report This page explains how to read the crash report nicely, also don\u0026rsquo;t forget to save the mapping file of the version you submitted to app store, otherwise you will have no idea to debug when get crash logs from Apple.\nHow to map iPhone crash log addressed to your code\nSome mkb settings deployments { name=\u0026quot;Slingshot\u0026quot; version=1.0 [\u0026quot;Default\u0026quot;] iphone-provisioning-profile=\u0026quot;data/provisions/DayDayBirdsDev.mobileprovision\u0026quot; iphone-enable-4inch-retina=1 iphone-no-splash=1 iphone-prerendered-icon=1 iphone-icon=\u0026quot;data/icon/Icon.png\u0026quot; iphone-icon-high-res=\u0026quot;data/icon/Icon@2x.png\u0026quot; iphone-icon-ipad=\u0026quot;data/icon/Icon-72.png\u0026quot; iphone-icon-ipad-high-res=\u0026quot;data/icon/Icon-72@2x.png\u0026quot; iphone-icon-ipad-search=\u0026quot;data/icon/Icon-Small-50.png\u0026quot; iphone-icon-ipad-search-high-res=\u0026quot;data/icon/Icon-Small-50@2x.png\u0026quot; iphone-icon-settings=\u0026quot;data/icon/Icon-Small.png\u0026quot; iphone-icon-settings-high-res=\u0026quot;data/icon/Icon-Small@2x.png\u0026quot; #Android android-icon=\u0026quot;data/android/icon/icon_48.png\u0026quot; android-icon-gallery=\u0026quot;data/android/icon/icon_170.png\u0026quot; android-icon-hdpi=\u0026quot;data/android/icon/icon_72.png\u0026quot; android-icon-ldpi=\u0026quot;data/android/icon/icon_36.png\u0026quot; android-icon-mdpi=\u0026quot;data/android/icon/icon_48.png\u0026quot; }  iphone-enable-4inch-retina=1 enabled the iPhone 5 wide screen mode.\nSome app.icf settings DispFixRot=\u0026quot;Landscape\u0026quot; IOSDispScaleFactor=200 {ID=IPHONE \u0026quot;iPad1,1\u0026quot;} [s3e] memSize = 30000000 SysStackSize=1000000 {ID=IPHONE \u0026quot;iPad2,1\u0026quot;,\u0026quot;iPad2,2\u0026quot;,\u0026quot;iPad2,3\u0026quot;,\u0026quot;iPad2,4\u0026quot;,\u0026quot;iPad2,5\u0026quot;,\u0026quot;iPad2,6\u0026quot;,\u0026quot;iPad2,7\u0026quot;} [s3e] memSize = 64000000 {ID=IPHONE \u0026quot;iPod1,1\u0026quot;,\u0026quot;iPod2,1\u0026quot;,\u0026quot;iPod3,1\u0026quot;,\u0026quot;iPod4,1\u0026quot;,\u0026quot;iPhone1,1\u0026quot;,\u0026quot;iPhone1,2\u0026quot;,\u0026quot;iPhone2,1\u0026quot;} [s3e] memSize = 34000000 SysStackSize=1000000 {ID=IPHONE \u0026quot;iPod5,1\u0026quot;,\u0026quot;iPhone3,1\u0026quot;,\u0026quot;iPhone3,2\u0026quot;,\u0026quot;iPhone4,1\u0026quot;,\u0026quot;iPhone4,2\u0026quot;} [s3e] memSize = 64000000 {OS=ANDROID} [s3e] memSize = 80000000 {OS=OSX} [s3e] memSize = 256000000 {}  DispFixRot=\u0026quot;Landscape\u0026quot; is to lock the screen rotation to be landscape only, I\u0026rsquo;ve met quite some problem with landscape, probably will write another post about it.\nIOSDispScaleFactor=200 is used to activate the retina screen support, so the resolution of retina iPad will be 2048 x 1536,\nIt took me quite some efforts to learn how to do the device-specific settings in app.icf, the syntax is quite complex, the marmalade documents actually cover this, though lacking good samples.\n","permalink":"http://blog.yjpark.org/blog/2013/04/14/marmalade-tricks-and-tips/","tags":null,"title":"Marmalade Tricks and Tips"},{"categories":["marmalade","pfgame","code"],"contents":" The audio and music are playing a very important role in games, for our future games, I want them to have good quality of audio and music, e.g. don\u0026rsquo;t use short loop of mp3 music, but something much longer and more dynamic without taking much space. My first thought is to use MIDI+soundfonts or some mod-based music, so I spent some time to try to see the possibility.\nThere are quite some libraries to support xm playback, though I can\u0026rsquo;t find any Marmalade extensions on the web, in the forum someone mentioned that they made use of FMOD in their game, though there is no code shared, and FMOD is quite expansive.\nAfter some search, I decided to use BASS audio engine, which is quite powerful, with well designed API, not bad documentation and sample, and a reasonable price for small projects (the shareware license can cover product with small price).\nNow I\u0026rsquo;ve got a working extension(though the only test I did was to play a xm file on OSX, iOS and Android), think other people maybe interesting in the extension or how to create similar extensions, so I\u0026rsquo;m going to share the extension and some experiences I\u0026rsquo;ve learn from the process(not in this post).\nQuick Note about Implementation BASS itself support many platform, the platforms I need are: OSX, iOS, Android. It\u0026rsquo;s pure C, so it shouldn\u0026rsquo;t be too hard to make it work with Marmalade. Though it took me quite a while to get some basic idea about the Marmalade extension system.\nMost documentation from Marmalade about extensions seems focusing on writing platform specific codes in custom extension, in this case, it\u0026rsquo;s actually much more easier since BASS is already platform independent, all we need is to make it work with Marmalade\u0026rsquo;s build system.\nWill write more about how to wrap C libraries into Marmalade extension in other posts later.\nCode of the Extension Since basically I have no idea about how to use BASS now, I just tried to use some codes from the BASS examples, it works pretty good, the xm files sounds quite good.\nThink I will write some wrapper layer around the C function calls to expose audio functionalities to C++, XML and Lua codes. Guess I will have much better idea about it in a couple of months after our first game get done.\nI\u0026rsquo;ve put the codes at Github, feel free to clone it, and give it a try. see the github pages for more details about it.\n","permalink":"http://blog.yjpark.org/blog/2012/11/06/initial-release-of-s3ebass-marmalade-extension-for-bass-audio-engine/","tags":null,"title":"Initial Release of s3eBass - Marmalade extension for BASS audio engine"},{"categories":["marmalade","pfgame","code"],"contents":" In 2D games, it\u0026rsquo;s typical to use image based font for UI elements, which can provide better graphic result, fast rendering, and usually smaller then true type fonts (especially if you want to support languages with big character set, e.g. Chinese).\nThere are quite some tools to generate such font images, I\u0026rsquo;m using bmGlyph as the font generator, it can publish the popular \u0026ldquo;Cocos2d / BMFont\u0026rdquo; format, though it\u0026rsquo;s not directly usable in Marmalade.\nMarmalade is using its own font format, and provide a font generator in the SDK, though it only support plain color, and when I feed it with some Chinese characators, they are not included in the generated files. I\u0026rsquo;m using the OS X version of the font builder, not sure about how the Windows version works.\nMy first thought was to add function to use the BMFont generated, though it\u0026rsquo;s not an easy task, also I want to use IwGame\u0026rsquo;s label components, which are based on Marmalade\u0026rsquo;s GxFont and Truetype support.\nAfter reading GxFont Reference, turns out it\u0026rsquo;s using a fairly simple format, so I decided to write a converter to create gxfont files.\nCode of the Converter I\u0026rsquo;ve put the codes at Github, feel free to clone it, and try to run it. see the github pages for more details about it.\nThe converter support UTF-8 characters with no problem, the size of the tga files is a bit big comparing to the Cocos2d version, since more empty spaces are needed for GxFont format.\nIt\u0026rsquo;s kind of a straight-forward implementation, and probably there are ways to make it better, especially if the bmGlyph\u0026rsquo;s console support is out (in the coming feature list now), the whole process of extracting characters from data file, create Cocos2d font, convert to GxFont can be fully automatied.\nJust read the code if you\u0026rsquo;re interested in the implementation details. :)\n","permalink":"http://blog.yjpark.org/blog/2012/11/05/convert-cocos2d-font-bmfont-to-marmalades-gxfont/","tags":null,"title":"Convert Cocos2D Font (BMFont) to Marmalade's GxFont"},{"categories":["iwgame","pfgame"],"contents":" It\u0026rsquo;s been more than a month since my post about the idea of game engine based on Marmalade and IwGame, after the post, spent many hours busy coding, now I\u0026rsquo;ve got the basic level editor up running, I think it\u0026rsquo;s pretty cool, so here are some details about it.\nHere is a screenshot of the level editor:\n  Level Editor Screen Shot 1   Updates about Original Post Before talking about the level editor, first I want to share some updates about Marmalade and IwGame in the last month.\nFirst, Marmalade 6.1 was released, it\u0026rsquo;s great for me, the 2 most useful feature for me are: Open GL ES 2.0 shader support in simulator, easy to debug shader now, and OSX deployment to send game/editor as running application to Graphic Artists.\nSecond, DrMop commented in the original post, assure that IwGame is very actively developed and version 0.40 is about to be released.\nQuick test with Chinese characters in CIwGameActorText, it works out of box, just specify a truetype font, write the text in UTF-8, then it\u0026rsquo;s done. I guess there is no need for CIwGameString to support unicode, since it can pass the bytes to Marmalade correctly.\nCurrent Features Now back to the level editor, it support image objects with layer(display order), depth(for parallel perspective), users can add/remove/copy/group objects, and can change position/size/scale/angle/origin with mouse, zoom in/out and move the camera around. Also I\u0026rsquo;ve integrated a Box2D debug view, and you can edit simple shape in it too (boxes and circles).\nActually it\u0026rsquo;s a bit easier than I thought to implement it, caused me about 5 weeks so far, worked quite hared during the time, but also had a basic animation editor and a game prototype at the same time, so the pure time on it was about 3 weeks.\nOur graphic artists have already used the editor to build a few nice scenes and they are getting more productively with it day by day, It\u0026rsquo;s just what I wished it to be: a tool to make developer and other roles to collaborative more effectively, think it\u0026rsquo;s at the right direction.\nAlso it\u0026rsquo;s extremely useful for prototyping and debugging, the way I did it is to add a few tools around the objects, so when you\u0026rsquo;re running your game, you can switch to editor mode at any time (by tapping the tab key), then you can check the scene to see what\u0026rsquo;s going on, or adjust the objects right in the editor, then you can switch back to game mode. It feels like you can freeze time in game at any time, then make changes, then go back, very cool, and very useful.\nTo make it clear, here is a screenshot of our game prototype:\n  Level Editor Screen Shot 2   After I switch to editor mode, and zoom out a bit, I can get the screen as the first screenshot, then I can adjust the level, and switch back to keep playing. Our graphic artist feels very happy with this in game editing ability, they can see their changes instantly, which make the whole process very efficiently.\nAnother very useful feature is the Box2D shape editor and debug view, we can create boxes and circles right through the level editor, they will be effective instantly, so for a game based on Box2D, it\u0026rsquo;s very easy to create the levels by non-programmers.\nHere is the same game prototype with Box2D debug view enabled:\n  Level Editor Screen Shot 3   As you can see, we use boxes and circles to create a rather complicate level. Also it\u0026rsquo;s very helpful to debug the collisions between objects, e.g. when I was implementing the effect of arrows hitting targets.\nWhat\u0026rsquo;s Missing As a basic level editor with advanced features (particle, animations\u0026hellip;), I think it\u0026rsquo;s quite complete and usable, we\u0026rsquo;ve got quite some prototype scenes with it till now, and the artists feel happy with it most of the time.\nThe biggest missed feature is undo/redo, only deleting have a quick undo since it can cause big trouble when touch wrong key accidentally. To make it better, all version of saved files are kept on disk, so if you made big mistakes, then it\u0026rsquo;s recoverable by hand. It\u0026rsquo;s non trivial to implement a good undo/redo system, so probably this feature will only be added in a much later stage.\nAlso there is on gui at all, all functions are done by keyboard shortcut and mouse movement, so there is a learning curve, and you\u0026rsquo;ll feel a bit awkward at first. Though this is the quickest way for implementation and also for actually using IMO, after a few days using it, both of our graphic artists can use it with no big problem, and they said that it\u0026rsquo;s a bit geeky feeling when using it. :)\nAnd manual works required to create a skeleton scene and import images to it, it\u0026rsquo;s not hard, just running some python scripts, but it\u0026rsquo;s still not so simple for non-programmers.\nWhat\u0026rsquo;s Next Guess I\u0026rsquo;ll keep improving it, fixing bugs first, now the focus is character animation editor, and the game prototype. After that, I\u0026rsquo;ll add particle feature to the level editor.\nI feel quite happy doing this kind of tool works, and actually it\u0026rsquo;s not hard to make it usable as a standalone project and let other people to use it. e.g. I can make a converter to generate cocos builder format, then it can be used in cocos2d projects. Or if I make my animation editor to export spriter\u0026rsquo;s xml syntax, it can be used in many other projects too.\nAnd at least for myself and our graphic artists, we think that our homebrew tools are much easier to use and feature complete (for just our needs) comparing to the tools we\u0026rsquo;ve tried. e.g. cocos builder, sprite helper, and spriter. Not saying that my editors are better products, just they are tailored by exactly our need and my design approach, and since it\u0026rsquo;s integrated in the exact game process, the workflow is much better comparing to a 3rd party tools. Also our level is pretty big(currently the demo scene is about 20000 pixel wide, and the engine/editor can support much bigger usage), I can\u0026rsquo;t find a proper tool to handle such big scene.\nThough making a generic tool will involve many not so interesting works, and it\u0026rsquo;s very hard to make it works for more people, and probably my tools are just too tailored to our need, so I think I will keep focusing on our games in the near future.\nBut anyway, I already have some demo scene editor running as OS X application, will make it downloadable in next few days, after I wrote a very basic manual about it. like Jakub commented in the original post, even if I decided to keep it private, it can still help others a bit, and maybe by using it in a experimental way, people can get some ideas about improving their own tools.\nIf you are interested to see more information about the editor, please leave comments, thanks.\nI\u0026rsquo;ll try to post more about technical details about some aspects of the editors, some hacks I used, and some mistakes I\u0026rsquo;ve overcomed.\n","permalink":"http://blog.yjpark.org/blog/2012/10/12/level-editor-based-on-iwgame-introduction/","tags":null,"title":"Level Editor Based on IwGame - Introduction"},{"categories":["iwgame","marmalade"],"contents":" Marmalade provide good support for writing custom shaders in it, though it\u0026rsquo;s not easy to get all the information to start writing the first shader in my case, here is some information that I gathered during the process.\nI decided to only support Open GL 2.0 Shaders in our games, most current devices support it, and as a small team, supporting older devices is a bit hard since we don\u0026rsquo;t have testers for now, also the architect of 2.0 is simpler and cleaner.\nThe sample shader\u0026rsquo;s function is to replace non-transparent part of the image to a given color, then the color can be changed programmingly (also by xml thanks to IwGame). Basically the images will be just working as masks, the actually color to be rendered are controlled by the shader.\nI will not cover the basics about Open GL Shaders, there are plenty of information on the web about that, also a PDF doc is included in Marmalade installation, it\u0026rsquo;s a good start point to me, you should read it first to get the concepts.\nMarmalade Rendering with Custom Shader Marmalade support shader very well by the CIwGxShaderTechnique class, to use it, you need to set it to material, here is the snnipet for that:\nCIwMaterial* mat = IW_GX_ALLOC_MATERIAL(); mat-\u0026gt;SetTexture(image-\u0026gt;getImage2D()-\u0026gt;GetMaterial()-\u0026gt;GetTexture()); mat-\u0026gt;SetShaderTechnique(shader); IwGxSetMaterial(mat);  The shader here is a pointer to CIwGxShaderTechnique, and the image is a pointer to CIwGameImage (part of IwGame), if you are not using IwGame, you can use Iw2d, or IwGx directly.\nThe following function can load a shader from a resource group.\nCIwGxShaderTechnique* getShader(const char* shaderName) { CIwGxShaderTechnique* shaderTemplate = (CIwGxShaderTechnique*)IwGetResManager()-\u0026gt;GetResNamed(shaderName, \u0026quot;CIwGxShaderTechnique\u0026quot;); if (shaderTemplate == NULL) { return false; } shader = new CIwGxShaderTechnique(); IwSerialiseOpen(\u0026quot;shader-Duplicate.bin\u0026quot;, false); shaderTemplate-\u0026gt;Serialise(); IwSerialiseClose(); IwSerialiseOpen(\u0026quot;shader-Duplicate.bin\u0026quot;, true); shader-\u0026gt;Serialise(); IwSerialiseClose(); return shader; }  Note: since I need multiple instance of the shader for diffrent images with differnt colors, here I use a quick solution with marmalade\u0026rsquo;s serialization, which is NOT thread safe due to the hard code file name.\nLoad the resource group as this:\nIwGetResManager()-\u0026gt;LoadGroup(\u0026quot;effect/Shaders.group\u0026quot;);  Files Used You need to include the shader files in the asset section of the mkb/mkf file, like this\nfiles { [Data] (data) effect/Shaders.group } assets { (data-ram/data-gles1) effect/Shaders.group.bin }  Please refer to Marmalade\u0026rsquo;s documents if you are not familiar with the resource compiling process and mkb syntaxes.\nHere is data/effect/Shaders.group\nCIwResGroup { name \u0026quot;PettyFun Environment Shaders\u0026quot; shared true \u0026quot;./PfMaskEffectShader.itx\u0026quot; }  The content of data/effect/PfMaskEffectShader.itx\nCIwGxShaderTechnique { name \u0026quot;PfMaskEffectShader\u0026quot; param \u0026quot;p_Color\u0026quot; vec4 1 {0.0, 0.0, 1.0, 1.0} shader \u0026quot;vertex\u0026quot; { attribute highp vec4 inVert; attribute mediump vec2 inUV0; uniform highp mat4 inPMVMat; uniform mediump vec2 inUVOffset; uniform mediump vec2 inUVScale; varying mediump vec2 v_UV0; void main(void) { gl_Position = inPMVMat * inVert; v_UV0 = inUV0 * inUVScale + inUVOffset; } } shader \u0026quot;fragment\u0026quot; { uniform sampler2D inSampler0; varying mediump vec2 v_UV0; uniform mediump vec4 p_Color; void main(void) { mediump vec4 c = texture2D(inSampler0, v_UV0); if (c.a \u0026lt; 0.1) { gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0); } else { gl_FragColor = p_Color; } } } }  Please read IwGxShaderTechnique Reference for the list of the attributes that you can use. It took me quite a while to find this document since this is no links to this page on the class reference page. This is VERY useful for writing shaders in Marmalade.\nUpdate Params By Code and XML the param in the shader is for the parameters from your code, change it\u0026rsquo;s value like this.\nvoid PfShaderEffect::SetShaderParam(const char *paramName, CIwGxShaderUniform::CIwGxShaderUniformType type, const void* value) { if (Shader == NULL) return; CIwGxShaderUniform* param = Shader-\u0026gt;GetParam(paramName); if( param ) { param-\u0026gt;Set(type, 0, value); } else { PfTrace(\u0026quot;Shader Param Not Exist: %s\u0026quot;, paramName); } } void PfShaderEffect::SetShaderParamAsInt(const char *paramName, int value) { SetShaderParam(paramName, CIwGxShaderUniform::INT, \u0026amp;value); } void PfShaderEffect::SetShaderParamAsFloat(const char *paramName, float value) { SetShaderParam(paramName, CIwGxShaderUniform::FLOAT, \u0026amp;value); } void PfShaderEffect::SetShaderParamAsColor(const char *paramName, CIwColour value) { float color[4]; color[0] = 1.0f * value.r / 0xff; color[1] = 1.0f * value.g / 0xff; color[2] = 1.0f * value.b / 0xff; color[3] = 1.0f * value.a / 0xff; SetShaderParam(paramName, CIwGxShaderUniform::VEC4, color); } void PfShaderEffect::UpdateColorFromAnimation(CIwColour* color, CIwGameAnimInstance *animation) { CIwGameAnimFrameVec4* value = (CIwGameAnimFrameVec4*)animation-\u0026gt;getCurrentData(); color-\u0026gt;r = value-\u0026gt;data.x; color-\u0026gt;g = value-\u0026gt;data.y; color-\u0026gt;b = value-\u0026gt;data.z; color-\u0026gt;a = value-\u0026gt;data.w; }  Since I\u0026rsquo;m using IwGame, it\u0026rsquo;s very easy to make the color controlled by the XOML animation, all I need to do is to override the UpdateFromAnimation method of CIwGameActor, and handle the color value from it.\nbool PfMaskEffect::UpdateFromAnimation(CIwGameAnimInstance *animation) { if (PfShaderEffect::UpdateFromAnimation(animation)) return true; bool delta = animation-\u0026gt;isDelta(); unsigned int element_name = animation-\u0026gt;getTargetPropertyHash(); if (element_name == PfHash(\u0026quot;Color\u0026quot;)) { UpdateColorFromAnimation(\u0026amp;Color, animation); SetShaderParamAsColor(\u0026quot;p_Color\u0026quot;, Color); } else { return false; } return true; }  Then you can generate smooth color switch animation by pure XML as normal IwGame Animation.\n\u0026lt;Template Name=\u0026quot;MaskColorTimelineTemplate\u0026quot;\u0026gt; \u0026lt;Animation Name=\u0026quot;MaskColorAnim$name$\u0026quot; Duration=\u0026quot;$duration$\u0026quot; Type=\u0026quot;vec4\u0026quot;\u0026gt; \u0026lt;Frame Value=\u0026quot;$startcolor$\u0026quot; Time=\u0026quot;0\u0026quot; /\u0026gt; \u0026lt;Frame Value=\u0026quot;$endcolor$\u0026quot; Time=\u0026quot;$duration$\u0026quot; /\u0026gt; \u0026lt;/Animation\u0026gt; \u0026lt;Timeline Name=\u0026quot;MaskColorTimeline$name$\u0026quot; AutoPlay=\u0026quot;true\u0026quot;\u0026gt; \u0026lt;Animation Anim=\u0026quot;MaskColorAnim$name$\u0026quot; Target=\u0026quot;Color\u0026quot; Repeat=\u0026quot;1\u0026quot; StartAtTime=\u0026quot;0\u0026quot;/\u0026gt; \u0026lt;/Timeline\u0026gt; \u0026lt;/Template\u0026gt; \u0026lt;Actor ...\u0026gt; \u0026lt;FromTemplate Template=\u0026quot;MaskColorTimelineTemplate\u0026quot; name=\u0026quot;ColorChange\u0026quot; duration=\u0026quot;2\u0026quot; startcolor=\u0026quot;180, 220, 251, 255\u0026quot; endcolor=\u0026quot;255, 0, 0, 255\u0026quot; /\u0026gt; \u0026lt;/Actor\u0026gt;  This is very flexible and powerful, no need to recompile, just updating plain XML files.\n","permalink":"http://blog.yjpark.org/blog/2012/10/02/opengl-es-2-dot-0-shader-in-marmalade/","tags":null,"title":"OpenGL ES 2.0 Shader in Marmalade"},{"categories":["pettyfun","game","iwgame","marmalade"],"contents":" Since August 2012, 2 developers(including me) and 2 graphic designers come together and started a small game studio to work on some mobile casual games, as the tech lead, I need to choose a development way for our first batch of games.\nOur games will be mostly 2D games, might with some 3D charactors, though the scenes or levels will be 2D, I think that\u0026rsquo;s better for the team and the graphic quality of the games.\nAfter quite some readings and experiments, I finally have a clear idea about how we gonna build these games, We will create our small game engine, on top of Marmalade and IwGame.\nWhy choose Marmalade? I did have quite some experience on cocos2d, though it\u0026rsquo;s been ruled out pretty quickly. I want our game to work on multiple platforms, since we don\u0026rsquo;t use much platform-specific features, we don\u0026rsquo;t get much with objective-c. Also personally I am not really a big fan of cocos2d, it\u0026rsquo;s kind of a simple framework with good quality, though missing some of the features I want with a solid framework, e.g. Tool or Markup for graphic scene editor, I\u0026rsquo;ve tried Cocos Builder and Level Helper very breifly, might be just me, but I don\u0026rsquo;t like neither one. A similar option is to go with cocos2d-x, which is cross platform, but because of similar reason, I didn\u0026rsquo;t dig into it deeply.\nThe second option is Unity3d, I\u0026rsquo;ve used it for about 3 months before, It\u0026rsquo;s pretty good, easy to use, and have a hugh community with tons of good plugins. My biggest concern about it is the binary format of the prefebs, it\u0026rsquo;s a bit like the xib file in App development, hard to change and track, as a developer, I want a text based format. Also don\u0026rsquo;t really think the .Net virtual machine is the best way for our rather small games. My feeling is that it\u0026rsquo;s more like a tool for game designers and graphic designers, as developers, we gave up full control in exchange with a full-feature game development environment. And also it\u0026rsquo;s mostly 3D centric, 2D works are possible, but a bit awkard, since we don\u0026rsquo;t need the 3D power and I want more control with my codes, I did not take this path either.\nFor good performance and graphic effects, I didn\u0026rsquo;t investigate the fast development tools, most of them are HTML based or LUA based, more like quick prototype tools for me.\nI\u0026rsquo;ve played with Airplay for a couple of days 2 years ago, technically it was very good, though with a rather steep learning curve, and lack of tutorials and blog post, so I didn\u0026rsquo;t really learn it as a hobby. Now it\u0026rsquo;s renamed to Marmalade, been updated pretty often, and having a much bigger user base and many successful games are based on it, like Draw Something or Cut The Rope. Since I will use the chosen platform for at least 1 or 2 years, I spend a week to really try to learn it this time.\nThe first impression was kind of negative, the OSX support seems to be much weaker than the windows one, a bunch of small problems were met, which almost make me give it up. Now I\u0026rsquo;ve been using it for about 1 month, still got some problem, though I think I start to feel comfortable with it.\nThere are still very few technical information about marmalade other than the official documents and forum, the only helpful tutorial I can find is the DrMop tutorials. It\u0026rsquo;s very helpful to provide basic ideas for new Marmalade users.\nThe API documents of Marmalade is actually quite good after you get the basic ideas about it. Also the examples included are good learning source.\nMy current feeling about Marmalade is quite positive, it has nice features and solid quality, provide full control, has native bridge for potential platform-specific development.\nThe things I wish to be better:\n 1st class OSX support, add the missing features of the simulator, fix the broken \u0026ldquo;mkb \u0026ndash;iphone\u0026rdquo; device building (only trid on 10.8 + Xcode 4.4, not sure about other environments). (Update: \u0026ndash;iphone is fixed in 6.1, simulator seems not updated) Release to osx ability, then I can create desktop tools such as customized level editor instead of let my graphic designers to use the simulator to run them. (Update: Added in 6.1) Float data types in IwGx, it\u0026rsquo;s said to be included in 6.1 release which should be out soon, much simpler and less error-prone, we\u0026rsquo;ll target on OpenGL ES 2.0 devices only (iOS devices first) to make our life easier since we can\u0026rsquo;t afford dedicated tester anyway. (Update: Float added in 6.1 and works great, though we probably will not change IwGame to use float) High level document besides API reference, and generally more documentations. Better community and 3rd party components, it\u0026rsquo;s quite unpopular in stackoverflow, very few blogs, and the github community projects are not very active and organized.  What is IwGame, and Why it is Helpful Marmalade is very low level, its design priciple is that people can make their engine working on it rather easily, but we don\u0026rsquo;t have any game engine yet, so either I need to write a 2D engine from scratch, or choose a C/C++ engine to work with. Cocos2d-X works on Marmalade, though I want something more powerful. Many 3D engine works on it too, but they are too complex to me, I probably will choose Unity3D if I want a 3D engine.\nAccording to the website, IwGame is a \u0026ldquo;Free Open Source Cross Platform Mobile Game Engine for Smart Phones and Tablets\u0026rdquo;, it\u0026rsquo;s a quite ambitious project, already has a long feature list with many future features, though still in an rather early stage.\nThe main reasons I chose it:\n Open source, I can tweak the codes to suit my needs better, and even if its development stopped, we can still improve it by ourselves. XML file format, it\u0026rsquo;s very powerful, e.g. make simple animations easily without coding. Also it\u0026rsquo;s very easy to extend the system to add our own extensions. This is a hugh advantage to me. Complete 2D framework, including sprite, scene, particle, physics, UI\u0026hellip; No need to reimplement the basic things from the scratch, we can focus on more interesting stuffs. Support 2D and 3D rendering, since the rendering codes are based on IwGx now, even for 2D games, some part of 3D elements can be very useful, so I think this flexibility is very good. Good document and a full game source included, there are quite some typos in the included PDF document, though it provide most information I need to get started, plus reading the source code, It\u0026rsquo;s kind of easy to learn (though still much harder comparing to cocos2d family). Good code quality, easy to read and not hard to expand.  Some worries about base our codes on it:\n It\u0026rsquo;s a big project, and seems most code and docs are written by DrMop in several monthes. He did very great so far, though he has too many works ahead him, I am not sure where this project will be after 1 year, what if it\u0026rsquo;s dead? also it\u0026rsquo;s been a while since the last update. On the other hand, if it\u0026rsquo;s been developed rapidly, since it\u0026rsquo;s not finished yet, we will need to expand it by ourself, it can be a problem to keep update with the future updates. I don\u0026rsquo;t want to make a fork since many good features are on the list, though we can\u0026rsquo;t wait for they to appear, We will be careful with out changes to make them easy to merge, but what if the owner decide to change the API interface drasticly? The core string class (CIwGameString) is not unicode compatible, and the author didn\u0026rsquo;t have plan to support it soon. This can be a big problem for us to support multiple language, especially the asian languages. I want to find a clean solution for this, though haven\u0026rsquo;t started working on it yet. There is no unit tests yet, so it might introduce its own bugs, especially if it\u0026rsquo;s been update quickly.  My Plan on The Game Engine Now I feel OK working with Marmalade and IwGame, the next steps will be creating the features/tools we need for our games, i.e. create a game engine for our requirements.\nHere is the current list of works to be done:\n Basic level editing, to arrange 2D sprites on screen, supporting basic operations such as moving, scaling, rotating, etc. Our level/scene will be 2D non-tile with multiple layers, something similar to this Complex charactor editing, 2D or 3D charactors with body parts, movement and animations. Advanced level editing, particles, visual effects, events, etc. UI editing.  All these editors will base on the XOML markup system of IwGame.\nThese are still quite some works, might be over engineering for our first game, though as a developer, I don\u0026rsquo;t want to just do things in the quick and dirty way, I want to do it in a proper way. And I think a proper engine can make future games easier to develop, so in the long run, it will worth the efforts.\nThink I will start to write more about Marmalade and IwGame in the future, both help myself to understand them better, and hopefully might help some other developers too.\n","permalink":"http://blog.yjpark.org/blog/2012/08/30/game-engine-based-on-marmalade-and-iwgame/","tags":null,"title":"Game Engine Based on Marmalade and IwGame"},{"categories":["tool","code"],"contents":" What is PlantUML? PlantUML is a component that allows to quickly write:\n sequence diagram, use case diagram, class diagram, activity diagram, component diagram, state diagram object diagram  I really like the idea of writing UML diagram with plain text. Since it\u0026rsquo;s totally plaintext, it\u0026rsquo;s very easy to do diff and version track, also you don\u0026rsquo;t need to do anything about the layout (the text itself looks pretty good too).\nAlso the syntax of it is very well designed, and the generated diagrams looks really nice, so I use PlantUML for technical documentation with trac and sphinx.\nThe Plugin After switching Octopress to my blog platform, I was looking for a way to integrate PlantUML within it, though I can\u0026rsquo;t find one, so I wrote this very simple jekyll plugin (Octopress is based on Jekyll).\njekyll-plantuml\nConfiguration You need to download the plantuml.jar file from http://plantuml.sourceforge.net/download.html\nIn your _config.xml, setup plantuml_jar to the downloaded jar file, e.g.\nplantuml_jar: ../_lib/plantuml.jar plantuml_background_color: \u0026quot;#f8f8f8\u0026quot;  The plantuml_background_color is optional, which will change the background of the generated diagram.\nUsage Just wrap the diagram text in \u0026ldquo;plantuml\u0026rdquo; block, e.g.\n{% plantuml %} Alice -\u0026gt; Bob: Authentication Request Bob --\u0026gt; Alice: Authentication Response Alice -\u0026gt; Bob: Another authentication Request Alice \u0026lt;-- Bob: another authentication Response {% endplantuml %}  An Example   CQ: Critical bug\\n reported group Fix RD P4C: Create bugfix\\n configuration RD - P4CTB: Create topic branch (by tools) RD - P4CTB: Working on the bugfix RD - CQ: Resolve end group group Virification QA CQ: Confirm end group group Release BM P4CRB: Update customer\\n branches P4CTB - P4CRB: Auto integrate\\n (by tools) end loop end group {% endplantuml %} -- ","permalink":"http://blog.yjpark.org/blog/2012/04/30/plantuml-plugin-for-octopress/","tags":null,"title":"PlantUML Plugin for Octopress"},{"categories":["pettyfun","ios","movablewrite","code"],"contents":" What is Movable Write Back in 2010, I already had some experiences on iOS development. Did wrote some very simple application to fetch information over HTTP-RPC to a trac instance, and wrote a very simple game with Cocos2D and Box2D. Did spend some time to catch up with the versions or iOS updates and read about the new APIs.\nBut my feeling was that by only spend small amount of time like it, I can never learn enough to have real experience on it, and I\u0026rsquo;ve been working on Web development for a few years. So I decided to work part-time in the company, and use the other half time to develop a real application, by real I mean with proper quality and released at app-store.\nI just got a iPad1 as development device, and tried a few apps, I liked note plus a lot, it\u0026rsquo;s very powerful, but a bit too powerful for my need, I want to write words most of the time, and I want to write largely, but view the written lines small.\nSo I decided to write a note taking app for myself, after 3 months, Movable Write was released at app store.\n App store link A nice introduction from wolfewithane.com Another nice introduction from iapp.com.tw (in Chinese)  What is missed I did implement support for USB transfer for backup/restore, though didn\u0026rsquo;t write document about this feature, the plan was to implement synchronization for it, Dropbox and/or iCloud, though didn\u0026rsquo;t get time for it.\nAnother interesting possibility is Evernote integration, the code should be very easy to be runnable on OSX, also can be added as image or pdf.\nA bigger change is adding bigger element into page, e.g. a photo then wrap the lines around it. I\u0026rsquo;ve done some experiments about bigger writing area, it\u0026rsquo;s not easy to put it into the current structure though.\nAnother bigger one is OCR for the written words, there are open-source libraries, though not sure how mature they are, all the original writing information are saved in file, it might be easy to add this feature.\nA small one is to replay the writing process of the note, since all the timing infomation was saved too, this is not hard to implement.\n\u0026hellip;\nWhy open sourced It\u0026rsquo;s sadly that I can\u0026rsquo;t put more dedicated time into it, since it didn\u0026rsquo;t bring much money as a product for a small group of people, though I get quite some very good comments from some users.\nI feel very happy that some people found it useful and use it frequently, so in case any of them are programmer, I decided to put all the source codes at github, please fork it if you\u0026rsquo;re interesting.\n Movable Write at Github  Might write more about the technical side of the project later, what I\u0026rsquo;ve learned, and how to extend it.\n","permalink":"http://blog.yjpark.org/blog/2012/04/22/movable-write-open-sourced/","tags":null,"title":"Movable Write Open Sourced"},{"categories":null,"contents":" TODO ","permalink":"http://blog.yjpark.org/page/about/","tags":null,"title":""},{"categories":null,"contents":" This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ` [outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;] \\`\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ` ... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ... \\`\nEdit fuse.js options to Search static/js/search.js ` keys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ] \\`\n","permalink":"http://blog.yjpark.org/search/","tags":null,"title":"Search Results"}]
>>>>>>> 0bc8d3640ba5b17639bd6f973b1f17a7b7ddcdfc
