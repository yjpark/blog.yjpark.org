<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iwgame | Living and Programming - YJ Park's Blog]]></title>
  <link href="http://blog.yjpark.org/blog/categories/iwgame/atom.xml" rel="self"/>
  <link href="http://blog.yjpark.org/"/>
  <updated>2012-11-05T19:53:59+08:00</updated>
  <id>http://blog.yjpark.org/</id>
  <author>
    <name><![CDATA[YJ Park]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Level Editor Based on IwGame - Introduction]]></title>
    <link href="http://blog.yjpark.org/blog/2012/10/12/level-editor-based-on-iwgame-introduction/"/>
    <updated>2012-10-12T22:56:00+08:00</updated>
    <id>http://blog.yjpark.org/blog/2012/10/12/level-editor-based-on-iwgame-introduction</id>
    <content type="html"><![CDATA[<p>It's been more than a month since my post about the idea of <a href="/blog/2012/08/30/game-engine-based-on-marmalade-and-iwgame/">game engine based on Marmalade and IwGame</a>, after the post, spent many hours busy coding, now I've got the basic level editor up running, I think it's pretty cool, so here are some details about it.</p>

<p>Here is a screenshot of the level editor:</p>

<p><img src="/images/pfgame/leveleditor-screenshot-1.png"></p>

<!-- more -->


<h2>Updates about Original Post</h2>

<p>Before talking about the level editor, first I want to share some updates about Marmalade and IwGame in the last month.</p>

<p>First, Marmalade 6.1 was released, it's great for me, the 2 most useful feature for me are: Open GL ES 2.0 shader support in simulator, easy to debug shader now, and OSX deployment to send game/editor as running application to Graphic Artists.</p>

<p>Second, DrMop commented in the original post, assure that IwGame is very actively developed and <a href="http://www.drmop.com/index.php/2012/10/08/iwgame-0-4-coming-very-soon-iwgame-is-going-portable/">version 0.40 is about to be released</a>.</p>

<p>Quick test with Chinese characters in CIwGameActorText, it works out of box, just specify a truetype font, write the text in UTF-8, then it's done. I guess there is no need for CIwGameString to support unicode, since it can pass the bytes to Marmalade correctly.</p>

<h2>Current Features</h2>

<p>Now back to the level editor, it support image objects with layer(display order), depth(for parallel perspective), users can add/remove/copy/group objects, and can change position/size/scale/angle/origin with mouse, zoom in/out and move the camera around. Also I've integrated a Box2D debug view, and you can edit simple shape in it too (boxes and circles).</p>

<p>Actually it's a bit easier than I thought to implement it, caused me about 5 weeks so far, worked quite hared during the time, but also had a basic animation editor and a game prototype at the same time, so the pure time on it was about 3 weeks.</p>

<p>Our graphic artists have already used the editor to build a few nice scenes and they are getting more productively with it day by day, It's just what I wished it to be: a tool to make developer and other roles to collaborative more effectively, think it's at the right direction.</p>

<p>Also it's extremely useful for prototyping and debugging, the way I did it is to add a few tools around the objects, so when you're running your game, you can switch to editor mode at any time (by tapping the tab key), then you can check the scene to see what's going on, or adjust the objects right in the editor, then you can switch back to game mode. It feels like you can freeze time in game at any time, then make changes, then go back, very cool, and very useful.</p>

<p>To make it clear, here is a screenshot of our game prototype:
<img src="/images/pfgame/leveleditor-screenshot-2.png"></p>

<p>After I switch to editor mode, and zoom out a bit, I can get the screen as the first screenshot, then I can adjust the level, and switch back to keep playing. Our graphic artist feels very happy with this in game editing ability, they can see their changes instantly, which make the whole process very efficiently.</p>

<p>Another very useful feature is the Box2D shape editor and debug view, we can create boxes and circles right through the level editor, they will be effective instantly, so for a game based on Box2D, it's very easy to create the levels by non-programmers.</p>

<p>Here is the same game prototype with Box2D debug view enabled:
<img src="/images/pfgame/leveleditor-screenshot-3.png"></p>

<p>As you can see, we use boxes and circles to create a rather complicate level. Also it's very helpful to debug the collisions between objects, e.g. when I was implementing the effect of arrows hitting targets.</p>

<h2>What's Missing</h2>

<p>As a basic level editor with advanced features (particle, animations...), I think it's quite complete and usable, we've got quite some prototype scenes with it till now, and the artists feel happy with it most of the time.</p>

<p>The biggest missed feature is undo/redo, only deleting have a quick undo since it can cause big trouble when touch wrong key accidentally. To make it better, all version of saved files are kept on disk, so if you made big mistakes, then it's recoverable by hand. It's non trivial to implement a good undo/redo system, so probably this feature will only be added in a much later stage.</p>

<p>Also there is on gui at all, all functions are done by keyboard shortcut and mouse movement, so there is a learning curve, and you'll feel a bit awkward at first. Though this is the quickest way for implementation and also for actually using IMO, after a few days using it, both of our graphic artists can use it with no big problem, and they said that it's a bit geeky feeling when using it. :)</p>

<p>And manual works required to create a skeleton scene and import images to it, it's not hard, just running some python scripts, but it's still not so simple for non-programmers.</p>

<h2>What's Next</h2>

<p>Guess I'll keep improving it, fixing bugs first, now the focus is character animation editor, and the game prototype. After that, I'll add particle feature to the level editor.</p>

<p>I feel quite happy doing this kind of tool works, and actually it's not hard to make it usable as a standalone project and let other people to use it. e.g. I can make a converter to generate cocos builder format, then it can be used in cocos2d projects. Or if I make my animation editor to export spriter's xml syntax, it can be used in many other projects too.</p>

<p>And at least for myself and our graphic artists, we think that our homebrew tools are much easier to use and feature complete (for just our needs) comparing to the tools we've tried. e.g. cocos builder, sprite helper, and spriter. Not saying that my editors are better products, just they are tailored by exactly our need and my design approach, and since it's integrated in the exact game process, the workflow is much better comparing to a 3rd party tools. Also our level is pretty big(currently the demo scene is about 20000 pixel wide, and the engine/editor can support much bigger usage), I can't find a proper tool to handle such big scene.</p>

<p>Though making a generic tool will involve many not so interesting works, and it's very hard to make it works for more people, and probably my tools are just too tailored to our need, so I think I will keep focusing on our games in the near future.</p>

<p>But anyway, I already have some demo scene editor running as OS X application, will make it downloadable in next few days, after I wrote a very basic manual about it. like Jakub commented in the original post, even if I decided to keep it private, it can still help others a bit, and maybe by using it in a experimental way, people can get some ideas about improving their own tools.</p>

<p>If you are interested to see more information about the editor, please leave comments, thanks.</p>

<p>I'll try to post more about technical details about some aspects of the editors, some hacks I used, and some mistakes I've overcomed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL ES 2.0 Shader in Marmalade]]></title>
    <link href="http://blog.yjpark.org/blog/2012/10/02/opengl-es-2-dot-0-shader-in-marmalade/"/>
    <updated>2012-10-02T18:00:00+08:00</updated>
    <id>http://blog.yjpark.org/blog/2012/10/02/opengl-es-2-dot-0-shader-in-marmalade</id>
    <content type="html"><![CDATA[<p>Marmalade provide good support for writing custom shaders in it, though it's not easy to get all the information to start writing the first shader in my case, here is some information that I gathered during the process.</p>

<p>I decided to only support Open GL 2.0 Shaders in our games, most current devices support it, and as a small team, supporting older devices is a bit hard since we don't have testers for now, also the architect of 2.0 is simpler and cleaner.</p>

<p>The sample shader's function is to replace non-transparent part of the image to a given color, then the color can be changed programmingly (also by xml thanks to IwGame). Basically the images will be just working as masks, the actually color to be rendered are controlled by the shader.</p>

<p>I will not cover the basics about Open GL Shaders, there are plenty of information on the web about that, also a PDF doc is included in Marmalade installation, it's a good start point to me, you should read it first to get the concepts.</p>

<!-- more -->


<h2>Marmalade Rendering with Custom Shader</h2>

<p>Marmalade support shader very well by the <a href="http://docs.madewithmarmalade.com/native/api_reference/api/classCIwGxShaderTechnique.html">CIwGxShaderTechnique</a> class, to use it, you need to set it to material, here is the snnipet for that:</p>

<p>``` c++</p>

<pre><code>CIwMaterial* mat = IW_GX_ALLOC_MATERIAL();
mat-&gt;SetTexture(image-&gt;getImage2D()-&gt;GetMaterial()-&gt;GetTexture());
mat-&gt;SetShaderTechnique(shader);
IwGxSetMaterial(mat);
</code></pre>

<p>```
The shader here is a pointer to CIwGxShaderTechnique, and the image is a pointer to CIwGameImage (part of IwGame), if you are not using IwGame, you can use Iw2d, or IwGx directly.</p>

<p>The following function can load a shader from a resource group.
``` c++
CIwGxShaderTechnique<em> getShader(const char</em> shaderName) {</p>

<pre><code>CIwGxShaderTechnique* shaderTemplate = (CIwGxShaderTechnique*)IwGetResManager()-&gt;GetResNamed(shaderName, "CIwGxShaderTechnique");

if (shaderTemplate == NULL) {
    return false;
}

shader = new CIwGxShaderTechnique();
IwSerialiseOpen("shader-Duplicate.bin", false);
shaderTemplate-&gt;Serialise();
IwSerialiseClose();

IwSerialiseOpen("shader-Duplicate.bin", true);
shader-&gt;Serialise();
IwSerialiseClose();
return shader;
</code></pre>

<p>}
```
Note: since I need multiple instance of the shader for diffrent images with differnt colors, here I use a quick solution with marmalade's serialization, which is NOT thread safe due to the hard code file name.</p>

<p>Load the resource group as this:
``` c++</p>

<pre><code>IwGetResManager()-&gt;LoadGroup("effect/Shaders.group");
</code></pre>

<p>```</p>

<h2>Files Used</h2>

<p>You need to include the shader files in the asset section of the mkb/mkf file, like this</p>

<p>```
files
{</p>

<pre><code>[Data]
(data)
effect/Shaders.group
</code></pre>

<p>}</p>

<p>assets
{</p>

<pre><code>(data-ram/data-gles1)
effect/Shaders.group.bin
</code></pre>

<p>}
```
Please refer to Marmalade's documents if you are not familiar with the resource compiling process and mkb syntaxes.</p>

<p>Here is data/effect/Shaders.group
```
CIwResGroup
{</p>

<pre><code>name "PettyFun Environment Shaders"
shared true

"./PfMaskEffectShader.itx"
</code></pre>

<p>}
```</p>

<p>The content of data/effect/PfMaskEffectShader.itx
```
CIwGxShaderTechnique
{</p>

<pre><code>name "PfMaskEffectShader"

param "p_Color" vec4 1 {0.0, 0.0, 1.0, 1.0}

shader "vertex"
{
    attribute highp vec4 inVert;
    attribute mediump vec2 inUV0;

    uniform highp mat4 inPMVMat;
    uniform mediump vec2 inUVOffset;
    uniform mediump vec2 inUVScale;

    varying mediump vec2 v_UV0;

    void main(void)
    {
        gl_Position = inPMVMat * inVert;

        v_UV0 = inUV0 * inUVScale + inUVOffset;
    }
}
shader "fragment"
{
    uniform sampler2D inSampler0;
    varying mediump vec2 v_UV0;
    uniform mediump vec4 p_Color;

    void main(void)
    {
        mediump vec4 c = texture2D(inSampler0, v_UV0);
        if (c.a &lt; 0.1) {
            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
        } else {
            gl_FragColor = p_Color;
        }
    }
} 
</code></pre>

<p>}
```
Please read <a href="http://docs.madewithmarmalade.com/native/api_reference/api/group__IwGxShaderTechnique.html">IwGxShaderTechnique Reference</a> for the list of the attributes that you can use. It took me quite a while to find this document since this is no links to this page on the class reference page. This is VERY useful for writing shaders in Marmalade.</p>

<h2>Update Params By Code and XML</h2>

<p>the <strong>param</strong> in the shader is for the parameters from your code, change it's value like this.
``` cpp
void PfShaderEffect::SetShaderParam(const char <em>paramName, CIwGxShaderUniform::CIwGxShaderUniformType type, const void</em> value) {</p>

<pre><code>if (Shader == NULL) return;

CIwGxShaderUniform* param = Shader-&gt;GetParam(paramName);
if( param ) {
    param-&gt;Set(type, 0, value);
} else {
    PfTrace("Shader Param Not Exist: %s", paramName);
}
</code></pre>

<p>}</p>

<p>void PfShaderEffect::SetShaderParamAsInt(const char *paramName, int value) {</p>

<pre><code>SetShaderParam(paramName, CIwGxShaderUniform::INT, &amp;value);
</code></pre>

<p>}</p>

<p>void PfShaderEffect::SetShaderParamAsFloat(const char *paramName, float value) {</p>

<pre><code>SetShaderParam(paramName, CIwGxShaderUniform::FLOAT, &amp;value);
</code></pre>

<p>}</p>

<p>void PfShaderEffect::SetShaderParamAsColor(const char *paramName, CIwColour value) {</p>

<pre><code>float color[4];
color[0] = 1.0f * value.r / 0xff;
color[1] = 1.0f * value.g / 0xff;
color[2] = 1.0f * value.b / 0xff;
color[3] = 1.0f * value.a / 0xff;
SetShaderParam(paramName, CIwGxShaderUniform::VEC4, color);
</code></pre>

<p>}</p>

<p>void PfShaderEffect::UpdateColorFromAnimation(CIwColour<em> color, CIwGameAnimInstance </em>animation) {</p>

<pre><code>CIwGameAnimFrameVec4* value = (CIwGameAnimFrameVec4*)animation-&gt;getCurrentData();
color-&gt;r = value-&gt;data.x;
color-&gt;g = value-&gt;data.y;
color-&gt;b = value-&gt;data.z;
color-&gt;a = value-&gt;data.w;
</code></pre>

<p>}
```</p>

<p>Since I'm using IwGame, it's very easy to make the color controlled by the XOML animation, all I need to do is to override the UpdateFromAnimation method of CIwGameActor, and handle the color value from it.
``` cpp
bool PfMaskEffect::UpdateFromAnimation(CIwGameAnimInstance *animation) {</p>

<pre><code>if (PfShaderEffect::UpdateFromAnimation(animation))
    return true;

bool delta = animation-&gt;isDelta();

unsigned int element_name = animation-&gt;getTargetPropertyHash();

if (element_name == PfHash("Color")) {
    UpdateColorFromAnimation(&amp;Color, animation);
    SetShaderParamAsColor("p_Color", Color);
} else {
    return false;
}
    return true;
</code></pre>

<p>}
```</p>

<p>Then you can generate smooth color switch animation by pure XML as normal IwGame Animation.
``` xml</p>

<pre><code>&lt;Template Name="MaskColorTimelineTemplate"&gt;
    &lt;Animation Name="MaskColorAnim$name$" Duration="$duration$" Type="vec4"&gt;
        &lt;Frame Value="$startcolor$" Time="0" /&gt;
        &lt;Frame Value="$endcolor$" Time="$duration$" /&gt;
    &lt;/Animation&gt;
    &lt;Timeline Name="MaskColorTimeline$name$" AutoPlay="true"&gt;
        &lt;Animation Anim="MaskColorAnim$name$" Target="Color" Repeat="1" StartAtTime="0"/&gt;
    &lt;/Timeline&gt;
&lt;/Template&gt;

&lt;Actor ...&gt;
    &lt;FromTemplate Template="MaskColorTimelineTemplate" name="ColorChange" duration="2"
        startcolor="180, 220, 251, 255" endcolor="255, 0, 0, 255" /&gt;
&lt;/Actor&gt;
</code></pre>

<p>```
This is very flexible and powerful, no need to recompile, just updating plain XML files.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game Engine Based on Marmalade and IwGame]]></title>
    <link href="http://blog.yjpark.org/blog/2012/08/30/game-engine-based-on-marmalade-and-iwgame/"/>
    <updated>2012-08-30T22:58:00+08:00</updated>
    <id>http://blog.yjpark.org/blog/2012/08/30/game-engine-based-on-marmalade-and-iwgame</id>
    <content type="html"><![CDATA[<p>Since August 2012, 2 developers(including me) and 2 graphic designers come together and started a small game studio to work on some mobile casual games, as the tech lead, I need to choose a development way for our first batch of games.</p>

<p>Our games will be mostly 2D games, might with some 3D charactors, though the scenes or levels will be 2D, I think that's better for the team and the graphic quality of the games.</p>

<p>After quite some readings and experiments, I finally have a clear idea about how we gonna build these games, We will create our small game engine, on top of Marmalade and IwGame.</p>

<h2>Why choose Marmalade?</h2>

<p>I did have quite some experience on cocos2d, though it's been ruled out pretty quickly. I want our game to work on multiple platforms, since we don't use much platform-specific features, we don't get much with objective-c. Also personally I am not really a big fan of cocos2d, it's kind of a simple framework with good quality, though missing some of the features I want with a solid framework, e.g. Tool or Markup for graphic scene editor, I've tried Cocos Builder and Level Helper very breifly, might be just me, but I don't like neither one. A similar option is to go with cocos2d-x, which is cross platform, but because of similar reason, I didn't dig into it deeply.</p>

<p>The second option is Unity3d, I've used it for about 3 months before, It's pretty good, easy to use, and have a hugh community with tons of good plugins. My biggest concern about it is the binary format of the prefebs, it's a bit like the xib file in App development, hard to change and track, as a developer, I want a text based format. Also don't really think the .Net virtual machine is the best way for our rather small games. My feeling is that it's more like a tool for game designers and graphic designers, as developers, we gave up full control in exchange with a full-feature game development environment. And also it's mostly 3D centric, 2D works are possible, but a bit awkard, since we don't need the 3D power and I want more control with my codes, I did not take this path either.</p>

<!-- more -->


<p>For good performance and graphic effects, I didn't investigate the fast development tools, most of them are HTML based or LUA based, more like quick prototype tools for me.</p>

<p>I've played with Airplay for a couple of days 2 years ago, technically it was very good, though with a rather steep learning curve, and lack of tutorials and blog post, so I didn't really learn it as a hobby. Now it's renamed to Marmalade, been updated pretty often, and having a much bigger user base and many successful games are based on it, like Draw Something or Cut The Rope. Since I will use the chosen platform for at least 1 or 2 years, I spend a week to really try to learn it this time.</p>

<p>The first impression was kind of negative, the OSX support seems to be much weaker than the windows one, a bunch of small problems were met, which almost make me give it up. Now I've been using it for about 1 month, still got some problem, though I think I start to feel comfortable with it.</p>

<p>There are still very few technical information about marmalade other than the official documents and forum, the only helpful tutorial I can find is the <a href="http://www.drmop.com/index.php/marmalade-sdk-tutorials/">DrMop tutorials</a>. It's very helpful to provide basic ideas for new Marmalade users.</p>

<p>The API documents of Marmalade is actually quite good after you get the basic ideas about it. Also the examples included are good learning source.</p>

<p>My current feeling about Marmalade is quite positive, it has nice features and solid quality, provide full control, has native bridge for potential platform-specific development.</p>

<p>The things I wish to be better:</p>

<ul>
<li>1st class OSX support, add the missing features of the simulator, fix the broken "mkb --iphone" device building (only trid on 10.8 + Xcode 4.4, not sure about other environments). (Update: --iphone is fixed in 6.1, simulator seems not updated)</li>
<li>Release to osx ability, then I can create desktop tools such as customized level editor instead of let my graphic designers to use the simulator to run them. (Update: Added in 6.1)</li>
<li>Float data types in IwGx, it's said to be included in 6.1 release which should be out soon, much simpler and less error-prone, we'll target on OpenGL ES 2.0 devices only (iOS devices first) to make our life easier since we can't afford dedicated tester anyway. (Update: Float added in 6.1 and works great, though we probably will not change IwGame to use float)</li>
<li>High level document besides API reference, and generally more documentations.</li>
<li>Better community and 3rd party components, it's quite unpopular in stackoverflow, very few blogs, and the github community projects are not very active and organized.</li>
</ul>


<h2>What is IwGame, and Why it is Helpful</h2>

<p>Marmalade is very low level, its design priciple is that people can make their engine working on it rather easily, but we don't have any game engine yet, so either I need to write a 2D engine from scratch, or choose a C/C++ engine to work with. Cocos2d-X works on Marmalade, though I want something more powerful. Many 3D engine works on it too, but they are too complex to me, I probably will choose Unity3D if I want a 3D engine.</p>

<p>According to the website, <a href="http://www.drmop.com/index.php/iwgame-engine/">IwGame</a> is a "Free Open Source Cross Platform Mobile Game Engine for Smart Phones and Tablets", it's a quite ambitious project, already has a long feature list with many future features, though still in an rather early stage.</p>

<p>The main reasons I chose it:</p>

<ul>
<li>Open source, I can tweak the codes to suit my needs better, and even if its development stopped, we can still improve it by ourselves.</li>
<li>XML file format, it's very powerful, e.g. make simple animations easily without coding. Also it's very easy to extend the system to add our own extensions. This is a hugh advantage to me.</li>
<li>Complete 2D framework, including sprite, scene, particle, physics, UI... No need to reimplement the basic things from the scratch, we can focus on more interesting stuffs.</li>
<li>Support 2D and 3D rendering, since the rendering codes are based on IwGx now, even for 2D games, some part of 3D elements can be very useful, so I think this flexibility is very good.</li>
<li>Good document and a full game source included, there are quite some typos in the included PDF document, though it provide most information I need to get started, plus reading the source code, It's kind of easy to learn (though still much harder comparing to cocos2d family).</li>
<li>Good code quality, easy to read and not hard to expand.</li>
</ul>


<p>Some worries about base our codes on it:</p>

<ul>
<li>It's a big project, and seems most code and docs are written by DrMop in several monthes. He did very great so far, though he has too many works ahead him, I am not sure where this project will be after 1 year, what if it's dead? also it's been a while since the last update.</li>
<li>On the other hand, if it's been developed rapidly, since it's not finished yet, we will need to expand it by ourself, it can be a problem to keep update with the future updates. I don't want to make a fork since many good features are on the list, though we can't wait for they to appear, We will be careful with out changes to make them easy to merge, but what if the owner decide to change the API interface drasticly?</li>
<li>The core string class (CIwGameString) is not unicode compatible, and the author didn't have plan to support it soon. This can be a big problem for us to support multiple language, especially the asian languages. I want to find a clean solution for this, though haven't started working on it yet.</li>
<li>There is no unit tests yet, so it might introduce its own bugs, especially if it's been update quickly.</li>
</ul>


<h2>My Plan on The Game Engine</h2>

<p>Now I feel OK working with Marmalade and IwGame, the next steps will be creating the features/tools we need for our games, i.e. create a game engine for our requirements.</p>

<p>Here is the current list of works to be done:</p>

<ul>
<li>Basic level editing, to arrange 2D sprites on screen, supporting basic operations such as moving, scaling, rotating, etc. Our level/scene will be 2D non-tile with multiple layers, something similar to <a href="http://javilop.com/gamedev/c-game-programming-tutorial-non-tile-based-arbitrary-positioned-entity-engine-editor-like-in-braid-or-aquaria-games/">this</a></li>
<li>Complex charactor editing, 2D or 3D charactors with body parts, movement and animations.</li>
<li>Advanced level editing, particles, visual effects, events, etc.</li>
<li>UI editing.</li>
</ul>


<p>All these editors will base on the XOML markup system of IwGame.</p>

<p>These are still quite some works, might be over engineering for our first game, though as a developer, I don't want to just do things in the quick and dirty way, I want to do it in a proper way. And I think a proper engine can make future games easier to develop, so in the long run, it will worth the efforts.</p>

<p>Think I will start to write more about Marmalade and IwGame in the future, both help myself to understand them better, and hopefully might help some other developers too.</p>
]]></content>
  </entry>
  
</feed>
