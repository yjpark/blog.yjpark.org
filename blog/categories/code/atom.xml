<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Living and Programming - YJ Park's Blog]]></title>
  <link href="http://blog.yjpark.org/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://blog.yjpark.org/"/>
  <updated>2014-04-13T17:20:12+08:00</updated>
  <id>http://blog.yjpark.org/</id>
  <author>
    <name><![CDATA[YJ Park]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SILP: Simple Individual Line Preprocessor]]></title>
    <link href="http://blog.yjpark.org/blog/2014/04/12/silp-simple-individual-line-preprocessor/"/>
    <updated>2014-04-12T20:18:15+08:00</updated>
    <id>http://blog.yjpark.org/blog/2014/04/12/silp-simple-individual-line-preprocessor</id>
    <content type="html"><![CDATA[<h2>Why bother with a preprocessor?</h2>

<p>I was quite busy working on our <a href="http://emberconflict.com/">RTS game on iPad</a> for almost a year, we are quite close to our first public version now. It&rsquo;s developed with Unity3d, using uLink as the network library. Created a quite nice data context system on Unity3d, so non-developers can update pure visual part of the system without developers' help, will write some entries on it later when got time.</p>

<p>SILP is a very small side project come from the process working on it. It&rsquo;s a simple language-agnostic preprocessor.</p>

<p>There are many discussions about whether a programming language should include preprocessor, most people seems agree that preprocessor is too error-prune and sacrifice readability too badly, and there should be seldom cases that an alternative can&rsquo;t be find to replace the preprocessor usage.</p>

<p>I agree that in most cases we don&rsquo;t need preprocessor though there are several cases that I would like to have a preprocessor in my tool set for cleaner codes or can remove some trivial typing. Here are 2 examples:</p>

<!--more-->


<h3>Common Import Statements</h3>

<p>In each project, most likely there will be some very common import statements that every source file want to include, e.g. logging and other utilities. In dynamic languages such as Python, it&rsquo;s not hard to inject them into the global namespace in some bootstrap functions, though in Java or Go it&rsquo;s not quite possible, each file has to have these lines.</p>

<p>Since Go support and recommend import from a git url, this is a bit more annoying. Here is a quick example.</p>

<p><code>go
import "github.com/golang/glog"
</code></p>

<p>It&rsquo;s both longer to type, and harder to change in the future, what if we need to change something in the source codes of the library? We can fork the source repository, and working on it, though we have to go over every source file and change the url of the import. It&rsquo;s not too hard with some tools like sed, though it&rsquo;s a bit ugly and fragile to me since we have to replace in text level.</p>

<p>Of course with just one import, it&rsquo;s not a big problem, though in practice, it&rsquo;s very easy to have several imports for every file, and quite some other imports grouped by file types (e.g. services that need db library, services that provide RPC calls&hellip;)</p>

<h3>Duplicate Codes</h3>

<p>Some time, it&rsquo;s not very easy to use usual way to remove duplicated codes, here is an example in Unity3d, it&rsquo;s a piece of our codes to check whether a user is already online in the system.</p>

<p>```csharp
private IEnumerator SaveArmyAsync(LobbyClient client, ArmyInfo armyInfo) {</p>

<pre><code>float startTime = Monitor.AddStartedEvent(LobbyMonitor.ARMY_SAVE_ARMY);

string error = LobbyNetError.ACCOUNT_ONLINE_WITH_OTHER_DEVICE;
IEnumerator checkOnline = client.CheckOnlinePlayer(_OnlinePlayerInfoBucket, () =&gt; {
    error = null;
});
while (checkOnline.MoveNext()) yield return checkOnline.Current;

if (error != null) {
    LobbyRPCUtils.SendNak(this, client, LobbyMonitor.ARMY_SAVE_ARMY, "RPC_SaveArmyFailed", error);
    yield break;
}
</code></pre>

<p>```</p>

<p>The logic here may not be very clear without full context, basically what it did is to create a event and send to our <a href="https://github.com/imvu-open/istatd">istatd server</a>, save the time into <code>startTime</code>, calling <code>client.CheckOnlinePlayer()</code> to check whether the user is logged in the system from other device, and calling <code>LobbyRPCUtils.SendNak()</code> to send a RPC call to the client if the user is already online.</p>

<p>The same structure is almost identical for all our server side RPC functions, only difference are the event id and RPC name, in this case <code>LobbyMonitor.ACCOUNT_LOGIN</code> and <code>RPC_OnLoginFailed</code>. As you can see, common functions are created to do most logic. But it&rsquo;s not very easy to make the whole pattern into a shorter format, because we have to follow the coroutine style here.</p>

<p>For example, line 3 ~ 7 are running <code>client.CheckOnlinePlayer()</code> in the coroutine way, and line 9 ~ 12 are handling the error case. We can&rsquo;t yield break in <code>client.CheckOnlinePlayer()</code> since it will only break it&rsquo;s own coroutine, instead of the outer one here.</p>

<p>Passing callback function into <code>client.CheckOnlinePlayer()</code> can solve the error handling, though still need the first trick, and the code will be less readable comparing with this way (using the callback style in many other places though).</p>

<p>If we are using a language supporting preprocessor, then we can easily create a macro here to do the duplicated works, though not possible in C#, until I created the SILP project, Our only option was just copy-paste.</p>

<h2>So What is SILP?</h2>

<p>After we have more RPC calls in the system sharing the similar code structure shown in last example, I decided to do something to improve it. Solve it in the language scope seems not a good option to me (only possible approach I figured possible was to wrap coroutine somehow and use some customized data structure to provide cleaner interface, both heavy and unnecessary), and I was thinking about finding a language-agnostic preprocessor for a while, so I spent some time to look for a existing project that I can use.</p>

<p>After a quick research, was a bit disappointed with the result, most of the preprocessors either are heavily limited to one language or provide way too much power than I need (so it&rsquo;s harder to learn and use). It&rsquo;s very clear that all I need is just a simple text substitution tools, so I created SILP and spend a whole day on it, the result is quite satisfying.</p>

<h3>How Simple SILP Is?</h3>

<p>There is zero logic in the syntax, currently all supported feature is parameter substitution in the template, and unless super useful, no complex feature will be added in the future.</p>

<p>SILP only handle individual line as well. All generated lines will be put back to the original file after the line with SILP syntax.</p>

<h3>When Should Use SILP?</h3>

<ul>
<li>Standard code block that&rsquo;s hard to be eliminated by regular technique.</li>
<li>Some small piece of logic that you don&rsquo;t want to wrap in a function and the language doesn&rsquo;t support inline functions.</li>
</ul>


<h3>When Should NOT Use SILP?</h3>

<ul>
<li>If you can remove duplicated code in language supported way.</li>
<li>The logic is not standard, and using SILP make them harder to read.</li>
</ul>


<h2>Full Example With SILP</h2>

<p>After implementing SILP, here is how I can remove the duplicated codes in the previous online player checking logic, here is the <code>silp_cs.md</code> file:</p>

<pre><code># LOBBY_SERVER_RPC_CHECK_ONLINE_PLAYER(eventId, nakRPC) #
```C#
float startTime = Monitor.AddStartedEvent(${eventId});

string error = LobbyNetError.ACCOUNT_ONLINE_WITH_OTHER_DEVICE;
IEnumerator checkOnline = client.CheckOnlinePlayer(_OnlinePlayerInfoBucket, () =&gt; {
    error = null;
});
while (checkOnline.MoveNext()) yield return checkOnline.Current;
if (error != null) {
    LobbyRPCUtils.SendNak(this, client, ${eventId}, ${nakRPC}, error);
    yield break;
}
```
</code></pre>

<p>The format is actually a valid <a href="https://help.github.com/articles/github-flavored-markdown">github flavored markdown</a>, only supported syntax is the h1 title (has to be like <code># macro(param1, param2) #</code>), and code block.</p>

<p>Here is the rendered image with the above example by <a href="http://markedapp.com/">Marked</a>, looks nice isn&rsquo;t it? (note that you need to toggle the <code>convert fenced code block</code> option)</p>

<p><img src="/images/silp/silp_example_marked.png"></p>

<p>Now all the RPC calls will be like this:</p>

<p>```csharp
private IEnumerator SaveArmyAsync(LobbyClient client, ArmyInfo armyInfo) {</p>

<pre><code>//SILP: LOBBY_SERVER_RPC_CHECK_ONLINE_PLAYER(LobbyMonitor.ARMY_SAVE_ARMY, "RPC_SaveArmyFailed")
float startTime = Monitor.AddStartedEvent(LobbyMonitor.ARMY_SAVE_ARMY);                            //__SILP__
                                                                                                   //__SILP__
string error = LobbyNetError.ACCOUNT_ONLINE_WITH_OTHER_DEVICE;                                     //__SILP__
IEnumerator checkOnline = client.CheckOnlinePlayer(_OnlinePlayerInfoBucket, () =&gt; {                //__SILP__
    error = null;                                                                                  //__SILP__
});                                                                                                //__SILP__
while (checkOnline.MoveNext()) yield return checkOnline.Current;                                   //__SILP__
if (error != null) {                                                                               //__SILP__
    LobbyRPCUtils.SendNak(this, client, LobbyMonitor.ARMY_SAVE_ARMY, "RPC_SaveArmyFailed", error); //__SILP__
    yield break;                                                                                   //__SILP__
}                                                                                                  //__SILP__
</code></pre>

<p>```</p>

<p>All lines end with <code>//__SILP__</code> are generated automatically, and can be regenerated with SILP, so if you want to adjust the logic in the future, should be very easy to do, and create a new RPC call is trivial as well, only need to write one line, and run SILP again (current manually, though it should be easy to make it automatically)</p>

<h2>What&rsquo;s Next</h2>

<p>Here is the repository: <a href="https://github.com/yjpark/silp">https://github.com/yjpark/silp</a></p>

<p>It&rsquo;s also available through PyPi, you can install with</p>

<p><code>
pip install silp
</code></p>

<p>Will first finish the documentation for what&rsquo;s working now, maybe adding more languages to default setting (mainly just how to add the special comments).</p>

<p>Maybe put the language configuration into the <code>silp_xx.md</code> file as well, though it might be more complicate to use and error-prone, so not sure about how to do this yet.</p>

<p>There are some interesting possibilities with editors here, e.g. set up code folding for SILP line and the generated line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save Day One Summary to Evernote]]></title>
    <link href="http://blog.yjpark.org/blog/2014/01/21/save-day-one-summary-to-evernote/"/>
    <updated>2014-01-21T18:24:11+08:00</updated>
    <id>http://blog.yjpark.org/blog/2014/01/21/save-day-one-summary-to-evernote</id>
    <content type="html"><![CDATA[<h2>Why Not Just Use Evernote?</h2>

<p>I&rsquo;ve been using Evernote for several years, which is great, the best features to me are:</p>

<ul>
<li>Multi devices synchronization</li>
<li>High quality app on iOS/Android and OSX</li>
<li>Very good search in notes (even in the photos)</li>
</ul>


<p>Though lately I found myself write less an less in Evernote, if I&rsquo;m writing something long, then usually I will use MacVim, may copy the text back to Evernote. If I need to write a couple of line, the process to write in Evernote is like this:</p>

<ul>
<li>Switch to Evernote</li>
<li>Find the note for current day (each day I will have a new note.)</li>
<li>Go to the end of the note</li>
<li>Write something</li>
<li>Switch back</li>
</ul>


<p>Feels a bit heavy, also there is no information about when I did add the line into the note.</p>

<!--more-->


<h2>Day One</h2>

<p>Since 2013 I started to use <a href="http://dayoneapp.com/">Day One</a>, which is a very beautiful application(has OSX and iOS versions) for note taking. Here is the reasons that I like it:</p>

<ul>
<li>Quick note adding widget in menubar, which can be triggered by a global shortcut</li>
<li>Markdown format, rendered very nicely as well.</li>
<li>Dropbox synchronization, iCloud supported as well.</li>
<li>Every note has a timestamp.</li>
<li>Calendar view for all the notes.</li>
<li>Look and feels very nice.</li>
</ul>


<p>Then the process to add a quick note will be:</p>

<ul>
<li>Using the global shortcut.</li>
<li>Type, then Cmd-Enter to save it.</li>
</ul>


<p>It&rsquo;s much more light-weigh comparing to the Evernote way.</p>

<h2>Why Not Just Use Day One?</h2>

<p>One major missed part in <code>Day One</code> is the lack of Android support, also the search is not as good as evernote, another problem is that you can not see all the notes in one day at once, you have to mouse over each item to see the whole content, which is a bit annoying IMO.</p>

<h2>Dayone 2 Evernote</h2>

<p>So I wrote a very simple script to export <code>Day One</code> entries as a summary note in Evernote.</p>

<p>Timestamps will be added in front of each entry.</p>

<p>The summary note will look like:
```
[00:25]
One note written in Day One</p>

<p>[19:17]
Another note in Day One</p>

<p>&hellip;
```
They will not be converted to HTML format, since I prefer to keep the plain text format in Evernote, and MarkDown notes looks very nice as plain text to me.</p>

<p>Note that since I used the applescript to save the note, it only works on OSX. Also there is some tricks to keep track of the last saved date. Check the README in the repository for more informations.</p>

<p>The code is: <a href="https://github.com/yjpark/dayone2evernote">https://github.com/yjpark/dayone2evernote</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initial Release of s3eBass - Marmalade extension for BASS audio engine]]></title>
    <link href="http://blog.yjpark.org/blog/2012/11/06/initial-release-of-s3ebass-marmalade-extension-for-bass-audio-engine/"/>
    <updated>2012-11-06T23:24:00+08:00</updated>
    <id>http://blog.yjpark.org/blog/2012/11/06/initial-release-of-s3ebass-marmalade-extension-for-bass-audio-engine</id>
    <content type="html"><![CDATA[<p>The audio and music are playing a very important role in games, for our future games, I want them to have good quality of audio and music, e.g. don&rsquo;t use short loop of mp3 music, but something much longer and more dynamic without taking much space. My first thought is to use MIDI+soundfonts or some mod-based music, so I spent some time to try to see the possibility.</p>

<p>There are quite some libraries to support xm playback, though I can&rsquo;t find any Marmalade extensions on the web, in the forum someone mentioned that they made use of FMOD in their game, though there is no code shared, and FMOD is quite expansive.</p>

<p>After some search, I decided to use <a href="http://www.un4seen.com/bass.html">BASS audio engine</a>, which is quite powerful, with well designed API, not bad documentation and sample, and a reasonable price for small projects (the shareware license can cover product with small price).</p>

<p>Now I&rsquo;ve got a working extension(though the only test I did was to play a xm file on OSX, iOS and Android), think other people maybe interesting in the extension or how to create similar extensions, so I&rsquo;m going to share the extension and some experiences I&rsquo;ve learn from the process(not in this post).</p>

<!-- more -->


<h2>Quick Note about Implementation</h2>

<p>BASS itself support many platform, the platforms I need are: OSX, iOS, Android. It&rsquo;s pure C, so it shouldn&rsquo;t be too hard to make it work with Marmalade. Though it took me quite a while to get some basic idea about the Marmalade extension system.</p>

<p>Most documentation from Marmalade about extensions seems focusing on writing platform specific codes in custom extension, in this case, it&rsquo;s actually much more easier since BASS is already platform independent, all we need is to make it work with Marmalade&rsquo;s build system.</p>

<p>Will write more about how to wrap C libraries into Marmalade extension in other posts later.</p>

<h2>Code of the Extension</h2>

<p>Since basically I have no idea about how to use BASS now, I just tried to use some codes from the BASS examples, it works pretty good, the xm files sounds quite good.</p>

<p>Think I will write some wrapper layer around the C function calls to expose audio functionalities to C++, XML and Lua codes. Guess I will have much better idea about it in a couple of months after our first game get done.</p>

<p>I&rsquo;ve put the codes at <a href="https://github.com/yjpark/s3eBass">Github</a>, feel free to clone it, and give it a try. see the github pages for more details about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert Cocos2D Font (BMFont) to Marmalade's GxFont]]></title>
    <link href="http://blog.yjpark.org/blog/2012/11/05/convert-cocos2d-font-bmfont-to-marmalades-gxfont/"/>
    <updated>2012-11-05T19:16:00+08:00</updated>
    <id>http://blog.yjpark.org/blog/2012/11/05/convert-cocos2d-font-bmfont-to-marmalades-gxfont</id>
    <content type="html"><![CDATA[<p>In 2D games, it&rsquo;s typical to use image based font for UI elements, which can provide better graphic result, fast rendering, and usually smaller then true type fonts (especially if you want to support languages with big character set, e.g. Chinese).</p>

<p>There are quite some tools to generate such font images, I&rsquo;m using <a href="http://www.bmglyph.com/">bmGlyph</a> as the font generator, it can publish the popular &ldquo;Cocos2d / BMFont&rdquo; format, though it&rsquo;s not directly usable in Marmalade.</p>

<p>Marmalade is using its own font format, and provide a font generator in the SDK, though it only support plain color, and when I feed it with some Chinese characators, they are not included in the generated files. I&rsquo;m using the OS X version of the font builder, not sure about how the Windows version works.</p>

<p>My first thought was to add function to use the BMFont generated, though it&rsquo;s not an easy task, also I want to use IwGame&rsquo;s label components, which are based on Marmalade&rsquo;s GxFont and Truetype support.</p>

<p>After reading <a href="http://docs.madewithmarmalade.com/native/api_reference/iwgxfontapidocumentation/iwgxfontapioverview/iwgxfontfiles.html">GxFont Reference</a>, turns out it&rsquo;s using a fairly simple format, so I decided to write a converter to create gxfont files.</p>

<!-- more -->


<h2>Code of the Converter</h2>

<p>I&rsquo;ve put the codes at <a href="https://github.com/yjpark/marmalade-tools">Github</a>, feel free to clone it, and try to run it. see the github pages for more details about it.</p>

<p>The converter support UTF-8 characters with no problem, the size of the tga files is a bit big comparing to the Cocos2d version, since more empty spaces are needed for GxFont format.</p>

<p>It&rsquo;s kind of a straight-forward implementation, and probably there are ways to make it better, especially if the bmGlyph&rsquo;s console support is out (in the coming feature list now), the whole process of extracting characters from data file, create Cocos2d font, convert to GxFont can be fully automatied.</p>

<p>Just read the code if you&rsquo;re interested in the implementation details. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlantUML Plugin for Octopress]]></title>
    <link href="http://blog.yjpark.org/blog/2012/04/30/plantuml-plugin-for-octopress/"/>
    <updated>2012-04-30T23:20:00+08:00</updated>
    <id>http://blog.yjpark.org/blog/2012/04/30/plantuml-plugin-for-octopress</id>
    <content type="html"><![CDATA[<h2>What is PlantUML?</h2>

<p><a href="http://plantuml.sourceforge.net/">PlantUML</a> is a component that allows to quickly write:</p>

<ul>
<li>sequence diagram,</li>
<li>use case diagram,</li>
<li>class diagram,</li>
<li>activity diagram,</li>
<li>component diagram,</li>
<li>state diagram</li>
<li>object diagram</li>
</ul>


<p>I really like the idea of writing UML diagram with plain text. Since it&rsquo;s totally plaintext, it&rsquo;s very easy to do diff and version track, also you don&rsquo;t need to do anything about the layout (the text itself looks pretty good too).</p>

<p>Also the syntax of it is very well designed, and the generated diagrams looks really nice, so I use PlantUML for technical documentation with trac and sphinx.</p>

<h2>The Plugin</h2>

<p>After switching <a href="http://octopress.org/">Octopress</a> to my blog platform, I was looking for a way to integrate PlantUML within it, though I can&rsquo;t find one, so I wrote this very simple jekyll plugin (Octopress is based on <a href="http://jekyllrb.com/">Jekyll</a>).</p>

<p><a href="https://github.com/yjpark/jekyll-plantuml">jekyll-plantuml</a></p>

<!-- more -->


<h2>Configuration</h2>

<p>You need to download the plantuml.jar file from <a href="http://plantuml.sourceforge.net/download.html">http://plantuml.sourceforge.net/download.html</a></p>

<p>In your _config.xml, setup plantuml_jar to the downloaded jar file, e.g.</p>

<p><code>
plantuml_jar: ../_lib/plantuml.jar
plantuml_background_color: "#f8f8f8"
</code></p>

<p>The plantuml_background_color is optional, which will change the background of the generated diagram.</p>

<h2>Usage</h2>

<p>Just wrap the diagram text in &ldquo;plantuml&rdquo; block, e.g.</p>

<p>```

{% plantuml %}
Alice &ndash;> Bob: Authentication Request
Bob &mdash;> Alice: Authentication Response</p>

<p>Alice &ndash;> Bob: Another authentication Request
Alice &lt;&mdash; Bob: another authentication Response
{% endplantuml %}

```</p>

<h2>An Example</h2>

<p><center><img src='/images/plantuml/f6a3f2864ad1557c793a92f1c3de3951.png'></center></p>
]]></content>
  </entry>
  
</feed>
